{"version":3,"file":"tesserxel.js","sources":["../src/math/const.ts","../src/math/pool.ts","../src/math/algebra/vec2.ts","../src/math/algebra/mat3.ts","../src/math/algebra/mat4.ts","../src/math/algebra/quaternion.ts","../src/math/algebra/rotor.ts","../src/math/algebra/bivec.ts","../src/math/algebra/vec4.ts","../src/math/algebra/vec3.ts","../src/math/random.ts","../src/math/algebra/mat2.ts","../src/math/algebra/cplx.ts","../src/math/algebra/affine.ts","../src/math/geometry/camera.ts","../src/math/geometry/primitive.ts","../src/math/geometry/spline.ts","../src/math/noise.ts","../src/render/wgslparser.ts","../src/render/slice.ts","../src/render/gpu.ts","../src/mesh/index.ts","../src/mesh/face/facemesh.ts","../src/mesh/face/geom.ts","../src/mesh/tetra/tetramesh.ts","../src/mesh/tetra/geom.ts","../src/mesh/objparser.ts","../src/four/scene.ts","../src/four/light.ts","../src/four/renderer.ts","../src/four/vertexshader.ts","../src/four/material.ts","../src/physics/rigid.ts","../src/physics/broadPhase.ts","../src/math/algebra/matrix.ts","../src/physics/forces.ts","../src/physics/gjk.ts","../src/physics/narrowphase.ts","../src/physics/solver.ts","../src/physics/engine.ts","../src/render/voxel.ts","../src/util/ctrl.ts"],"sourcesContent":["export const _180 = Math.PI;\r\nexport const _30 = Math.PI / 6;\r\nexport const _60 = Math.PI / 3;\r\nexport const _45 = Math.PI / 4;\r\nexport const _90 = Math.PI / 2;\r\nexport const _360 = Math.PI * 2;\r\nexport const _DEG2RAD = Math.PI / 180;\r\nexport const _RAD2DEG = 180 / Math.PI;\r\nexport const _COS30 = Math.sqrt(3) / 2;\r\nexport const _TAN30 = Math.sqrt(3) / 3;\r\nexport const _GOLDRATIO = (Math.sqrt(5) - 1) / 2;","// from cannon.js: src/utils/pool.js\r\nexport abstract class Pool<T> {\r\n    objects: T[] = [];\r\n    abstract constructObject(): T;\r\n    pop() {\r\n        if (this.objects.length === 0) {\r\n            return this.constructObject();\r\n        } else {\r\n            return this.objects.pop()!;\r\n        }\r\n    }\r\n    push(...args: T[]) {\r\n        this.objects.push(...args);\r\n    }\r\n    resize(size: number) {\r\n        let objects = this.objects;\r\n        while (objects.length > size) {\r\n            objects.pop();\r\n        }\r\n        while (objects.length < size) {\r\n            objects.push(this.constructObject());\r\n        }\r\n        return this;\r\n    }\r\n}","\r\nimport { Complex } from \"./cplx\";\r\nimport { Srand } from \"../random\";\r\nimport {_360} from \"../const\";\r\nimport { Pool } from \"../pool\";\r\nexport class Vec2Pool extends Pool<Vec2>{\r\n    constructObject() { return new Vec2; }\r\n}\r\nexport const vec2Pool = new Vec2Pool;\r\nexport class Vec2 {\r\n    x: number;\r\n    y: number;\r\n    static readonly x = new Vec2(1, 0);\r\n    static readonly y = new Vec2(0, 1);\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this.x = x; this.y = y;\r\n    }\r\n    flat(): number[] {\r\n        return [this.x, this.y];\r\n    }\r\n    writeBuffer(b: Float32Array, offset: number = 0) {\r\n        b[offset] = this.x;\r\n        b[offset + 1] = this.y;\r\n    }\r\n    set(x: number = 0, y: number = 0): Vec2 {\r\n        this.x = x; this.y = y; return this;\r\n    }\r\n    copy(v: Vec2): Vec2 {\r\n        this.x = v.x; this.y = v.y; return this;\r\n    }\r\n    copyc(v: Complex): Vec2 {\r\n        this.x = v.re; this.y = v.im; return this;\r\n    }\r\n    clone(): Vec2 {\r\n        return new Vec2(this.x, this.y);\r\n    }\r\n    add(v2: Vec2): Vec2 {\r\n        return new Vec2(this.x + v2.x, this.y + v2.y);\r\n    }\r\n    addset(v1: Vec2, v2: Vec2): Vec2 {\r\n        this.x = v1.x + v2.x; this.y = v1.y + v2.y; return this;\r\n    }\r\n    addf(v2: number): Vec2 {\r\n        return new Vec2(this.x + v2, this.y + v2);\r\n    }\r\n    adds(v2: Vec2): Vec2 {\r\n        this.x += v2.x; this.y += v2.y; return this;\r\n    }\r\n    addfs(v2: number): Vec2 {\r\n        this.x += v2; this.y += v2; return this;\r\n    }\r\n    /** this += v * k */\r\n    addmulfs(v: Vec2, k: number) {\r\n        this.x += v.x * k; this.y += v.y * k; return this;\r\n    }\r\n    neg(): Vec2 {\r\n        return new Vec2(-this.x, -this.y);\r\n    }\r\n    negs(): Vec2 {\r\n        this.x = - this.x; this.y = -this.y;\r\n        return this;\r\n    }\r\n    sub(v2: Vec2): Vec2 {\r\n        return new Vec2(this.x - v2.x, this.y - v2.y);\r\n    }\r\n    subset(v1: Vec2, v2: Vec2): Vec2 {\r\n        this.x = v1.x - v2.x; this.y = v1.y - v2.y; return this;\r\n    }\r\n    subf(v2: number): Vec2 {\r\n        return new Vec2(this.x - v2, this.y - v2);\r\n    }\r\n    subs(v2: Vec2): Vec2 {\r\n        this.x -= v2.x; this.y -= v2.y; return this;\r\n    }\r\n    subfs(v2: number): Vec2 {\r\n        this.x -= v2; this.y -= v2; return this;\r\n    }\r\n    mulf(v2: number): Vec2 {\r\n        return new Vec2(this.x * v2, this.y * v2);\r\n    }\r\n    mulfs(v2: number): Vec2 {\r\n        this.x *= v2; this.y *= v2; return this;\r\n    }\r\n    mul(v2: Vec2): Vec2 {\r\n        return new Vec2(this.x * v2.x, this.y * v2.y);\r\n    }\r\n    muls(v2: Vec2): Vec2 {\r\n        this.x *= v2.x; this.y *= v2.y; return this;\r\n    }\r\n    divf(v2: number): Vec2 {\r\n        v2 = 1 / v2;\r\n        return new Vec2(this.x * v2, this.y * v2);\r\n    }\r\n    divfs(v2: number): Vec2 {\r\n        v2 = 1 / v2;\r\n        this.x *= v2; this.y *= v2; return this;\r\n    }\r\n    div(v2: Vec2): Vec2 {\r\n        return new Vec2(this.x / v2.x, this.y / v2.y);\r\n    }\r\n    divs(v2: Vec2): Vec2 {\r\n        this.x /= v2.x; this.y /= v2.y; return this;\r\n    }\r\n    dot(v2: Vec2): number {\r\n        return this.x * v2.x + this.y * v2.y;\r\n    }\r\n    norm(): number {\r\n        return Math.hypot(this.x, this.y);\r\n    }\r\n    norms(): Vec2 {\r\n        let v2 = Math.hypot(this.x, this.y);\r\n        v2 = v2 == 0 ? 0 : (1 / v2);\r\n        this.x *= v2; this.y *= v2; return this;\r\n    }\r\n    normsqr(): number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    norm1(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    norminf(): number {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n    normi(i: number): number {\r\n        return Math.pow(Math.pow(this.x, i) + Math.pow(this.y, i), 1 / i);\r\n    }\r\n    wedge(v2: Vec2): number {\r\n        return this.x * v2.y - this.y * v2.x;\r\n    }\r\n    rotate(angle: number): Vec2 {\r\n        let s = Math.sin(angle); let c = Math.cos(angle);\r\n        return new Vec2(\r\n            this.x * c - this.y * s,\r\n            this.x * s + this.y * c,\r\n        )\r\n    }\r\n    rotates(angle: number): Vec2 {\r\n        let s = Math.sin(angle); let c = Math.cos(angle);\r\n        let x = this.x * c - this.y * s;\r\n        this.y = this.x * s + this.y * c;\r\n        this.x = x;\r\n        return this;\r\n    }\r\n    static rand(): Vec2 {\r\n        let a = Math.random() * _360;\r\n        return new Vec2(Math.cos(a), Math.sin(a));\r\n    }\r\n    static srand(seed: Srand): Vec2 {\r\n        let a = seed.nextf() * _360;\r\n        return new Vec2(Math.cos(a), Math.sin(a));\r\n    }\r\n    distanceTo(p: Vec2) {\r\n        return Math.hypot(p.x - this.x, p.y - this.y);\r\n    }\r\n    distanceSqrTo(p: Vec2) {\r\n        let x = p.x - this.x, y = p.y - this.y;\r\n        return x * x + y * y;\r\n    }\r\n    equal(v: Vec2) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    pushPool(pool: Vec2Pool = vec2Pool) {\r\n        pool.push(this);\r\n    }\r\n}\r\n\r\nexport let _vec2 = new Vec2();","import { Pool } from \"../pool\";\r\nimport { Quaternion } from \"./quaternion\";\r\nimport { Vec3 } from \"./vec3\";\r\n\r\nexport class Mat3Pool extends Pool<Mat3>{\r\n    constructObject() { return new Mat3; }\r\n}\r\nexport const mat3Pool = new Mat3Pool;\r\nexport class Mat3 {\r\n    elem: number[];\r\n    static id = new Mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\r\n    static zero = new Mat3(0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    static diag(a: number, b: number, c: number): Mat3 {\r\n        return new Mat3(\r\n            a, 0, 0,\r\n            0, b, 0,\r\n            0, 0, c\r\n        );\r\n    }\r\n    constructor(\r\n        a: number = 1, b: number = 0, c: number = 0,\r\n        d: number = 0, e: number = 1, f: number = 0,\r\n        g: number = 0, h: number = 0, i: number = 1\r\n    ) { this.elem = [a, b, c, d, e, f, g, h, i]; }\r\n    set(\r\n        a: number = 0, b: number = 0, c: number = 0,\r\n        d: number = 0, e: number = 0, f: number = 0,\r\n        g: number = 0, h: number = 0, i: number = 0\r\n    ): Mat3 { this.elem = [a, b, c, d, e, f, g, h, i]; return this; }\r\n    setid(): Mat3 { this.elem = [1, 0, 0, 0, 1, 0, 0, 0, 1]; return this; }\r\n\r\n    ts(): Mat3 {\r\n        let me = this.elem;\r\n        let tmp = me[1]; me[1] = me[3]; me[3] = tmp;\r\n        tmp = me[2]; me[2] = me[6]; me[6] = tmp;\r\n        tmp = me[5]; me[5] = me[7]; me[7] = tmp;\r\n        return this;\r\n    }\r\n    t(): Mat3 {\r\n        return new Mat3(\r\n            this.elem[0], this.elem[3], this.elem[6],\r\n            this.elem[1], this.elem[4], this.elem[7],\r\n            this.elem[2], this.elem[5], this.elem[8]\r\n        );\r\n    }\r\n\r\n    copy(m2: Mat3): Mat3 {\r\n        for (var i = 0; i < 4; i++) {\r\n            this.elem[i] = m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    add(m2: Mat3): Mat3 {\r\n        let m = new Mat3();\r\n        for (var i = 0; i < 9; i++) {\r\n            m.elem[i] = this.elem[i] + m2.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    adds(m2: Mat3): Mat3 {\r\n        for (var i = 0; i < 9; i++) {\r\n            this.elem[i] += m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    neg(): Mat3 {\r\n        let m = new Mat3();\r\n        for (var i = 0; i < 9; i++) {\r\n            m.elem[i] = -this.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    negs(): Mat3 {\r\n        for (var i = 0; i < 9; i++) {\r\n            this.elem[i] = -this.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    sub(m2: Mat3): Mat3 {\r\n        let m = new Mat3();\r\n        for (var i = 0; i < 9; i++) {\r\n            m.elem[i] = this.elem[i] - m2.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    subs(m2: Mat3): Mat3 {\r\n        for (var i = 0; i < 9; i++) {\r\n            this.elem[i] -= m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    mulf(k: number): Mat3 {\r\n        let m = new Mat3();\r\n        for (var i = 0; i < 9; i++) {\r\n            m.elem[i] = this.elem[i] * k;\r\n        }\r\n        return m;\r\n    }\r\n    mulfs(k: number): Mat3 {\r\n        for (var i = 0; i < 9; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    mulv(v: Vec3): Vec3 {\r\n        let a = this.elem;\r\n        return new Vec3(\r\n            v.x * a[0] + v.y * a[1] + v.z * a[2],\r\n            v.x * a[3] + v.y * a[4] + v.z * a[5],\r\n            v.x * a[6] + v.y * a[7] + v.z * a[8]\r\n        );\r\n    }\r\n    mul(m: Mat3): Mat3 {\r\n        let a = this.elem; let b = m.elem;\r\n        return new Mat3(\r\n            a[0] * b[0] + a[1] * b[3] + a[2] * b[6], a[0] * b[1] + a[1] * b[4] + a[2] * b[7], a[0] * b[2] + a[1] * b[5] + a[2] * b[8],\r\n            a[3] * b[0] + a[4] * b[3] + a[5] * b[6], a[3] * b[1] + a[4] * b[4] + a[5] * b[7], a[3] * b[2] + a[4] * b[5] + a[5] * b[8],\r\n            a[6] * b[0] + a[7] * b[3] + a[8] * b[6], a[6] * b[1] + a[7] * b[4] + a[8] * b[7], a[6] * b[2] + a[7] * b[5] + a[8] * b[8],\r\n        );\r\n    }\r\n    muls(m: Mat3): Mat3 {\r\n        let a = this.elem; let b = m.elem;\r\n        this.set(\r\n            a[0] * b[0] + a[1] * b[3] + a[2] * b[6], a[0] * b[1] + a[1] * b[4] + a[2] * b[7], a[0] * b[2] + a[1] * b[5] + a[2] * b[8],\r\n            a[3] * b[0] + a[4] * b[3] + a[5] * b[6], a[3] * b[1] + a[4] * b[4] + a[5] * b[7], a[3] * b[2] + a[4] * b[5] + a[5] * b[8],\r\n            a[6] * b[0] + a[7] * b[3] + a[8] * b[6], a[6] * b[1] + a[7] * b[4] + a[8] * b[7], a[6] * b[2] + a[7] * b[5] + a[8] * b[8],\r\n        );\r\n        return this;\r\n    }\r\n    inv(): Mat3 {\r\n        let me = this.elem;\r\n        let n11 = me[0], n21 = me[1], n31 = me[2],\r\n            n12 = me[3], n22 = me[4], n32 = me[5],\r\n            n13 = me[6], n23 = me[7], n33 = me[8],\r\n            t11 = n33 * n22 - n32 * n23,\r\n            t12 = n32 * n13 - n33 * n12,\r\n            t13 = n23 * n12 - n22 * n13,\r\n            det = n11 * t11 + n21 * t12 + n31 * t13;\r\n        if (det === 0) {\r\n            console.warn(\"Matrix determinant is 0\");\r\n            return new Mat3(0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n        let detInv = 1 / det;\r\n        return new Mat3(\r\n            t11 * detInv,\r\n            (n31 * n23 - n33 * n21) * detInv,\r\n            (n32 * n21 - n31 * n22) * detInv,\r\n            t12 * detInv,\r\n            (n33 * n11 - n31 * n13) * detInv,\r\n            (n31 * n12 - n32 * n11) * detInv,\r\n            t13 * detInv,\r\n            (n21 * n13 - n23 * n11) * detInv,\r\n            (n22 * n11 - n21 * n12) * detInv\r\n        );\r\n    }\r\n    invs(): Mat3 {\r\n        let me = this.elem;\r\n        let n11 = me[0], n21 = me[1], n31 = me[2],\r\n            n12 = me[3], n22 = me[4], n32 = me[5],\r\n            n13 = me[6], n23 = me[7], n33 = me[8],\r\n            t11 = n33 * n22 - n32 * n23,\r\n            t12 = n32 * n13 - n33 * n12,\r\n            t13 = n23 * n12 - n22 * n13,\r\n            det = n11 * t11 + n21 * t12 + n31 * t13;\r\n        if (det === 0) {\r\n            var msg = \"Matrix determinant is 0\";\r\n            console.warn(msg);\r\n            me.fill(0);\r\n            return this;\r\n        }\r\n        let detInv = 1 / det;\r\n        me[0] = t11 * detInv;\r\n        me[1] = (n31 * n23 - n33 * n21) * detInv;\r\n        me[2] = (n32 * n21 - n31 * n22) * detInv;\r\n        me[3] = t12 * detInv;\r\n        me[4] = (n33 * n11 - n31 * n13) * detInv;\r\n        me[5] = (n31 * n12 - n32 * n11) * detInv;\r\n        me[6] = t13 * detInv;\r\n        me[7] = (n21 * n13 - n23 * n11) * detInv;\r\n        me[8] = (n22 * n11 - n21 * n12) * detInv;\r\n        return this;\r\n    }\r\n\r\n    setFromRotaion(q: Quaternion): Mat3 {\r\n        let xt2 = q.y + q.y, yt2 = q.z + q.z, zt2 = q.w + q.w;\r\n        let x2 = q.y * xt2;\r\n        let y2 = q.z * yt2;\r\n        let z2 = q.w * zt2;\r\n\r\n        let xy = q.y * yt2;\r\n        let yz = q.w * yt2;\r\n        let xz = q.w * xt2;\r\n\r\n        let wx = q.x * xt2;\r\n        let wy = q.x * yt2;\r\n        let wz = q.x * zt2;\r\n        return this.set(\r\n            1 - (y2 + z2), xy - wz, xz + wy,\r\n            xy + wz, 1 - x2 - z2, yz - wx,\r\n            xz - wy, yz + wx, 1 - x2 - y2\r\n        );\r\n    }\r\n    pushPool(pool: Mat3Pool = mat3Pool) {\r\n        pool.push(this);\r\n    }\r\n}\r\nexport let _mat3 = new Mat3();","import { Pool } from \"../pool\";\r\nimport { Mat3 } from \"./mat3\";\r\nimport { Quaternion } from \"./quaternion\";\r\nimport { Rotor } from \"./rotor\";\r\nimport { Vec3 } from \"./vec3\";\r\nimport { Vec4 } from \"./vec4\";\r\n\r\n\r\nexport class Mat4Pool extends Pool<Mat4>{\r\n    constructObject() { return new Mat4; }\r\n}\r\nexport const mat4Pool = new Mat4Pool;\r\nexport class Mat4 {\r\n    elem: number[];\r\n    static readonly id = new Mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n    static readonly zero = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    static diag(a: number, b: number, c: number, d: number): Mat4 {\r\n        return new Mat4(\r\n            a, 0, 0, 0,\r\n            0, b, 0, 0,\r\n            0, 0, c, 0,\r\n            0, 0, 0, d\r\n        );\r\n    }\r\n    static augVec4(a: Vec4, b: Vec4, c: Vec4, d: Vec4): Mat4 {\r\n        return new Mat4(\r\n            a.x, b.x, c.x, d.x,\r\n            a.y, b.y, c.y, d.y,\r\n            a.z, b.z, c.z, d.z,\r\n            a.w, b.w, c.w, d.w\r\n        )\r\n    }\r\n    static augMat3(a: Mat3, b: Vec3, c: Vec3, d: number): Mat4 {\r\n        c = c ?? new Vec3();\r\n        b = b ?? new Vec3();\r\n        return new Mat4(\r\n            a.elem[0], a.elem[1], a.elem[2], b.x,\r\n            a.elem[3], a.elem[4], a.elem[5], b.y,\r\n            a.elem[6], a.elem[7], a.elem[8], b.z,\r\n            c.x, c.y, c.z, d\r\n        )\r\n    }\r\n\r\n    augVec4set(a: Vec4, b: Vec4, c: Vec4, d: Vec4): Mat4 {\r\n        return this.set(\r\n            a.x, b.x, c.x, d.x,\r\n            a.y, b.y, c.y, d.y,\r\n            a.z, b.z, c.z, d.z,\r\n            a.w, b.w, c.w, d.w\r\n        )\r\n    }\r\n    augMat3set(a: Mat3, b: Vec3, c: Vec3, d: number): Mat4 {\r\n        return this.set(\r\n            a.elem[0], a.elem[1], a.elem[2], b?.x ?? 0,\r\n            a.elem[3], a.elem[4], a.elem[5], b?.y ?? 0,\r\n            a.elem[6], a.elem[7], a.elem[8], b?.z ?? 0,\r\n            c?.x ?? 0, c?.y ?? 0, c?.z ?? 0, d\r\n        )\r\n    }\r\n    constructor(\r\n        a: number = 1, b: number = 0, c: number = 0, d: number = 0,\r\n        e: number = 0, f: number = 1, g: number = 0, h: number = 0,\r\n        i: number = 0, j: number = 0, k: number = 1, l: number = 0,\r\n        m: number = 0, n: number = 0, o: number = 0, p: number = 1\r\n    ) { this.elem = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]; }\r\n    clone(): Mat4 {\r\n        let e = this.elem;\r\n        return new Mat4(...e);\r\n    }\r\n    writeBuffer(b: Float32Array, offset: number = 0) {\r\n        b[offset++] = this.elem[0];\r\n        b[offset++] = this.elem[4];\r\n        b[offset++] = this.elem[8];\r\n        b[offset++] = this.elem[12];\r\n        b[offset++] = this.elem[1];\r\n        b[offset++] = this.elem[5];\r\n        b[offset++] = this.elem[9];\r\n        b[offset++] = this.elem[13];\r\n        b[offset++] = this.elem[2];\r\n        b[offset++] = this.elem[6];\r\n        b[offset++] = this.elem[10];\r\n        b[offset++] = this.elem[14];\r\n        b[offset++] = this.elem[3];\r\n        b[offset++] = this.elem[7];\r\n        b[offset++] = this.elem[11];\r\n        b[offset++] = this.elem[15];\r\n    }\r\n    setid() {\r\n        this.elem[0] = 1, this.elem[1] = 0, this.elem[2] = 0, this.elem[3] = 0;\r\n        this.elem[4] = 0, this.elem[5] = 1, this.elem[6] = 0, this.elem[7] = 0;\r\n        this.elem[8] = 0, this.elem[9] = 0, this.elem[10] = 1, this.elem[11] = 0;\r\n        this.elem[12] = 0, this.elem[13] = 0, this.elem[14] = 0, this.elem[15] = 1; return this;\r\n    }\r\n    set(\r\n        a: number = 0, b: number = 0, c: number = 0, d: number = 0,\r\n        e: number = 0, f: number = 0, g: number = 0, h: number = 0,\r\n        i: number = 0, j: number = 0, k: number = 0, l: number = 0,\r\n        m: number = 0, n: number = 0, o: number = 0, p: number = 0\r\n    ) {\r\n        this.elem[0] = a, this.elem[1] = b, this.elem[2] = c, this.elem[3] = d;\r\n        this.elem[4] = e, this.elem[5] = f, this.elem[6] = g, this.elem[7] = h;\r\n        this.elem[8] = i, this.elem[9] = j, this.elem[10] = k, this.elem[11] = l;\r\n        this.elem[12] = m, this.elem[13] = n, this.elem[14] = o, this.elem[15] = p; return this;\r\n    }\r\n    ts(): Mat4 {\r\n        let me = this.elem;\r\n        let tmp = me[1]; me[1] = me[4]; me[4] = tmp;\r\n        tmp = me[2]; me[2] = me[8]; me[8] = tmp;\r\n        tmp = me[6]; me[6] = me[9]; me[9] = tmp;\r\n        tmp = me[3]; me[3] = me[12]; me[12] = tmp;\r\n        tmp = me[7]; me[7] = me[13]; me[13] = tmp;\r\n        tmp = me[11]; me[11] = me[14]; me[14] = tmp;\r\n        return this;\r\n    }\r\n    t(): Mat4 {\r\n        return new Mat4(\r\n            this.elem[0], this.elem[4], this.elem[8], this.elem[12],\r\n            this.elem[1], this.elem[5], this.elem[9], this.elem[13],\r\n            this.elem[2], this.elem[6], this.elem[10], this.elem[14],\r\n            this.elem[3], this.elem[7], this.elem[11], this.elem[15]\r\n        );\r\n    }\r\n    /** col vector */x_(): Vec4 { return new Vec4(this.elem[0], this.elem[4], this.elem[8], this.elem[12]); }\r\n    /** col vector */y_(): Vec4 { return new Vec4(this.elem[1], this.elem[5], this.elem[9], this.elem[13]); }\r\n    /** col vector */z_(): Vec4 { return new Vec4(this.elem[2], this.elem[6], this.elem[10], this.elem[14]); }\r\n    /** col vector */w_(): Vec4 { return new Vec4(this.elem[3], this.elem[7], this.elem[11], this.elem[15]); }\r\n\r\n    /** row vector */_x(): Vec4 { return new Vec4(this.elem[0], this.elem[1], this.elem[2], this.elem[3]); }\r\n    /** row vector */_y(): Vec4 { return new Vec4(this.elem[4], this.elem[5], this.elem[6], this.elem[7]); }\r\n    /** row vector */_z(): Vec4 { return new Vec4(this.elem[8], this.elem[9], this.elem[10], this.elem[11]); }\r\n    /** row vector */_w(): Vec4 { return new Vec4(this.elem[12], this.elem[13], this.elem[14], this.elem[15]); }\r\n    copy(m2: Mat4): Mat4 {\r\n        for (var i = 0; i < 16; i++) {\r\n            this.elem[i] = m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    add(m2: Mat4): Mat4 {\r\n        let m = new Mat4();\r\n        for (var i = 0; i < 16; i++) {\r\n            m.elem[i] = this.elem[i] + m2.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    adds(m2: Mat4): Mat4 {\r\n        for (var i = 0; i < 16; i++) {\r\n            this.elem[i] += m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    neg(): Mat4 {\r\n        let m = new Mat4();\r\n        for (var i = 0; i < 16; i++) {\r\n            m.elem[i] = -this.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    negs(): Mat4 {\r\n        for (var i = 0; i < 16; i++) {\r\n            this.elem[i] = -this.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    sub(m2: Mat4): Mat4 {\r\n        let m = new Mat4();\r\n        for (var i = 0; i < 16; i++) {\r\n            m.elem[i] = this.elem[i] - m2.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    subs(m2: Mat4): Mat4 {\r\n        for (var i = 0; i < 16; i++) {\r\n            this.elem[i] -= m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    mulf(k: number): Mat4 {\r\n        let m = new Mat4();\r\n        for (var i = 0; i < 16; i++) {\r\n            m.elem[i] = this.elem[i] * k;\r\n        }\r\n        return m;\r\n    }\r\n    mulfs(k: number): Mat4 {\r\n        for (var i = 0; i < 16; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    mulv(v: Vec4): Vec4 {\r\n        let a = this.elem;\r\n        return new Vec4(\r\n            v.x * a[0] + v.y * a[1] + v.z * a[2] + v.w * a[3],\r\n            v.x * a[4] + v.y * a[5] + v.z * a[6] + v.w * a[7],\r\n            v.x * a[8] + v.y * a[9] + v.z * a[10] + v.w * a[11],\r\n            v.x * a[12] + v.y * a[13] + v.z * a[14] + v.w * a[15]\r\n        );\r\n    }\r\n    mul(m: Mat4): Mat4 {\r\n        let a = this.elem; let b = m.elem;\r\n        return new Mat4(\r\n            a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12], a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13], a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14], a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\r\n            a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12], a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13], a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14], a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\r\n            a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12], a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13], a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14], a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\r\n            a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12], a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13], a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14], a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15],\r\n        );\r\n    }\r\n    /** this = this * m; */\r\n    mulsr(m: Mat4): Mat4 {\r\n        let a = this.elem; let b = m.elem;\r\n        this.set(\r\n            a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12], a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13], a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14], a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\r\n            a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12], a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13], a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14], a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\r\n            a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12], a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13], a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14], a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\r\n            a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12], a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13], a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14], a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15],\r\n        );\r\n        return this;\r\n    }\r\n    /** this = m * this; */\r\n    mulsl(m: Mat4): Mat4 {\r\n        let b = this.elem; let a = m.elem;\r\n        this.set(\r\n            a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12], a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13], a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14], a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\r\n            a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12], a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13], a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14], a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\r\n            a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12], a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13], a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14], a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\r\n            a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12], a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13], a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14], a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15],\r\n        );\r\n        return this;\r\n    }\r\n    /** this = m1 * m2; */\r\n    mulset(m1: Mat4, m2: Mat4): Mat4 {\r\n        let a = m1.elem; let b = m2.elem;\r\n        this.set(\r\n            a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12], a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13], a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14], a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\r\n            a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12], a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13], a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14], a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\r\n            a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12], a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13], a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14], a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\r\n            a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12], a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13], a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14], a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15],\r\n        );\r\n        return this;\r\n    }\r\n    setFrom3DRotation(q: Quaternion): Mat4 {\r\n        let xt2 = q.y + q.y, yt2 = q.z + q.z, zt2 = q.w + q.w;\r\n        let x2 = q.y * xt2;\r\n        let y2 = q.z * yt2;\r\n        let z2 = q.w * zt2;\r\n\r\n        let xy = q.y * yt2;\r\n        let yz = q.w * yt2;\r\n        let xz = q.w * xt2;\r\n\r\n        let wx = q.x * xt2;\r\n        let wy = q.x * yt2;\r\n        let wz = q.x * zt2;\r\n        return this.set(\r\n            1 - (y2 + z2), xy - wz, xz + wy, 0,\r\n            xy + wz, 1 - x2 - z2, yz - wx, 0,\r\n            xz - wy, yz + wx, 1 - x2 - y2, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    setFromQuaternionL(q: Quaternion): Mat4 {\r\n        return this.set(\r\n            q.x, -q.y, -q.z, -q.w,\r\n            q.y, q.x, -q.w, q.z,\r\n            q.z, q.w, q.x, -q.y,\r\n            q.w, -q.z, q.y, q.x\r\n        );\r\n    }\r\n    setFromQuaternionR(q: Quaternion): Mat4 {\r\n        return this.set(\r\n            q.x, -q.y, -q.z, -q.w,\r\n            q.y, q.x, q.w, -q.z,\r\n            q.z, -q.w, q.x, q.y,\r\n            q.w, q.z, -q.y, q.x\r\n        );\r\n    }\r\n    setFromRotor(r: Rotor): Mat4 {\r\n        return this.setFromQuaternionL(r.l).mulsr(_mat4.setFromQuaternionR(r.r));\r\n    }\r\n    setFromRotorconj(r: Rotor): Mat4 {\r\n        return this.setFromQuaternionL(r.l.conj()).mulsr(_mat4.setFromQuaternionR(r.r.conj()));\r\n    }\r\n    det(): number {\r\n        let me = this.elem;\r\n        let n11 = me[0], n21 = me[1], n31 = me[2], n41 = me[3],\r\n            n12 = me[4], n22 = me[5], n32 = me[6], n42 = me[7],\r\n            n13 = me[8], n23 = me[9], n33 = me[10], n43 = me[11],\r\n            n14 = me[12], n24 = me[13], n34 = me[14], n44 = me[15],\r\n            t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n            t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n            t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n            t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n        return n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n    }\r\n    inv(): Mat4 {\r\n        let me = this.elem;\r\n        let n11 = me[0], n21 = me[1], n31 = me[2], n41 = me[3],\r\n            n12 = me[4], n22 = me[5], n32 = me[6], n42 = me[7],\r\n            n13 = me[8], n23 = me[9], n33 = me[10], n43 = me[11],\r\n            n14 = me[12], n24 = me[13], n34 = me[14], n44 = me[15],\r\n            t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n            t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n            t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n            t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n        let det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n        if (det === 0) {\r\n            console.warn(\"Matrix determinant is 0\");\r\n            return new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n        let detInv = 1 / det;\r\n        return new Mat4(\r\n            t11 * detInv,\r\n            (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv,\r\n            (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv,\r\n            (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv,\r\n            t12 * detInv,\r\n            (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv,\r\n            (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv,\r\n            (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv,\r\n            t13 * detInv,\r\n            (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv,\r\n            (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv,\r\n            (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv,\r\n            t14 * detInv,\r\n            (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv,\r\n            (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv,\r\n            (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv,\r\n        );\r\n    }\r\n    invs(): Mat4 {\r\n        let me = this.elem;\r\n        let n11 = me[0], n21 = me[1], n31 = me[2], n41 = me[3],\r\n            n12 = me[4], n22 = me[5], n32 = me[6], n42 = me[7],\r\n            n13 = me[8], n23 = me[9], n33 = me[10], n43 = me[11],\r\n            n14 = me[12], n24 = me[13], n34 = me[14], n44 = me[15],\r\n            t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n            t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n            t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n            t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n        let det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n        if (det === 0) {\r\n            var msg = \"Matrix determinant is 0\";\r\n            console.warn(msg);\r\n            me.fill(0);\r\n            return this;\r\n        }\r\n        let detInv = 1 / det;\r\n        me[0] = t11 * detInv;\r\n        me[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\r\n        me[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\r\n        me[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\r\n        me[4] = t12 * detInv;\r\n        me[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\r\n        me[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\r\n        me[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\r\n        me[8] = t13 * detInv;\r\n        me[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\r\n        me[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\r\n        me[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\r\n        me[12] = t14 * detInv;\r\n        me[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\r\n        me[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\r\n        me[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\r\n        return this;\r\n    }\r\n    pushPool(pool: Mat4Pool = mat4Pool) {\r\n        pool.push(this);\r\n    }\r\n}\r\nexport let _mat4 = new Mat4();","import { _180, _360 } from \"../const\";\r\nimport { Pool } from \"../pool\";\r\nimport { Srand } from \"../random\";\r\nimport { Mat3 } from \"./mat3\";\r\nimport { Mat4 } from \"./mat4\";\r\nimport { Vec3, _vec3, _vec3_1 } from \"./vec3\";\r\nimport { Vec4 } from \"./vec4\";\r\n\r\nexport class QuaternionPool extends Pool<Quaternion>{\r\n    constructObject() { return new Quaternion; }\r\n}\r\nexport const quaternionPool = new QuaternionPool;\r\nexport class Quaternion {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    w: number;\r\n    constructor(x: number = 1, y: number = 0, z: number = 0, w: number = 0) {\r\n        this.x = x; this.y = y; this.z = z; this.w = w;\r\n    }\r\n    set(x: number = 1, y: number = 0, z: number = 0, w: number = 0): Quaternion {\r\n        this.x = x; this.y = y; this.z = z; this.w = w; return this;\r\n    }\r\n    flat(): number[] {\r\n        return [this.x, this.y, this.z, this.w];\r\n    }\r\n    copy(v: Vec4 | Quaternion): Quaternion {\r\n        this.x = v.x; this.y = v.y;\r\n        this.z = v.z; this.w = v.w;\r\n        return this;\r\n    }\r\n    yzw(): Vec3 { return new Vec3(this.y, this.z, this.w); }\r\n    ywz(): Vec3 { return new Vec3(this.y, this.w, this.z); }\r\n    zyw(): Vec3 { return new Vec3(this.z, this.y, this.w); }\r\n    zwy(): Vec3 { return new Vec3(this.z, this.w, this.y); }\r\n    wzy(): Vec3 { return new Vec3(this.w, this.z, this.y); }\r\n    wyz(): Vec3 { return new Vec3(this.w, this.y, this.z); }\r\n    wxyz(): Vec4 { return new Vec4(this.w, this.x, this.y, this.z); }\r\n    wxzy(): Vec4 { return new Vec4(this.w, this.x, this.z, this.y); }\r\n    wyxz(): Vec4 { return new Vec4(this.w, this.y, this.x, this.z); }\r\n    wzxy(): Vec4 { return new Vec4(this.w, this.z, this.x, this.y); }\r\n    yxzw(): Vec4 { return new Vec4(this.y, this.x, this.z, this.w); }\r\n    xzwy(): Vec4 { return new Vec4(this.x, this.z, this.w, this.y); }\r\n    xyzw(): Vec4 { return new Vec4(this.x, this.y, this.z, this.w); }\r\n\r\n    clone(): Quaternion {\r\n        return new Quaternion(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    neg(): Quaternion {\r\n        return new Quaternion(-this.x, -this.y, -this.z, -this.w);\r\n    }\r\n    negs(): Quaternion {\r\n        this.x = - this.x; this.y = -this.y; this.z = -this.z; this.w = -this.w;\r\n        return this;\r\n    }\r\n    mul(q: Quaternion | Vec4): Quaternion {\r\n        return new Quaternion(\r\n            this.x * q.x - this.y * q.y - this.z * q.z - this.w * q.w,\r\n            this.x * q.y + this.y * q.x + this.z * q.w - this.w * q.z,\r\n            this.x * q.z - this.y * q.w + this.z * q.x + this.w * q.y,\r\n            this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x\r\n        );\r\n    }\r\n    /** this = this * q; */\r\n    mulsr(q: Quaternion | Vec4): Quaternion {\r\n        var x = this.x * q.x - this.y * q.y - this.z * q.z - this.w * q.w;\r\n        var y = this.x * q.y + this.y * q.x + this.z * q.w - this.w * q.z;\r\n        var z = this.x * q.z - this.y * q.w + this.z * q.x + this.w * q.y;\r\n        this.w = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    /** this = q * this; */\r\n    mulsl(q: Quaternion | Vec4): Quaternion {\r\n        var x = q.x * this.x - q.y * this.y - q.z * this.z - q.w * this.w;\r\n        var y = q.x * this.y + q.y * this.x + q.z * this.w - q.w * this.z;\r\n        var z = q.x * this.z - q.y * this.w + q.z * this.x + q.w * this.y;\r\n        this.w = q.x * this.w + q.y * this.z - q.z * this.y + q.w * this.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    /** this = this * conj(q); */\r\n    mulsrconj(q: Quaternion | Vec4): Quaternion {\r\n        var x = this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;\r\n        var y = -this.x * q.y + this.y * q.x - this.z * q.w + this.w * q.z;\r\n        var z = -this.x * q.z + this.y * q.w + this.z * q.x - this.w * q.y;\r\n        this.w = -this.x * q.w - this.y * q.z + this.z * q.y + this.w * q.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    /** this = conj(q) * this; */\r\n    mulslconj(q: Quaternion | Vec4): Quaternion {\r\n        var x = q.x * this.x + q.y * this.y + q.z * this.z + q.w * this.w;\r\n        var y = q.x * this.y - q.y * this.x - q.z * this.w + q.w * this.z;\r\n        var z = q.x * this.z + q.y * this.w - q.z * this.x - q.w * this.y;\r\n        this.w = q.x * this.w - q.y * this.z + q.z * this.y - q.w * this.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    conj(): Quaternion {\r\n        return new Quaternion(this.x, -this.y, -this.z, -this.w);\r\n    }\r\n    conjs(): Quaternion {\r\n        this.y = -this.y; this.z = -this.z; this.w = -this.w; return this;\r\n    }\r\n    norm(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n    norms(): Quaternion {\r\n        let n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n        n = n == 0 ? 0 : (1 / n);\r\n        this.x *= n; this.y *= n; this.z *= n; this.w *= n; return this;\r\n    }\r\n    /** axis must be a unit vector, if not, use Vec3.exp() instead */\r\n    static fromAxis(axis: Vec3, angle: number): Quaternion {\r\n        angle *= 0.5;\r\n        let s = Math.sin(angle);\r\n        return new Quaternion(Math.cos(angle), axis.x * s, axis.y * s, axis.z * s);\r\n    }\r\n    sqrt(): Quaternion {\r\n        // we choose pos value because it's closer to 1\r\n        let a = Math.sqrt(0.5 * (this.x + 1));\r\n        let div2a = 1 / (2 * a);\r\n        return new Quaternion(a, this.y * div2a, this.z * div2a, this.w * div2a);\r\n    }\r\n    sqrts(): Quaternion {\r\n        // we choose pos value because it's closer to 1\r\n        let a = Math.sqrt(0.5 * (this.x + 1));\r\n        let div2a = 1 / (2 * a);\r\n        return this.set(a, this.y * div2a, this.z * div2a, this.w * div2a);\r\n    }\r\n    /** get generator of this, Quaternion must be normalized */\r\n    log(): Vec3 {\r\n        let s = Math.acos(this.x);\r\n        return this.yzw().mulfs(2 * s / Math.sin(s));\r\n    }\r\n    static slerp(a: Quaternion, b: Quaternion, t: number): Quaternion {\r\n        let cosf = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\r\n        let A: number, B: number;\r\n        if (Math.abs(cosf) > 0.99999) {\r\n            A = 1 - t; B = t;\r\n        } else {\r\n            let f = Math.acos(cosf);\r\n            let _1s = 1 / Math.sin(f);\r\n            A = Math.sin((1 - t) * f) * _1s;\r\n            B = Math.sin(t * f) * _1s;\r\n        }\r\n        return new Quaternion(\r\n            a.x * A + b.x * B, a.y * A + b.y * B, a.z * A + b.z * B, a.w * A + b.w * B\r\n        );\r\n    }\r\n    toRotateMat(): Mat4 {\r\n        let xt2 = this.y + this.y, yt2 = this.z + this.z, zt2 = this.w + this.w;\r\n        let x2 = this.y * xt2;\r\n        let y2 = this.z * yt2;\r\n        let z2 = this.w * zt2;\r\n\r\n        let xy = this.y * yt2;\r\n        let yz = this.w * yt2;\r\n        let xz = this.w * xt2;\r\n\r\n        let wx = this.x * xt2;\r\n        let wy = this.x * yt2;\r\n        let wz = this.x * zt2;\r\n        return new Mat4(\r\n            1 - (y2 + z2), xy - wz, xz + wy, 0,\r\n            xy + wz, 1 - x2 - z2, yz - wx, 0,\r\n            xz - wy, yz + wx, 1 - x2 - y2, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n\r\n    toMat3(): Mat3 {\r\n        let xt2 = this.y + this.y, yt2 = this.z + this.z, zt2 = this.w + this.w;\r\n        let x2 = this.y * xt2;\r\n        let y2 = this.z * yt2;\r\n        let z2 = this.w * zt2;\r\n\r\n        let xy = this.y * yt2;\r\n        let yz = this.w * yt2;\r\n        let xz = this.w * xt2;\r\n\r\n        let wx = this.x * xt2;\r\n        let wy = this.x * yt2;\r\n        let wz = this.x * zt2;\r\n        return new Mat3(\r\n            1 - (y2 + z2), xy - wz, xz + wy,\r\n            xy + wz, 1 - x2 - z2, yz - wx,\r\n            xz - wy, yz + wx, 1 - x2 - y2\r\n        );\r\n    }\r\n    toLMat4(): Mat4 {\r\n        return new Mat4(\r\n            this.x, -this.y, -this.z, -this.w,\r\n            this.y, this.x, -this.w, this.z,\r\n            this.z, this.w, this.x, -this.y,\r\n            this.w, -this.z, this.y, this.x\r\n        );\r\n    }\r\n    toRMat4(): Mat4 {\r\n        return new Mat4(\r\n            this.x, -this.y, -this.z, -this.w,\r\n            this.y, this.x, this.w, -this.z,\r\n            this.z, -this.w, this.x, this.y,\r\n            this.w, this.z, -this.y, this.x\r\n        );\r\n    }\r\n    expset(v: Vec3) {\r\n        let g = v.norm() * 0.5;\r\n        let s = Math.abs(g) > 0.005 ? Math.sin(g) / g * 0.5 : 0.5 - g * g / 12;\r\n        return this.set(Math.cos(g), s * v.x, s * v.y, s * v.z);\r\n    }\r\n    static rand(): Quaternion {\r\n        let a = Math.random() * _360;\r\n        let b = Math.random() * _360;\r\n        let c = Math.random();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return new Quaternion(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    static srand(seed: Srand): Quaternion {\r\n        let a = seed.nextf() * _360;\r\n        let b = seed.nextf() * _360;\r\n        let c = seed.nextf();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return new Quaternion(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    randset(): Quaternion {\r\n        let a = Math.random() * _360;\r\n        let b = Math.random() * _360;\r\n        let c = Math.random();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return this.set(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    srandset(seed: Srand): Quaternion {\r\n        let a = seed.nextf() * _360;\r\n        let b = seed.nextf() * _360;\r\n        let c = seed.nextf();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return this.set(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    /** \"from\" and \"to\" must be normalized vectors*/\r\n    static lookAt(from: Vec3, to: Vec3): Quaternion {\r\n\r\n        let right = _vec3.wedgeset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _vec3_1.wedgeset(from, Vec3.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _vec3_1.wedgeset(from, Vec3.y);\r\n            }\r\n            return v.norms().mulfs(_180).exp();\r\n        }\r\n        return right.exp();\r\n    }\r\n    pushPool(pool: QuaternionPool = quaternionPool) {\r\n        pool.push(this);\r\n    }\r\n}\r\n\r\nexport let _Q = new Quaternion();\r\nexport let _Q_1 = new Quaternion();\r\nexport let _Q_2 = new Quaternion();","import { _180 } from \"../const\";\r\nimport { Pool } from \"../pool\";\r\nimport { Srand } from \"../random\";\r\nimport { Bivec, _bivec } from \"./bivec\";\r\nimport { Mat4, _mat4 } from \"./mat4\";\r\nimport { Quaternion } from \"./quaternion\";\r\nimport { Vec3, _vec3_1, _vec3_2, _vec3_3, _vec3_4, _vec3_5 } from \"./vec3\";\r\nimport { Vec4, _vec4 } from \"./vec4\";\r\n\r\nexport class RotorPool extends Pool<Rotor>{\r\n    constructObject() { return new Rotor; }\r\n}\r\nexport const rotorPool = new RotorPool;\r\nexport class Rotor {\r\n    l: Quaternion;\r\n    r: Quaternion;\r\n    constructor(l: Quaternion = new Quaternion(), r: Quaternion = new Quaternion()) {\r\n        this.l = l;\r\n        this.r = r;\r\n    }\r\n    clone(): Rotor {\r\n        return new Rotor(this.l.clone(), this.r.clone());\r\n    }\r\n    copy(r: Rotor): Rotor {\r\n        this.l.copy(r.l);\r\n        this.r.copy(r.r);\r\n        return this;\r\n    }\r\n    conj(): Rotor {\r\n        return new Rotor(this.l.conj(), this.r.conj());\r\n    }\r\n    conjs(): Rotor {\r\n        this.l.conjs(), this.r.conjs(); return this;\r\n    }\r\n    norms(): Rotor {\r\n        this.l.norms();\r\n        this.r.norms();\r\n        return this;\r\n    }\r\n    /** Apply this to R: this * R;\r\n     * \r\n     * [this.l * R.l, R.r * this.r]; */\r\n    mul(R: Rotor): Rotor {\r\n        return new Rotor(this.l.mul(R.l), R.r.mul(this.r));\r\n    }\r\n    /** Apply this to R: this = this * R;\r\n     * \r\n     * [this.l, this.r] = [this.l * R.l, R.r * this.r]; */\r\n    mulsr(R: Rotor): Rotor {\r\n        this.l.mulsr(R.l);\r\n        this.r.mulsl(R.r);\r\n        return this;\r\n    }\r\n    /** Apply R to this: this = R * this;\r\n     * \r\n     * [this.l, this.r] = [R.l * this.l, this.r * R.r]; */\r\n    mulsl(R: Rotor): Rotor {\r\n        this.l.mulsl(R.l);\r\n        this.r.mulsr(R.r);\r\n        return this;\r\n    }\r\n    /** Apply this to R: this = this * conj(R);\r\n     * \r\n     * [this.l, this.r] = [this.l * conj(R.l), conj(R.r) * this.r]; */\r\n    mulsrconj(R: Rotor): Rotor {\r\n        this.l.mulsrconj(R.l);\r\n        this.r.mulslconj(R.r);\r\n        return this;\r\n    }\r\n    /** Apply R to this: this = conj(R) * this;\r\n     * \r\n     * [this.l, this.r] = [conj(R.l) * this.l, this.r * conj(R.r)]; */\r\n    mulslconj(R: Rotor): Rotor {\r\n        this.l.mulslconj(R.l);\r\n        this.r.mulsrconj(R.r);\r\n        return this;\r\n    }\r\n    sqrt(): Rotor {\r\n        return new Rotor(this.l.sqrt(), this.r.sqrt());\r\n    }\r\n    isFinite(): boolean {\r\n        return (\r\n            isFinite(this.l.x) && isFinite(this.l.y) && isFinite(this.l.z) && isFinite(this.l.w) &&\r\n            isFinite(this.r.x) && isFinite(this.r.y) && isFinite(this.r.z) && isFinite(this.r.w)\r\n        );\r\n    }\r\n    expset(bivec: Bivec): Rotor {\r\n        let A = _vec3_1.set(bivec.xy + bivec.zw, bivec.xz - bivec.yw, bivec.xw + bivec.yz);\r\n        let B = _vec3_2.set(bivec.xy - bivec.zw, bivec.xz + bivec.yw, bivec.xw - bivec.yz);\r\n        let a = A.norm(); let b = B.norm();\r\n        let aa = a * 0.5; let bb = b * 0.5;\r\n        let sa = (a > 0.005 ? Math.sin(aa) / a : 0.5 - a * a / 12);\r\n        let sb = (b > 0.005 ? Math.sin(bb) / b : 0.5 - b * b / 12);\r\n        this.l.set(Math.cos(aa), sa * A.x, sa * A.y, sa * A.z);\r\n        this.r.set(Math.cos(bb), sb * B.x, sb * B.y, sb * B.z);\r\n        return this;\r\n    }\r\n    log(): Bivec {\r\n        let a: Vec3, b: Vec3;\r\n        if (Math.abs(this.l.x) > 0.9999) {\r\n            a = this.l.yzw();\r\n        } else {\r\n            let ls = Math.acos(this.l.x);\r\n            a = this.l.yzw().mulfs(ls / Math.sin(ls));\r\n        }\r\n        if (Math.abs(this.r.x) > 0.9999) {\r\n            b = this.r.yzw();\r\n        } else {\r\n            let rs = Math.acos(this.r.x);\r\n            b = this.r.yzw().mulfs(rs / Math.sin(rs));\r\n        }\r\n        return new Bivec(\r\n            a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x\r\n        );\r\n    }\r\n    static slerp(a: Rotor, b: Rotor, t: number): Rotor {\r\n        return new Rotor(\r\n            Quaternion.slerp(a.l, b.l, t),\r\n            Quaternion.slerp(a.r, b.r, t)\r\n        );\r\n    }\r\n    toMat4(): Mat4 {\r\n        return this.l.toLMat4().mulsr(_mat4.setFromQuaternionR(this.r));\r\n    }\r\n    \r\n    /** set rotor from a rotation matrix,\r\n     * i.e. m must be orthogonal with determinant 1.\r\n     * algorithm: iteratively aligne each axis. */\r\n     setFromMat4(m: Mat4) {\r\n        return this.setFromLookAt(Vec4.x, m.x_()).mulsl(\r\n            _r.setFromLookAt(_vec4.copy(Vec4.y).rotates(this), m.y_())\r\n        ).mulsl(\r\n            _r.setFromLookAt(_vec4.copy(Vec4.z).rotates(this), m.z_())\r\n        );\r\n    }\r\n    /** Rotor: rotate from plane1 to plane2\r\n     *  Bivectors must be simple and normalised */\r\n     static lookAtbb(from: Bivec, to: Bivec): Rotor {\r\n        let A1 = _vec3_2.set(from.xy + from.zw, from.xz - from.yw, from.xw + from.yz);\r\n        let B1 = _vec3_3.set(from.xy - from.zw, from.xz + from.yw, from.xw - from.yz);\r\n        let A2 = _vec3_4.set(to.xy + to.zw, to.xz - to.yw, to.xw + to.yz);\r\n        let B2 = _vec3_5.set(to.xy - to.zw, to.xz + to.yw, to.xw - to.yz);\r\n        return new Rotor(Quaternion.lookAt(A1, A2), Quaternion.lookAt(B2, B1));\r\n    }\r\n    /** plane must be a unit simple vector, if not, use Bivec.exp() instead \r\n     * angle1 is rotation angle on the plane\r\n     * angle2 is rotatoin angle on the perpendicular plane (right handed, eg: exy + ezw)\r\n    */\r\n    static fromPlane(plane: Bivec, angle1: number, angle2: number = 0): Rotor {\r\n        let a = (angle1 + angle2) * 0.5, sa = Math.sin(a);\r\n        let b = (angle1 - angle2) * 0.5, sb = Math.sin(b);\r\n        return new Rotor(// norm of half of A is 1\r\n            new Quaternion(Math.cos(a), sa * (plane.xy + plane.zw), sa * (plane.xz - plane.yw), sa * (plane.xw + plane.yz)),\r\n            new Quaternion(Math.cos(b), sb * (plane.xy - plane.zw), sb * (plane.xz + plane.yw), sb * (plane.xw - plane.yz))\r\n        );\r\n    }\r\n\r\n    /** \"from\" and \"to\" must be normalized vectors*/\r\n    static lookAt(from: Vec4, to: Vec4): Rotor {\r\n\r\n        let right = _bivec.wedgevvset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _bivec.wedgevvset(from, Vec4.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _bivec.wedgevvset(from, Vec4.y);\r\n            }\r\n            return v.norms().mulfs(_180).exp();\r\n        }\r\n        return right.exp();\r\n    }\r\n\r\n    // todo: lookAtvb(from: Vec4, to: Bivec): Rotor dir to plane or reverse\r\n    static lookAtvb(from: Vec4, to: Bivec): Rotor {\r\n        let toVect = _vec4.copy(from).projbs(to).norms();\r\n        return Rotor.lookAt(from, toVect);\r\n    }\r\n\r\n    /** \"from\" and \"to\" must be normalized vectors */\r\n    setFromLookAt(from: Vec4, to: Vec4): Rotor {\r\n        let right = _bivec.wedgevvset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _bivec.wedgevvset(from, Vec4.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _bivec.wedgevvset(from, Vec4.y);\r\n            }\r\n            return this.expset(v.norms().mulfs(_180));\r\n        }\r\n        return this.expset(right);\r\n    }\r\n    static rand(): Rotor {\r\n        return new Rotor(Quaternion.rand(), Quaternion.rand());\r\n    }\r\n    static srand(seed: Srand): Rotor {\r\n        return new Rotor(Quaternion.srand(seed), Quaternion.srand(seed));\r\n    }\r\n    randset(): Rotor {\r\n        this.l.randset();\r\n        this.r.randset();\r\n        return this;\r\n    }\r\n    \r\n    srandset(seed: Srand): Rotor {\r\n        this.l.srandset(seed);\r\n        this.r.srandset(seed);\r\n        return this;\r\n    }\r\n    pushPool(pool: RotorPool = rotorPool) {\r\n        pool.push(this);\r\n    }\r\n\r\n\r\n    fromMat4(m: Mat4) {\r\n        return Rotor.lookAt(Vec4.x, m.x_()).mulsl(\r\n            _r.setFromLookAt(_vec4.copy(Vec4.y).rotates(this), m.y_())\r\n        ).mulsl(\r\n            _r.setFromLookAt(_vec4.copy(Vec4.z).rotates(this), m.z_())\r\n        );\r\n    }\r\n}\r\n\r\nexport let _r = new Rotor();","import { Pool } from \"../pool\";\r\nimport { Srand } from \"../random\";\r\nimport { Quaternion, _Q_1, _Q_2 } from \"./quaternion\";\r\nimport { Rotor } from \"./rotor\";\r\nimport { Vec3, _vec3_1, _vec3_2 } from \"./vec3\";\r\nimport { Vec4 } from \"./vec4\";\r\n\r\nexport class BivecPool extends Pool<Bivec>{\r\n    constructObject() { return new Bivec; }\r\n}\r\nexport const bivecPool = new BivecPool;\r\nexport class Bivec {\r\n    xy: number; xz: number; xw: number;\r\n    yz: number; yw: number; zw: number;\r\n    static readonly xy = new Bivec(1, 0, 0, 0, 0, 0);\r\n    static readonly xz = new Bivec(0, 1, 0, 0, 0, 0);\r\n    static readonly xw = new Bivec(0, 0, 1, 0, 0, 0);\r\n    static readonly yz = new Bivec(0, 0, 0, 1, 0, 0);\r\n    static readonly yw = new Bivec(0, 0, 0, 0, 1, 0);\r\n    static readonly zw = new Bivec(0, 0, 0, 0, 0, 1);\r\n    static readonly yx = new Bivec(-1, 0, 0, 0, 0, 0);\r\n    static readonly zx = new Bivec(0, -1, 0, 0, 0, 0);\r\n    static readonly wx = new Bivec(0, 0, -1, 0, 0, 0);\r\n    static readonly zy = new Bivec(0, 0, 0, -1, 0, 0);\r\n    static readonly wy = new Bivec(0, 0, 0, 0, -1, 0);\r\n    static readonly wz = new Bivec(0, 0, 0, 0, 0, -1);\r\n    constructor(\r\n        xy: number = 0, xz: number = 0, xw: number = 0,\r\n        yz: number = 0, yw: number = 0, zw: number = 0\r\n    ) {\r\n        this.xy = xy; this.xz = xz; this.xw = xw;\r\n        this.yz = yz; this.yw = yw; this.zw = zw;\r\n    }\r\n    copy(v: Bivec): Bivec {\r\n        this.xy = v.xy; this.xz = v.xz; this.xw = v.xw;\r\n        this.yz = v.yz; this.yw = v.yw; this.zw = v.zw; return this;\r\n    }\r\n    set(xy: number = 0, xz: number = 0, xw: number = 0,\r\n        yz: number = 0, yw: number = 0, zw: number = 0): Bivec {\r\n        this.xy = xy; this.xz = xz; this.xw = xw;\r\n        this.yz = yz; this.yw = yw; this.zw = zw; return this;\r\n    }\r\n    clone(): Bivec {\r\n        return new Bivec(this.xy, this.xz, this.xw, this.yz, this.yw, this.zw);\r\n    }\r\n    flat(): number[] {\r\n        return [this.xy, this.xz, this.xw, this.yz, this.yw, this.zw];\r\n    }\r\n    add(bv: Bivec): Bivec {\r\n        return new Bivec(\r\n            this.xy + bv.xy, this.xz + bv.xz,\r\n            this.xw + bv.xw, this.yz + bv.yz,\r\n            this.yw + bv.yw, this.zw + bv.zw\r\n        );\r\n    }\r\n    adds(bv: Bivec): Bivec {\r\n        this.xy += bv.xy; this.xz += bv.xz;\r\n        this.xw += bv.xw; this.yz += bv.yz;\r\n        this.yw += bv.yw; this.zw += bv.zw;\r\n        return this;\r\n    }\r\n    addset(bv1: Bivec, bv2: Bivec): Bivec {\r\n        return this.set(\r\n            bv1.xy + bv2.xy, bv1.xz + bv2.xz,\r\n            bv1.xw + bv2.xw, bv1.yz + bv2.yz,\r\n            bv1.yw + bv2.yw, bv1.zw + bv2.zw\r\n        );\r\n    }\r\n    addmulfs(bv: Bivec, k: number): Bivec {\r\n        this.xy += bv.xy * k; this.xz += bv.xz * k;\r\n        this.xw += bv.xw * k; this.yz += bv.yz * k;\r\n        this.yw += bv.yw * k; this.zw += bv.zw * k;\r\n        return this;\r\n    }\r\n    neg(): Bivec {\r\n        return new Bivec(-this.xy, -this.xz, -this.xw, -this.yz, -this.yw, -this.zw);\r\n    }\r\n    negs(): Bivec {\r\n        this.xy = -this.xy; this.xz = -this.xz; this.xw = -this.xw;\r\n        this.yz = -this.yz; this.yw = -this.yw; this.zw = -this.zw;\r\n        return this;\r\n    }\r\n    sub(bv: Bivec): Bivec {\r\n        return new Bivec(\r\n            this.xy - bv.xy, this.xz - bv.xz,\r\n            this.xw - bv.xw, this.yz - bv.yz,\r\n            this.yw - bv.yw, this.zw - bv.zw\r\n        );\r\n    }\r\n    subs(bv: Bivec): Bivec {\r\n        this.xy -= bv.xy; this.xz -= bv.xz;\r\n        this.xw -= bv.xw; this.yz -= bv.yz;\r\n        this.yw -= bv.yw; this.zw -= bv.zw;\r\n        return this;\r\n    }\r\n    subset(bv1: Bivec, bv2: Bivec): Bivec {\r\n        return this.set(\r\n            bv1.xy - bv2.xy, bv1.xz - bv2.xz,\r\n            bv1.xw - bv2.xw, bv1.yz - bv2.yz,\r\n            bv1.yw - bv2.yw, bv1.zw - bv2.zw\r\n        );\r\n    }\r\n    mulf(k: number): Bivec {\r\n        return new Bivec(k * this.xy, k * this.xz, k * this.xw, k * this.yz, k * this.yw, k * this.zw);\r\n    }\r\n    mulfs(k: number): Bivec {\r\n        this.xy *= k; this.xz *= k; this.xw *= k;\r\n        this.yz *= k; this.yw *= k; this.zw *= k;\r\n        return this;\r\n    }\r\n    divf(k: number): Bivec {\r\n        k = 1 / k;\r\n        return new Bivec(k * this.xy, k * this.xz, k * this.xw, k * this.yz, k * this.yw, k * this.zw);\r\n    }\r\n    divfs(k: number): Bivec {\r\n        k = 1 / k;\r\n        this.xy *= k; this.xz *= k; this.xw *= k;\r\n        this.yz *= k; this.yw *= k; this.zw *= k;\r\n        return this;\r\n    }\r\n    dot(biv: Bivec): number {\r\n        return this.xy * biv.xy + this.yz * biv.yz + this.zw * biv.zw + this.xw * biv.xw + this.xz * biv.xz + this.yw * biv.yw;\r\n    }\r\n    norm(): number {\r\n        return Math.sqrt(this.xy * this.xy + this.xz * this.xz + this.yz * this.yz + this.yw * this.yw + this.zw * this.zw + this.xw * this.xw);\r\n    }\r\n    norms(): Bivec {\r\n        let k = Math.sqrt(this.xy * this.xy + this.xz * this.xz + this.yz * this.yz + this.yw * this.yw + this.zw * this.zw + this.xw * this.xw);\r\n        k = k == 0 ? 0 : (1 / k);\r\n        this.xy *= k; this.xz *= k; this.xw *= k;\r\n        this.yz *= k; this.yw *= k; this.zw *= k; return this;\r\n    }\r\n    normsqr(): number {\r\n        return this.xy * this.xy + this.xz * this.xz + this.yz * this.yz + this.yw * this.yw + this.zw * this.zw + this.xw * this.xw;;\r\n    }\r\n    norm1(): number {\r\n        return Math.abs(this.xy) + Math.abs(this.xz) + Math.abs(this.xw) + Math.abs(this.yz) + Math.abs(this.yw) + Math.abs(this.zw);\r\n    }\r\n    wedge(biv: Bivec): number {\r\n        return this.xy * biv.zw - this.xz * biv.yw + this.xw * biv.yz + this.yz * biv.xw - this.yw * biv.xz + this.zw * biv.xz;\r\n    }\r\n    dual(): Bivec {\r\n        return new Bivec(this.zw, -this.yw, this.yz, this.xw, -this.xz, this.xy);\r\n    }\r\n    duals(): Bivec {\r\n        var temp: number;\r\n        temp = this.xy; this.xy = this.zw; this.zw = temp;\r\n        temp = this.xz; this.xz = -this.yw; this.yw = -temp;\r\n        temp = this.xw; this.xw = this.yz; this.yz = temp;\r\n        return this;\r\n    }\r\n    wedgev(V: Vec4): Vec4 {\r\n        return new Vec4(\r\n            -this.yz * V.w - this.zw * V.y + this.yw * V.z,\r\n            this.xz * V.w + this.zw * V.x - this.xw * V.z,\r\n            -this.xy * V.w - this.yw * V.x + this.xw * V.y,\r\n            this.xy * V.z + this.yz * V.x - this.xz * V.y\r\n        );\r\n    }\r\n    wedgevvset(v1: Vec4, v2: Vec4) {\r\n        return this.set(\r\n            v1.x * v2.y - v1.y * v2.x,\r\n            v1.x * v2.z - v1.z * v2.x,\r\n            v1.x * v2.w - v1.w * v2.x,\r\n            v1.y * v2.z - v1.z * v2.y,\r\n            v1.y * v2.w - v1.w * v2.y,\r\n            v1.z * v2.w - v1.w * v2.z\r\n        );\r\n    }\r\n\r\n    /** Vector part of Geometry Product\r\n     * exy * ey = ex, exy * ex = -ey, exy * ez = 0\r\n     *  */\r\n    dotv(V: Vec4): Vec4 {\r\n        return new Vec4(\r\n            this.xy * V.y + this.xz * V.z + this.xw * V.w,\r\n            -this.xy * V.x + this.yz * V.z + this.yw * V.w,\r\n            -this.xz * V.x - this.yz * V.y + this.zw * V.w,\r\n            -this.xw * V.x - this.yw * V.y - this.zw * V.z\r\n        );\r\n    }\r\n    cross(V: Bivec): Bivec {\r\n        return new Bivec(\r\n            V.xz * this.yz - this.xz * V.yz + V.xw * this.yw - this.xw * V.yw,\r\n            -V.xy * this.yz + this.xy * V.yz + V.xw * this.zw - this.xw * V.zw,\r\n            -V.xy * this.yw + this.xy * V.yw - V.xz * this.zw + this.xz * V.zw,\r\n            V.xy * this.xz - this.xy * V.xz + V.yw * this.zw - this.yw * V.zw,\r\n            V.xy * this.xw - this.xy * V.xw - V.yz * this.zw + this.yz * V.zw,\r\n            V.xz * this.xw - this.xz * V.xw + V.yz * this.yw - this.yz * V.yw\r\n        );\r\n    }\r\n    crossset(b1: Bivec, b2: Bivec): Bivec {\r\n        return this.set(\r\n            b2.xz * b1.yz - b1.xz * b2.yz + b2.xw * b1.yw - b1.xw * b2.yw,\r\n            -b2.xy * b1.yz + b1.xy * b2.yz + b2.xw * b1.zw - b1.xw * b2.zw,\r\n            -b2.xy * b1.yw + b1.xy * b2.yw - b2.xz * b1.zw + b1.xz * b2.zw,\r\n            b2.xy * b1.xz - b1.xy * b2.xz + b2.yw * b1.zw - b1.yw * b2.zw,\r\n            b2.xy * b1.xw - b1.xy * b2.xw - b2.yz * b1.zw + b1.yz * b2.zw,\r\n            b2.xz * b1.xw - b1.xz * b2.xw + b2.yz * b1.yw - b1.yz * b2.yw\r\n        );\r\n    }\r\n    crossrs(V: Bivec): Bivec {\r\n        return this.set(\r\n            V.xz * this.yz - this.xz * V.yz + V.xw * this.yw - this.xw * V.yw,\r\n            -V.xy * this.yz + this.xy * V.yz + V.xw * this.zw - this.xw * V.zw,\r\n            -V.xy * this.yw + this.xy * V.yw - V.xz * this.zw + this.xz * V.zw,\r\n            V.xy * this.xz - this.xy * V.xz + V.yw * this.zw - this.yw * V.zw,\r\n            V.xy * this.xw - this.xy * V.xw - V.yz * this.zw + this.yz * V.zw,\r\n            V.xz * this.xw - this.xz * V.xw + V.yz * this.yw - this.yz * V.yw\r\n        );\r\n    }\r\n    exp(): Rotor {\r\n        // Hodge Dual decompose this to:\r\n        // A : self-dual part (*A = A)\r\n        // B : antiself-dual part (*B = -B)\r\n        // two parts are commutive, corresponded to QL and QR\r\n        // 1. If this is simple rotation of angle theta:\r\n        //   exy*(theta) represents rotate from x to y by angle theta\r\n        //   this can be divided into theta/2 of QL and QR rotation\r\n        //   A and B has norm of theta, so div 2\r\n        //   Quaternion formula: Q(cos, sin * vec3), vec3 is a unit vector\r\n        // 2. if this is right-handed isoclinic rotation of angle theta,\r\n        //   we use (exy + ezw)*(theta) to represent it\r\n        //   it's easy to verify that norm(A) = 2*theta, norm(B) = 0\r\n        //   then the same as simple rotation\r\n        let A = new Vec3(this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = new Vec3(this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        let a = A.norm(); let b = B.norm();\r\n        let aa = a * 0.5; let bb = b * 0.5;\r\n        let sa = (a > 0.005 ? Math.sin(aa) / a : 0.5 - a * a / 12);\r\n        let sb = (b > 0.005 ? Math.sin(bb) / b : 0.5 - b * b / 12);\r\n        return new Rotor(\r\n            new Quaternion(Math.cos(aa), sa * A.x, sa * A.y, sa * A.z),\r\n            new Quaternion(Math.cos(bb), sb * B.x, sb * B.y, sb * B.z)\r\n        );\r\n    }\r\n\r\n    /** return two angles [max, min] between a and b\r\n     * \"a\" and \"b\" must be normalized simple bivectors*/\r\n    static angle(a: Bivec, b: Bivec): number[] {\r\n        let cc = a.dot(b); let ss = a.wedge(b);\r\n        let ccpss = cc + ss;\r\n        let ccmss = cc - ss;\r\n        if (Math.abs(ccpss) > 1) ccpss = Math.sign(ccpss);\r\n        if (Math.abs(ccmss) > 1) ccmss = Math.sign(ccmss);\r\n        let sub = Math.acos(ccpss);\r\n        let add = Math.acos(ccmss);\r\n        return [(add + sub) * 0.5, (add - sub) * 0.5];\r\n    }\r\n    rotate(r: Rotor): Bivec {\r\n        // a novel method to calculate bivec rotation using isoclinic decomposition\r\n        let A = _Q_1.set(0, this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = _Q_2.set(0, this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        // self-dual bivec is invariant under rotation generated by antiself-dual bivec\r\n        // so we only compute A * r.l and B * r.r\r\n        // rotating with 3 bases in A, B respectly behave like rotation in two 3D spaces respectly\r\n        // so we use 3D quaternion rotation formula\r\n        A.mulsl(r.l).mulsrconj(r.l);\r\n        B.mulslconj(r.r).mulsr(r.r);\r\n        // recover from isoclinic representation\r\n        return new Bivec(\r\n            A.y + B.y, A.z + B.z, A.w + B.w, A.w - B.w, B.z - A.z, A.y - B.y\r\n        ).mulfs(0.5);\r\n    }\r\n    rotates(r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = _Q_2.set(0, this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        A.mulsl(r.l).mulsrconj(r.l);\r\n        B.mulslconj(r.r).mulsr(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    rotatesconj(r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = _Q_2.set(0, this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        A.mulslconj(r.l).mulsr(r.l);\r\n        B.mulsl(r.r).mulsrconj(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    rotateset(bivec: Bivec, r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, bivec.xy + bivec.zw, bivec.xz - bivec.yw, bivec.xw + bivec.yz);\r\n        let B = _Q_2.set(0, bivec.xy - bivec.zw, bivec.xz + bivec.yw, bivec.xw - bivec.yz);\r\n        A.mulsl(r.l).mulsrconj(r.l);\r\n        B.mulslconj(r.r).mulsr(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    /** return a random oriented simple normalized bivector */\r\n    static rand(): Bivec {\r\n        // sampled in isoclinic space uniformly for left and right part respectively\r\n        let a = _vec3_1.randset().mulfs(0.5);\r\n        let b = _vec3_2.randset().mulfs(0.5);\r\n        return new Bivec(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    randset(): Bivec {\r\n        // sampled in isoclinic space uniformly for left and right part respectively\r\n        let a = _vec3_1.randset().mulfs(0.5);\r\n        let b = _vec3_2.randset().mulfs(0.5);\r\n        return this.set(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    /** return a random oriented simple normalized bivector by seed */\r\n    static srand(seed: Srand): Bivec {\r\n        let a = _vec3_1.srandset(seed).mulfs(0.5);\r\n        let b = _vec3_2.srandset(seed).mulfs(0.5);\r\n        return new Bivec(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    srandset(seed: Srand): Bivec {\r\n        let a = _vec3_1.srandset(seed).mulfs(0.5);\r\n        let b = _vec3_2.srandset(seed).mulfs(0.5);\r\n        return this.set(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    pushPool(pool: BivecPool = bivecPool) {\r\n        pool.push(this);\r\n    }\r\n}\r\n\r\nexport let _bivec = new Bivec();","import { Vec2 } from \"./vec2\";\r\nimport { Vec3 } from \"./vec3\";\r\nimport { Quaternion, _Q } from \"./quaternion\";\r\nimport { Pool } from \"../pool\";\r\nimport { Srand } from \"../random\";\r\nimport { _360 } from \"../const\";\r\nimport { Bivec } from \"./bivec\";\r\nimport { Rotor } from \"./rotor\";\r\nimport { Mat4 } from \"./mat4\";\r\nexport class Vec4Pool extends Pool<Vec4>{\r\n    constructObject() { return new Vec4; }\r\n}\r\nexport const vec4Pool = new Vec4Pool;\r\nexport class Vec4 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    w: number;\r\n    static readonly x = new Vec4(1, 0, 0, 0);\r\n    static readonly y = new Vec4(0, 1, 0, 0);\r\n    static readonly z = new Vec4(0, 0, 1, 0);\r\n    static readonly w = new Vec4(0, 0, 0, 1);\r\n    static readonly origin = new Vec4(0, 0, 0, 0);\r\n    static readonly xNeg = new Vec4(-1, 0, 0, 0);\r\n    static readonly yNeg = new Vec4(0, -1, 0, 0);\r\n    static readonly zNeg = new Vec4(0, 0, -1, 0);\r\n    static readonly wNeg = new Vec4(0, 0, 0, -1);\r\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\r\n        this.x = x; this.y = y; this.z = z; this.w = w;\r\n    }\r\n    flat(): number[] {\r\n        return [this.x, this.y, this.z, this.w];\r\n    }\r\n    writeBuffer(b: Float32Array, offset: number = 0) {\r\n        b[offset] = this.x;\r\n        b[offset + 1] = this.y;\r\n        b[offset + 2] = this.z;\r\n        b[offset + 3] = this.w;\r\n    }\r\n    copy(v: Vec4 | Quaternion): Vec4 {\r\n        this.x = v.x; this.y = v.y;\r\n        this.z = v.z; this.w = v.w;\r\n        return this;\r\n    }\r\n    set(x: number = 0, y: number = 0, z: number = 0, w: number = 0): Vec4 {\r\n        this.x = x; this.y = y; this.z = z; this.w = w; return this;\r\n    }\r\n    ywx(): Vec3 { return new Vec3(this.y, this.w, this.x); }\r\n    yxw(): Vec3 { return new Vec3(this.y, this.x, this.w); }\r\n    yzw(): Vec3 { return new Vec3(this.y, this.z, this.w); }\r\n    ywz(): Vec3 { return new Vec3(this.y, this.w, this.z); }\r\n    yzx(): Vec3 { return new Vec3(this.y, this.z, this.x); }\r\n    yxz(): Vec3 { return new Vec3(this.y, this.x, this.z); }\r\n    zwx(): Vec3 { return new Vec3(this.z, this.w, this.x); }\r\n    zxw(): Vec3 { return new Vec3(this.z, this.x, this.w); }\r\n    zyw(): Vec3 { return new Vec3(this.z, this.y, this.w); }\r\n    zwy(): Vec3 { return new Vec3(this.z, this.w, this.y); }\r\n    zyx(): Vec3 { return new Vec3(this.z, this.y, this.x); }\r\n    zxy(): Vec3 { return new Vec3(this.z, this.x, this.y); }\r\n    xzy(): Vec3 { return new Vec3(this.x, this.z, this.y); }\r\n    xyz(): Vec3 { return new Vec3(this.x, this.y, this.z); }\r\n    xwy(): Vec3 { return new Vec3(this.x, this.w, this.y); }\r\n    xyw(): Vec3 { return new Vec3(this.x, this.y, this.w); }\r\n    xzw(): Vec3 { return new Vec3(this.x, this.z, this.w); }\r\n    xwz(): Vec3 { return new Vec3(this.x, this.w, this.z); }\r\n    wxy(): Vec3 { return new Vec3(this.w, this.x, this.y); }\r\n    wyx(): Vec3 { return new Vec3(this.w, this.y, this.x); }\r\n    wzy(): Vec3 { return new Vec3(this.w, this.z, this.y); }\r\n    wyz(): Vec3 { return new Vec3(this.w, this.y, this.z); }\r\n    wxz(): Vec3 { return new Vec3(this.w, this.x, this.z); }\r\n    wzx(): Vec3 { return new Vec3(this.w, this.z, this.x); }\r\n    wxyz(): Vec4 { return new Vec4(this.w, this.x, this.y, this.z); }\r\n    wxzy(): Vec4 { return new Vec4(this.w, this.x, this.z, this.y); }\r\n    wyxz(): Vec4 { return new Vec4(this.w, this.y, this.x, this.z); }\r\n    wzxy(): Vec4 { return new Vec4(this.w, this.z, this.x, this.y); }\r\n    yxzw(): Vec4 { return new Vec4(this.y, this.x, this.z, this.w); }\r\n    xzwy(): Vec4 { return new Vec4(this.x, this.z, this.w, this.y); }\r\n\r\n\r\n    clone(): Vec4 {\r\n        return new Vec4(this.x, this.y, this.z, this.w);\r\n    }\r\n    add(v2: Vec4): Vec4 {\r\n        return new Vec4(this.x + v2.x, this.y + v2.y, this.z + v2.z, this.w + v2.w);\r\n    }\r\n    addset(v1: Vec4, v2: Vec4): Vec4 {\r\n        this.x = v1.x + v2.x; this.y = v1.y + v2.y; this.z = v1.z + v2.z; this.w = v1.w + v2.w; return this;\r\n    }\r\n    addf(v2: number): Vec4 {\r\n        return new Vec4(this.x + v2, this.y + v2, this.z + v2, this.w + v2);\r\n    }\r\n    adds(v2: Vec4): Vec4 {\r\n        this.x += v2.x; this.y += v2.y; this.z += v2.z; this.w += v2.w; return this;\r\n    }\r\n    addfs(v2: number): Vec4 {\r\n        this.x += v2; this.y += v2; this.z += v2; this.w += v2; return this;\r\n    }\r\n    neg(): Vec4 {\r\n        return new Vec4(-this.x, -this.y, -this.z, -this.w);\r\n    }\r\n    negs(): Vec4 {\r\n        this.x = - this.x; this.y = -this.y; this.z = -this.z; this.w = -this.w;\r\n        return this;\r\n    }\r\n    sub(v2: Vec4): Vec4 {\r\n        return new Vec4(this.x - v2.x, this.y - v2.y, this.z - v2.z, this.w - v2.w);\r\n    }\r\n    subset(v1: Vec4, v2: Vec4): Vec4 {\r\n        this.x = v1.x - v2.x; this.y = v1.y - v2.y; this.z = v1.z - v2.z; this.w = v1.w - v2.w; return this;\r\n    }\r\n    subf(v2: number): Vec4 {\r\n        return new Vec4(this.x - v2, this.y - v2, this.z - v2, this.w - v2);\r\n    }\r\n    subs(v2: Vec4): Vec4 {\r\n        this.x -= v2.x; this.y -= v2.y; this.z -= v2.z; this.w -= v2.w; return this;\r\n    }\r\n    subfs(v2: number): Vec4 {\r\n        this.x -= v2; this.y -= v2; this.z -= v2; this.w -= v2; return this;\r\n    }\r\n    mulf(v2: number): Vec4 {\r\n        return new Vec4(this.x * v2, this.y * v2, this.z * v2, this.w * v2);\r\n    }\r\n    mulfs(v2: number): Vec4 {\r\n        this.x *= v2; this.y *= v2; this.z *= v2; this.w *= v2; return this;\r\n    }\r\n    mulmatvset(mat4: Mat4, v: Vec4): Vec4 {\r\n        let a = mat4.elem;\r\n        return this.set(\r\n            v.x * a[0] + v.y * a[1] + v.z * a[2] + v.w * a[3],\r\n            v.x * a[4] + v.y * a[5] + v.z * a[6] + v.w * a[7],\r\n            v.x * a[8] + v.y * a[9] + v.z * a[10] + v.w * a[11],\r\n            v.x * a[12] + v.y * a[13] + v.z * a[14] + v.w * a[15]\r\n        );\r\n    }\r\n    /** this += v * k */\r\n    addmulfs(v: Vec4, k: number) {\r\n        this.x += v.x * k; this.y += v.y * k; this.z += v.z * k; this.w += v.w * k; return this;\r\n    }\r\n    mul(v2: Vec4): Vec4 {\r\n        return new Vec4(this.x * v2.x, this.y * v2.y, this.z * v2.z, this.w * v2.w);\r\n    }\r\n    muls(v2: Vec4): Vec4 {\r\n        this.x *= v2.x; this.y *= v2.y; this.z *= v2.z; this.w *= v2.w; return this;\r\n    }\r\n    divf(v2: number): Vec4 {\r\n        v2 = 1 / v2;\r\n        return new Vec4(this.x * v2, this.y * v2, this.z * v2, this.w * v2);\r\n    }\r\n    divfs(v2: number): Vec4 {\r\n        v2 = 1 / v2;\r\n        this.x *= v2; this.y *= v2; this.z *= v2; this.w *= v2; return this;\r\n    }\r\n    div(v2: Vec4): Vec4 {\r\n        return new Vec4(this.x / v2.x, this.y / v2.y, this.z / v2.z, this.w / v2.w);\r\n    }\r\n    divs(v2: Vec4): Vec4 {\r\n        this.x /= v2.x; this.y /= v2.y; this.z /= v2.z; this.w /= v2.w; return this;\r\n    }\r\n    dot(v2: Vec4): number {\r\n        return this.x * v2.x + this.y * v2.y + this.z * v2.z + this.w * v2.w;\r\n    }\r\n    norm(): number {\r\n        return Math.hypot(this.x, this.y, this.z, this.w);\r\n    }\r\n    norms(): Vec4 {\r\n        let v2 = Math.hypot(this.x, this.y, this.z, this.w);\r\n        v2 = v2 == 0 ? 0 : (1 / v2);\r\n        this.x *= v2; this.y *= v2; this.z *= v2; this.w *= v2; return this;\r\n    }\r\n    normsqr(): number {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n    }\r\n    norm1(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\r\n    }\r\n    norminf(): number {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z), Math.abs(this.z));\r\n    }\r\n    normi(i: number): number {\r\n        return Math.pow(\r\n            Math.pow(Math.abs(this.x), i) +\r\n            Math.pow(Math.abs(this.y), i) +\r\n            Math.pow(Math.abs(this.z), i) +\r\n            Math.pow(Math.abs(this.w), i), 1 / i\r\n        );\r\n    }\r\n    wedge(V: Vec4): Bivec {\r\n        return new Bivec(\r\n            this.x * V.y - this.y * V.x,\r\n            this.x * V.z - this.z * V.x,\r\n            this.x * V.w - this.w * V.x,\r\n            this.y * V.z - this.z * V.y,\r\n            this.y * V.w - this.w * V.y,\r\n            this.z * V.w - this.w * V.z\r\n        );\r\n    }\r\n    wedgevbset(v: Vec4, bivec: Bivec): Vec4 {\r\n        return this.set(\r\n            -bivec.yz * v.w - bivec.zw * v.y + bivec.yw * v.z,\r\n            bivec.xz * v.w + bivec.zw * v.x - bivec.xw * v.z,\r\n            -bivec.xy * v.w - bivec.yw * v.x + bivec.xw * v.y,\r\n            bivec.xy * v.z + bivec.yz * v.x - bivec.xz * v.y\r\n        );\r\n    }\r\n    wedgeb(bivec: Bivec): Vec4 {\r\n        return bivec.wedgev(this);\r\n    }\r\n    /** Vector part of Geometry Product\r\n     * ey * exy = -ex, ex * exy = ey, ex * eyz = 0\r\n     *  */\r\n    dotb(B: Bivec): Vec4 {\r\n        return new Vec4(\r\n            -B.xy * this.y - B.xz * this.z - B.xw * this.w,\r\n            B.xy * this.x - B.yz * this.z - B.yw * this.w,\r\n            B.xz * this.x + B.yz * this.y - B.zw * this.w,\r\n            B.xw * this.x + B.yw * this.y + B.zw * this.z\r\n        );\r\n    }\r\n    /** this = this * b;\r\n     *  Vector part of Geometry Product \r\n     *  ey * exy = -ex, ex * exy = ey, ex * eyz = 0\r\n     *  */\r\n    dotbsr(B: Bivec): Vec4 {\r\n        return this.set(\r\n            -B.xy * this.y - B.xz * this.z - B.xw * this.w,\r\n            B.xy * this.x - B.yz * this.z - B.yw * this.w,\r\n            B.xz * this.x + B.yz * this.y - B.zw * this.w,\r\n            B.xw * this.x + B.yw * this.y + B.zw * this.z\r\n        );\r\n    }\r\n    dotbset(v: Vec4, B: Bivec): Vec4 {\r\n        return this.set(\r\n            -B.xy * v.y - B.xz * v.z - B.xw * v.w,\r\n            B.xy * v.x - B.yz * v.z - B.yw * v.w,\r\n            B.xz * v.x + B.yz * v.y - B.zw * v.w,\r\n            B.xw * v.x + B.yw * v.y + B.zw * v.z\r\n        );\r\n    }\r\n    /** this = mat * this */\r\n    mulmatls(mat4: Mat4): Vec4 {\r\n        let a = mat4.elem;\r\n        return this.set(\r\n            this.x * a[0] + this.y * a[1] + this.z * a[2] + this.w * a[3],\r\n            this.x * a[4] + this.y * a[5] + this.z * a[6] + this.w * a[7],\r\n            this.x * a[8] + this.y * a[9] + this.z * a[10] + this.w * a[11],\r\n            this.x * a[12] + this.y * a[13] + this.z * a[14] + this.w * a[15]\r\n        );\r\n    }\r\n    rotate(r: Rotor): Vec4 {\r\n        return _Q.copy(this).mulsl(r.l).mulsr(r.r).xyzw();\r\n    }\r\n    rotates(r: Rotor): Vec4 {\r\n        this.copy(_Q.copy(this).mulsl(r.l).mulsr(r.r));\r\n        return this;\r\n    }\r\n    rotateconj(r: Rotor): Vec4 {\r\n        return _Q.copy(this).mulslconj(r.l).mulsrconj(r.r).xyzw();\r\n    }\r\n    rotatesconj(r: Rotor): Vec4 {\r\n        this.copy(_Q.copy(this).mulslconj(r.l).mulsrconj(r.r));\r\n        return this;\r\n    }\r\n    reflect(normal: Vec4): Vec4 {\r\n        return this.sub(normal.mulf(this.dot(normal) * 2));\r\n    }\r\n    reflects(normal: Vec4): Vec4 {\r\n        let k = this.dot(normal) * 2;\r\n        this.x -= normal.x * k;\r\n        this.y -= normal.y * k;\r\n        this.z -= normal.z * k;\r\n        this.w -= normal.w * k;\r\n        return this;\r\n    }\r\n    distanceTo(p: Vec4) {\r\n        return Math.hypot(p.x - this.x, p.y - this.y, p.z - this.z, p.w - this.w);\r\n    }\r\n    distanceSqrTo(p: Vec4) {\r\n        let x = p.x - this.x, y = p.y - this.y, z = p.z - this.z, w = p.w - this.w;\r\n        return x * x + y * y + z * z + w * w;\r\n    }\r\n    randset(): Vec4 {\r\n        let a = Math.random() * _360;\r\n        let b = Math.random() * _360;\r\n        let c = Math.random();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return this.set(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    srandset(seed: Srand): Vec4 {\r\n        let a = seed.nextf() * _360;\r\n        let b = seed.nextf() * _360;\r\n        let c = seed.nextf();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return this.set(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    /** project vector on a plane determined by bivector.\r\n     * bivector b must be normalized and simple\r\n     */\r\n    projb(b: Bivec) {\r\n        return this.dotb(b).dotbsr(b).negs();\r\n    }\r\n    projbs(b: Bivec) {\r\n        return this.dotbsr(b).dotbsr(b).negs();\r\n    }\r\n    static rand(): Vec4 {\r\n        let a = Math.random() * _360;\r\n        let b = Math.random() * _360;\r\n        let c = Math.random();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return new Vec4(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    static srand(seed: Srand): Vec4 {\r\n        let a = seed.nextf() * _360;\r\n        let b = seed.nextf() * _360;\r\n        let c = seed.nextf();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return new Vec4(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    equal(v: Vec4) {\r\n        return this.x === v.x && this.y === v.y && this.z === v.z && this.w === v.w;\r\n    }\r\n    pushPool(pool: Vec4Pool = vec4Pool) {\r\n        pool.push(this);\r\n    }\r\n}\r\n\r\nexport let _vec4 = new Vec4();\r\nexport let _vec4_1 = new Vec4();","import { Vec2 } from \"./vec2\";\r\nimport { Vec4 } from \"./vec4\";\r\nimport { Quaternion, _Q } from \"./quaternion\";\r\nimport { Pool } from \"../pool\";\r\nimport { Srand } from \"../random\";\r\nimport { _360 } from \"../const\";\r\nexport class Vec3Pool extends Pool<Vec3>{\r\n    constructObject() { return new Vec3; }\r\n}\r\nexport const vec3Pool = new Vec3Pool;\r\nexport class Vec3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    static readonly x = new Vec3(1, 0, 0);\r\n    static readonly y = new Vec3(0, 1, 0);\r\n    static readonly z = new Vec3(0, 0, 1);\r\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        this.x = x; this.y = y; this.z = z;\r\n    }\r\n    flat(): number[] {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    writeBuffer(b: Float32Array, offset: number = 0) {\r\n        b[offset] = this.x;\r\n        b[offset + 1] = this.y;\r\n        b[offset + 2] = this.z;\r\n    }\r\n    copy(v: Vec3): Vec3 {\r\n        this.x = v.x; this.y = v.y; this.z = v.z;\r\n        return this;\r\n    }\r\n    set(x: number = 0, y: number = 0, z: number = 0): Vec3 {\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    xy(): Vec2 {\r\n        return new Vec2(this.x, this.y);\r\n    }\r\n    yx(): Vec2 {\r\n        return new Vec2(this.y, this.x);\r\n    }\r\n    xz(): Vec2 {\r\n        return new Vec2(this.x, this.z);\r\n    }\r\n    yz(): Vec2 {\r\n        return new Vec2(this.y, this.z);\r\n    }\r\n    zy(): Vec2 {\r\n        return new Vec2(this.z, this.y);\r\n    }\r\n    yzx(): Vec3 {\r\n        return new Vec3(this.y, this.z, this.x);\r\n    }\r\n    yxz(): Vec3 {\r\n        return new Vec3(this.y, this.x, this.z);\r\n    }\r\n    zyx(): Vec3 {\r\n        return new Vec3(this.z, this.y, this.x);\r\n    }\r\n    zxy(): Vec3 {\r\n        return new Vec3(this.z, this.x, this.y);\r\n    }\r\n    xzy(): Vec3 {\r\n        return new Vec3(this.x, this.z, this.y);\r\n    }\r\n    xyz0(): Vec4 {\r\n        return new Vec4(this.x, this.y, this.z);\r\n    }\r\n    x0yz(): Vec4 {\r\n        return new Vec4(this.x, 0, this.y, this.z);\r\n    }\r\n    clone(): Vec3 {\r\n        return new Vec3(this.x, this.y, this.z);\r\n    }\r\n    add(v2: Vec3): Vec3 {\r\n        return new Vec3(this.x + v2.x, this.y + v2.y, this.z + v2.z);\r\n    }\r\n\r\n    addset(v1: Vec3, v2: Vec3): Vec3 {\r\n        this.x = v1.x + v2.x; this.y = v1.y + v2.y; this.z = v1.z + v2.z; return this;\r\n    }\r\n    addf(v2: number): Vec3 {\r\n        return new Vec3(this.x + v2, this.y + v2, this.z + v2);\r\n    }\r\n    adds(v2: Vec3): Vec3 {\r\n        this.x += v2.x; this.y += v2.y; this.z += v2.z; return this;\r\n    }\r\n    addfs(v2: number): Vec3 {\r\n        this.x += v2; this.y += v2; this.z += v2; return this;\r\n    }\r\n    /** this += v * k */\r\n    addmulfs(v: Vec3, k: number) {\r\n        this.x += v.x * k; this.y += v.y * k; this.z += v.z * k; return this;\r\n    }\r\n    neg(): Vec3 {\r\n        return new Vec3(-this.x, -this.y, -this.z);\r\n    }\r\n    negs(): Vec3 {\r\n        this.x = - this.x; this.y = -this.y; this.z = -this.z;\r\n        return this;\r\n    }\r\n    sub(v2: Vec3): Vec3 {\r\n        return new Vec3(this.x - v2.x, this.y - v2.y, this.z - v2.z);\r\n    }\r\n\r\n    subset(v1: Vec3, v2: Vec3): Vec3 {\r\n        this.x = v1.x - v2.x; this.y = v1.y - v2.y; this.z = v1.z - v2.z; return this;\r\n    }\r\n    subf(v2: number): Vec3 {\r\n        return new Vec3(this.x - v2, this.y - v2, this.z - v2);\r\n    }\r\n    subs(v2: Vec3): Vec3 {\r\n        this.x -= v2.x; this.y -= v2.y; this.z -= v2.z; return this;\r\n    }\r\n    subfs(v2: number): Vec3 {\r\n        this.x -= v2; this.y -= v2; this.z -= v2; return this;\r\n    }\r\n    mulf(v2: number): Vec3 {\r\n        return new Vec3(this.x * v2, this.y * v2, this.z * v2);\r\n    }\r\n    mulfs(v2: number): Vec3 {\r\n        this.x *= v2; this.y *= v2; this.z *= v2; return this;\r\n    }\r\n    mul(v2: Vec3): Vec3 {\r\n        return new Vec3(this.x * v2.x, this.y * v2.y, this.z * v2.z);\r\n    }\r\n    muls(v2: Vec3): Vec3 {\r\n        this.x *= v2.x; this.y *= v2.y; this.z *= v2.z; return this;\r\n    }\r\n    divf(v2: number): Vec3 {\r\n        v2 = 1 / v2;\r\n        return new Vec3(this.x * v2, this.y * v2, this.z * v2);\r\n    }\r\n    divfs(v2: number): Vec3 {\r\n        v2 = 1 / v2;\r\n        this.x *= v2; this.y *= v2; this.z *= v2; return this;\r\n    }\r\n    div(v2: Vec3): Vec3 {\r\n        return new Vec3(this.x / v2.x, this.y / v2.y, this.z / v2.z);\r\n    }\r\n    divs(v2: Vec3): Vec3 {\r\n        this.x /= v2.x; this.y /= v2.y; this.z /= v2.z; return this;\r\n    }\r\n    dot(v2: Vec3): number {\r\n        return this.x * v2.x + this.y * v2.y + this.z * v2.z;\r\n    }\r\n    norm(): number {\r\n        return Math.hypot(this.x, this.y, this.z);\r\n    }\r\n    norms(): Vec3 {\r\n        let v2 = Math.hypot(this.x, this.y, this.z);\r\n        v2 = v2 == 0 ? 0 : (1 / v2);\r\n        this.x *= v2; this.y *= v2; this.z *= v2; return this;\r\n    }\r\n    normsqr(): number {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    norm1(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    norminf(): number {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));\r\n    }\r\n    normi(i: number): number {\r\n        return Math.pow(\r\n            Math.pow(Math.abs(this.x), i) +\r\n            Math.pow(Math.abs(this.y), i) +\r\n            Math.pow(Math.abs(this.z), i), 1 / i\r\n        );\r\n    }\r\n    wedge(v3: Vec3): Vec3 {\r\n        return new Vec3(\r\n            this.y * v3.z - this.z * v3.y,\r\n            this.z * v3.x - this.x * v3.z,\r\n            this.x * v3.y - this.y * v3.x,\r\n        );\r\n    }\r\n    /** this.set(v1 ^ v2) */\r\n    wedgeset(v1: Vec3, v2: Vec3): Vec3 {\r\n        this.x = v1.y * v2.z - v1.z * v2.y;\r\n        this.y = v1.z * v2.x - v1.x * v2.z;\r\n        this.z = v1.x * v2.y - v1.y * v2.x;\r\n        return this;\r\n    }\r\n    /** this = this ^ v */\r\n    wedgesr(v: Vec3): Vec3 {\r\n        return this.set(\r\n            this.y * v.z - this.z * v.y,\r\n            this.z * v.x - this.x * v.z,\r\n            this.x * v.y - this.y * v.x,\r\n        );\r\n    }\r\n    exp(): Quaternion {\r\n        let g = this.norm() * 0.5;\r\n        let s = Math.abs(g) > 0.005 ? Math.sin(g) / g * 0.5 : 0.5 - g * g / 12;\r\n        return new Quaternion(Math.cos(g), s * this.x, s * this.y, s * this.z);\r\n    }\r\n    rotate(q: Quaternion): Vec3 {\r\n        return _Q.set(0, this.x, this.y, this.z).mulsl(q).mulsr(q.conj()).yzw();\r\n    }\r\n    rotates(q: Quaternion): Vec3 {\r\n        let q2 = _Q.set(0, this.x, this.y, this.z).mulsl(q).mulsr(q.conj());\r\n        this.x = q2.y; this.y = q2.z; this.z = q2.w; return this;\r\n    }\r\n    randset(): Vec3 {\r\n        let a = Math.random() * _360;\r\n        let c = Math.random() * 2.0 - 1.0;\r\n        let b = Math.sqrt(1.0 - c * c);\r\n        return this.set(b * Math.cos(a), b * Math.sin(a), c);\r\n    }\r\n    srandset(seed: Srand): Vec3 {\r\n        let a = seed.nextf() * _360;\r\n        let c = seed.nextf() * 2.0 - 1.0;\r\n        let b = Math.sqrt(1.0 - c * c);\r\n        return this.set(b * Math.cos(a), b * Math.sin(a), c);\r\n    }\r\n    static rand(): Vec3 {\r\n        let a = Math.random() * _360;\r\n        let c = Math.random() * 2.0 - 1.0;\r\n        let b = Math.sqrt(1.0 - c * c);\r\n        return new Vec3(b * Math.cos(a), b * Math.sin(a), c);\r\n    }\r\n    static srand(seed: Srand): Vec3 {\r\n        let a = seed.nextf() * _360;\r\n        let c = seed.nextf() * 2.0 - 1.0;\r\n        let b = Math.sqrt(1.0 - c * c);\r\n        return new Vec3(b * Math.cos(a), b * Math.sin(a), c);\r\n    }\r\n\r\n    distanceTo(p: Vec3) {\r\n        return Math.hypot(p.x - this.x, p.y - this.y, p.z - this.z);\r\n    }\r\n    distanceSqrTo(p: Vec3) {\r\n        let x = p.x - this.x, y = p.y - this.y, z = p.z - this.z;\r\n        return x * x + y * y + z * z;\r\n    }\r\n    reflect(normal: Vec3): Vec3 {\r\n        return this.sub(normal.mulf(this.dot(normal) * 2));\r\n    }\r\n    reflects(normal: Vec3): Vec3 {\r\n        return this.subs(normal.mulf(this.dot(normal) * 2));\r\n    }\r\n    equal(v: Vec3) {\r\n        return this.x === v.x && this.y === v.y && this.z === v.z;\r\n    }\r\n\r\n    pushPool(pool: Vec3Pool = vec3Pool) {\r\n        pool.push(this);\r\n    }\r\n}\r\n\r\nexport let _vec3 = new Vec3();\r\nexport let _vec3_1 = new Vec3();\r\nexport let _vec3_2 = new Vec3();\r\nexport let _vec3_3 = new Vec3();\r\nexport let _vec3_4 = new Vec3();\r\nexport let _vec3_5 = new Vec3();","export class Srand {\r\n    _seed: number;\r\n    constructor(seed: number) {\r\n        if (Math.floor(seed) !== seed) {\r\n            seed = Math.floor(0x6D2B79F5 * seed);\r\n        }\r\n        this._seed = seed;\r\n    }\r\n    set(seed: number) {\r\n        this._seed = seed;\r\n    }\r\n    /** return a random float in [0,1] */\r\n    nextf() {\r\n        let t = this._seed += 0x6D2B79F5;\r\n        t = Math.imul(t ^ t >>> 15, t | 1);\r\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\r\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\r\n    }\r\n    /** return a random int of [0,n-1] if n is given, else range is same as int */\r\n    nexti(n?: number) {\r\n        let t = this._seed += 0x6D2B79F5;\r\n        t = Math.imul(t ^ t >>> 15, t | 1);\r\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\r\n        return (n === undefined) ? ((t ^ t >>> 14) >>> 0) : ((t ^ t >>> 14) >>> 0) % n;\r\n    }\r\n}\r\n// https://github.com/mrdoob/three.js/blob/dev/src/math/MathUtils.js\r\nconst _lut = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'];\r\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\nexport function generateUUID() {\r\n    const d0 = Math.random() * 0xffffffff | 0;\r\n    const d1 = Math.random() * 0xffffffff | 0;\r\n    const d2 = Math.random() * 0xffffffff | 0;\r\n    const d3 = Math.random() * 0xffffffff | 0;\r\n    const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' +\r\n        _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' +\r\n        _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] +\r\n        _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\r\n    // .toLowerCase() here flattens concatenated strings to save heap memory space.\r\n    return uuid.toLowerCase();\r\n\r\n}","import { Pool } from \"../pool\";\r\nimport { Vec2 } from \"./vec2\";\r\n\r\nexport class Mat2Pool extends Pool<Mat2>{\r\n    constructObject() { return new Mat2; }\r\n}\r\nexport const mat2Pool = new Mat2Pool;\r\nexport class Mat2 {\r\n    elem: number[];\r\n    static id = new Mat2(1, 0, 0, 1);\r\n    static zero = new Mat2(0, 0, 0, 0);\r\n    static diag(a: number, b: number): Mat2 {\r\n        return new Mat2(\r\n            a, 0,\r\n            0, b\r\n        );\r\n    }\r\n    constructor(\r\n        a: number = 1, b: number = 0,\r\n        c: number = 0, d: number = 1\r\n    ) { this.elem = [a, b, c, d]; }\r\n    set(\r\n        a: number = 0, b: number = 0,\r\n        c: number = 0, d: number = 0\r\n    ): Mat2 { this.elem[0] = a; this.elem[1] = b; this.elem[2] = c; this.elem[3] = d; return this; }\r\n    setid() { this.elem[0] = 1; this.elem[1] = 0; this.elem[2] = 0; this.elem[3] = 1; return this; }\r\n    ts(): Mat2 {\r\n        let tmp = this.elem[1]; this.elem[1] = this.elem[2]; this.elem[2] = tmp;\r\n        return this;\r\n    }\r\n    t(): Mat2 {\r\n        return new Mat2(\r\n            this.elem[0], this.elem[2],\r\n            this.elem[1], this.elem[3]\r\n        );\r\n    }\r\n    copy(m2: Mat2): Mat2 {\r\n        for (var i = 0; i < 4; i++) {\r\n            this.elem[i] = m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    add(m2: Mat2): Mat2 {\r\n        let m = new Mat2();\r\n        for (var i = 0; i < 4; i++) {\r\n            m.elem[i] = this.elem[i] + m2.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    adds(m2: Mat2): Mat2 {\r\n        for (var i = 0; i < 4; i++) {\r\n            this.elem[i] += m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    neg(): Mat2 {\r\n        let m = new Mat2();\r\n        for (var i = 0; i < 4; i++) {\r\n            m.elem[i] = -this.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    negs(): Mat2 {\r\n        for (var i = 0; i < 4; i++) {\r\n            this.elem[i] = -this.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    sub(m2: Mat2): Mat2 {\r\n        let m = new Mat2();\r\n        for (var i = 0; i < 4; i++) {\r\n            m.elem[i] = this.elem[i] - m2.elem[i];\r\n        }\r\n        return m;\r\n    }\r\n    subs(m2: Mat2): Mat2 {\r\n        for (var i = 0; i < 4; i++) {\r\n            this.elem[i] -= m2.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    mulf(k: number): Mat2 {\r\n        let m = new Mat2();\r\n        for (var i = 0; i < 4; i++) {\r\n            m.elem[i] = this.elem[i] * k;\r\n        }\r\n        return m;\r\n    }\r\n    mulfs(k: number): Mat2 {\r\n        for (var i = 0; i < 4; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    mulv(v: Vec2): Vec2 {\r\n        let a = this.elem;\r\n        return new Vec2(\r\n            v.x * a[0] + v.y * a[1],\r\n            v.x * a[2] + v.y * a[3]\r\n        );\r\n    }\r\n    mul(m: Mat2): Mat2 {\r\n        let a = this.elem; let b = m.elem;\r\n        return new Mat2(\r\n            a[0] * b[0] + a[1] * b[2], a[0] * b[1] + a[1] * b[3],\r\n            a[2] * b[0] + a[3] * b[2], a[2] * b[1] + a[3] * b[3]\r\n        );\r\n    }\r\n    muls(m: Mat2): Mat2 {\r\n        let a = this.elem; let b = m.elem;\r\n        this.set(\r\n            a[0] * b[0] + a[1] * b[2], a[0] * b[1] + a[1] * b[3],\r\n            a[2] * b[0] + a[3] * b[2], a[2] * b[1] + a[3] * b[3]\r\n        );\r\n        return this;\r\n    }\r\n    inv(): Mat2 {\r\n        let me = this.elem;\r\n        let a = me[0], b = me[1], c = me[2], d = me[3],\r\n            det = a * d - b * c;\r\n        if (det === 0) {\r\n            console.warn(\"Matrix determinant is 0\");\r\n            return new Mat2(0, 0, 0, 0);\r\n        }\r\n        let detInv = 1 / det;\r\n        return new Mat2(\r\n            d * detInv,\r\n            -b * detInv,\r\n            -c * detInv,\r\n            a * detInv\r\n        );\r\n    }\r\n    invs(): Mat2 {\r\n        let me = this.elem;\r\n        let a = me[0], b = me[1], c = me[2], d = me[3],\r\n            det = a * d - b * c;\r\n        if (det === 0) {\r\n            var msg = \"Matrix determinant is 0\";\r\n            console.warn(msg);\r\n            me.fill(0);\r\n            return this;\r\n        }\r\n        let detInv = 1 / det;\r\n        me[0] = d * detInv;\r\n        me[1] = -b * detInv;\r\n        me[2] = -c * detInv;\r\n        me[3] = a * detInv;\r\n        return this;\r\n    }\r\n    pushPool(pool: Mat2Pool = mat2Pool) {\r\n        pool.push(this);\r\n    }\r\n}\r\nexport let _mat2 = new Mat2();\r\n","import { Vec2 } from \"./vec2\"\r\nexport class Complex {\r\n    re: number;\r\n    im: number;\r\n    static i = new Complex(0, 1);\r\n    constructor(re: number = 0, im: number = 0) {\r\n        this.re = re; this.im = im;\r\n    }\r\n    flat(): number[] {\r\n        return [this.re, this.im];\r\n    }\r\n    set(v: Complex): Complex {\r\n        this.re = v.re; this.im = v.im; return this;\r\n    }\r\n    setv(v: Vec2): Complex {\r\n        this.re = v.x; this.im = v.y; return this;\r\n    }\r\n    clone(): Complex {\r\n        return new Complex(this.re, this.im);\r\n    }\r\n    add(v2: Complex): Complex {\r\n        return new Complex(this.re + v2.re, this.im + v2.im);\r\n    }\r\n    addf(v2: number): Complex {\r\n        return new Complex(this.re + v2, this.im);\r\n    }\r\n    adds(v2: Complex): Complex {\r\n        this.re += v2.re; this.im += v2.im; return this;\r\n    }\r\n    addfs(v2: number): Complex {\r\n        this.re += v2; return this;\r\n    }\r\n    neg(): Complex {\r\n        return new Complex(-this.re, -this.im);\r\n    }\r\n    negs(): Complex {\r\n        this.re = - this.re; this.im = -this.im;\r\n        return this;\r\n    }\r\n    sub(v2: Complex): Complex {\r\n        return new Complex(this.re - v2.re, this.im - v2.im);\r\n    }\r\n    subf(v2: number): Complex {\r\n        return new Complex(this.re - v2, this.im);\r\n    }\r\n    subs(v2: Complex): Complex {\r\n        this.re -= v2.re; this.im -= v2.im; return this;\r\n    }\r\n    subfs(v2: number): Complex {\r\n        this.re -= v2; return this;\r\n    }\r\n    mulf(v2: number): Complex {\r\n        return new Complex(this.re * v2, this.im * v2);\r\n    }\r\n    mulfs(v2: number): Complex {\r\n        this.re *= v2; this.im *= v2; return this;\r\n    }\r\n    mul(k: Complex): Complex {\r\n        return new Complex(this.re * k.re - k.im * this.im, this.re * k.im + k.re * this.im);\r\n    }\r\n    muls(k: Complex): Complex {\r\n        let re = this.re * k.re - k.im * this.im;\r\n        this.im = this.re * k.im + k.re * this.im;\r\n        this.re = re; return this;\r\n    }\r\n    divf(v2: number): Complex {\r\n        v2 = 1 / v2;\r\n        return new Complex(this.re * v2, this.im * v2);\r\n    }\r\n    divfs(v2: number): Complex {\r\n        v2 = 1 / v2;\r\n        this.re *= v2; this.im *= v2; return this;\r\n    }\r\n    div(k: Complex): Complex {\r\n        let n = 1 / (k.re * k.re + k.im * k.im);\r\n        return new Complex((this.re * k.re + k.im * this.im) * n, (k.re * this.im - this.re * k.im) * n);\r\n    }\r\n    divs(k: Complex): Complex {\r\n\r\n        let n = 1 / (k.re * k.re + k.im * k.im);\r\n        let im = (k.re * this.im - this.re * k.im) * n;\r\n        this.re = (this.re * k.re + k.im * this.im) * n;\r\n        this.im = im; return this;\r\n    }\r\n    dot(v2: Complex): number {\r\n        return this.re * v2.re + this.im * v2.im;\r\n    }\r\n    norm(): number {\r\n        return Math.sqrt(this.re * this.re + this.im * this.im);\r\n    }\r\n    norms(): Complex {\r\n        let v2 = Math.sqrt(this.re * this.re + this.im * this.im);\r\n        v2 = v2 == 0 ? 0 : (1 / v2);\r\n        this.re *= v2; this.im *= v2; return this;\r\n    }\r\n    normsqr(): number {\r\n        return this.re * this.re + this.im * this.im;\r\n    }\r\n    conj(): Complex {\r\n        return new Complex(this.re, -this.im);\r\n    }\r\n    conjs(): Complex {\r\n        this.im = -this.im; return this;\r\n    }\r\n    exp(): Complex {\r\n        let r = Math.exp(this.re);\r\n        return new Complex(Math.cos(this.im) * r, Math.sin(this.im) * r);\r\n    }\r\n    exps(): Complex {\r\n        let r = Math.exp(this.re);\r\n        this.re = Math.cos(this.im) * r;\r\n        this.im = Math.sin(this.im) * r;\r\n        return this;\r\n    }\r\n    arg(): number {\r\n        return Math.atan2(this.im, this.re);\r\n    }\r\n    log(): Complex {\r\n        return new Complex(\r\n            Math.log(this.re * this.re + this.im * this.im) / 2,\r\n            Math.atan2(this.im, this.re)\r\n        );\r\n    }\r\n    logs(): Complex {\r\n        let a = Math.atan2(this.im, this.re);\r\n        this.re = Math.log(this.re * this.re + this.im * this.im) / 2;\r\n        this.im = a;\r\n        return this;\r\n    }\r\n    pow(p: Complex): Complex {\r\n        return this.log().muls(p).exps();\r\n    }\r\n    powf(n: number): Complex {\r\n        return this.log().mulfs(n).exps();\r\n    }\r\n    pows(p: Complex): Complex {\r\n        return this.logs().muls(p).exps();\r\n    }\r\n    powfs(n: number): Complex {\r\n        return this.logs().mulfs(n).exps();\r\n    }\r\n}\r\nexport class CMat2 {\r\n    // todo PSL(2,C)\r\n}","import { Bivec } from \"./bivec\";\r\nimport { Mat4 } from \"./mat4\";\r\nimport { Rotor, _r } from \"./rotor\";\r\nimport { Vec4, _vec4, _vec4_1 } from \"./vec4\";\r\n\r\n/** [A(4x4), b(1x4)]\r\n * \r\n *  [0(4x1), 1(1x1)]\r\n * \r\n *  a blocked 5x5 matrix for transform in 4d\r\n */\r\nexport class AffineMat4 {\r\n    mat: Mat4;\r\n    vec: Vec4;\r\n    constructor(mat: Mat4 = new Mat4(), vec: Vec4 = new Vec4()) {\r\n        this.mat = mat; this.vec = vec;\r\n    }\r\n    writeBuffer(b: Float32Array, offset: number = 0) {\r\n        this.mat.writeBuffer(b, offset);\r\n        this.vec.writeBuffer(b, offset + 16);\r\n    }\r\n    inv(): AffineMat4 {\r\n        let m = this.mat.inv();\r\n        return new AffineMat4(m, m.mulv(this.vec).negs());\r\n    }\r\n    invs(): AffineMat4 {\r\n        this.mat.invs();\r\n        this.vec.copy(this.mat.mulv(this.vec).negs());\r\n        return this;\r\n    }\r\n    mul(m: AffineMat4): AffineMat4 {\r\n        return new AffineMat4(this.mat.mul(m.mat), this.mat.mulv(m.vec).adds(this.vec));\r\n    }\r\n    /** this = this * m */\r\n    mulsr(m: AffineMat4): AffineMat4 {\r\n        this.vec.adds(this.mat.mulv(m.vec));\r\n        this.mat.mulsr(m.mat);\r\n        return this;\r\n    }\r\n    /** this = m * this */\r\n    mulsl(m: AffineMat4): AffineMat4 {\r\n        this.vec.mulmatls(m.mat).adds(m.vec);\r\n        this.mat.mulsl(m.mat);\r\n        return this;\r\n    }\r\n    setFromObj4(o: Obj4) {\r\n        this.mat.setFromRotor(o.rotation);\r\n        if (o.scale) {\r\n            this.mat.mulsr(Mat4.diag(o.scale.x, o.scale.y, o.scale.z, o.scale.w));\r\n        }\r\n        this.vec.copy(o.position);\r\n        return this;\r\n    }\r\n    setFromObj4inv(o: Obj4) {\r\n        this.vec.copy(o.position).negs().rotatesconj(o.rotation);\r\n        this.mat.setFromRotorconj(o.rotation);\r\n        if (o.scale) {\r\n            let x = 1 / o.scale.x;\r\n            let y = 1 / o.scale.y;\r\n            let z = 1 / o.scale.z;\r\n            let w = 1 / o.scale.w;\r\n            this.mat.mulsl(Mat4.diag(x, y, z, w));\r\n            this.vec.x *= x; this.vec.y *= y; this.vec.z *= z; this.vec.w *= w;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n/** an coordinate transform of rotation translation and scale */\r\nexport class Obj4 {\r\n    position: Vec4;\r\n    rotation: Rotor;\r\n    scale: Vec4 | undefined;\r\n    constructor(\r\n        position: Vec4 = new Vec4(), rotation: Rotor = new Rotor(),\r\n        scale?: Vec4\r\n    ) {\r\n        this.position = position ?? new Vec4();\r\n        this.rotation = rotation ?? new Rotor();\r\n        this.scale = scale;\r\n    }\r\n    copyObj4(o: Obj4) {\r\n        if (o.position) this.position.copy(o.position);\r\n        if (o.rotation) this.rotation.copy(o.rotation);\r\n        if (o.scale) { if (!this.scale) this.scale = new Vec4; this.scale.copy(o.scale); }\r\n        return this;\r\n    }\r\n    local2world(point: Vec4): Vec4 {\r\n        if (this.scale)\r\n            return new Vec4(\r\n                this.scale.x * point.x, this.scale.y * point.y,\r\n                this.scale.z * point.z, this.scale.w * point.w\r\n            ).rotates(this.rotation).adds(this.position);\r\n\r\n        return point.rotate(this.rotation).adds(this.position);\r\n    }\r\n    world2local(point: Vec4): Vec4 {\r\n        let a = point.sub(this.position).rotatesconj(this.rotation);\r\n        if (this.scale) return new Vec4(\r\n            a.x / this.scale.x, a.y / this.scale.y,\r\n            a.z / this.scale.z, a.w / this.scale.w\r\n        );\r\n        return a;\r\n    }\r\n    getMat4(): Mat4 {\r\n        if (this.scale)\r\n            return this.rotation.toMat4().mul(\r\n                Mat4.diag(this.scale.x, this.scale.y, this.scale.z, this.scale.w)\r\n            );\r\n        return this.rotation.toMat4();\r\n    }\r\n    getMat4inv(): Mat4 {\r\n        if (this.scale)\r\n            return Mat4.diag(1 / this.scale.x, 1 / this.scale.y, 1 / this.scale.z, 1 / this.scale.w).mul(\r\n                this.rotation.conj().toMat4()\r\n            );\r\n        return this.rotation.conj().toMat4();\r\n    }\r\n    getAffineMat4(): AffineMat4 {\r\n        if (this.scale)\r\n            return new AffineMat4(this.rotation.toMat4().mulsr(\r\n                Mat4.diag(this.scale.x, this.scale.y, this.scale.z, this.scale.w)\r\n            ), this.position.clone());\r\n        return new AffineMat4(this.rotation.toMat4(), this.position.clone());\r\n    }\r\n    getAffineMat4inv(): AffineMat4 {\r\n        let b = this.position.neg().rotatesconj(this.rotation);\r\n        if (!this.scale) return new AffineMat4(\r\n            this.rotation.conj().toMat4(), b\r\n        );\r\n        let x = 1 / this.scale.x;\r\n        let y = 1 / this.scale.y;\r\n        let z = 1 / this.scale.z;\r\n        let w = 1 / this.scale.w;\r\n        return new AffineMat4(Mat4.diag(x, y, z, w).mulsr(\r\n            this.rotation.conj().toMat4()\r\n        ), new Vec4(b.x * x, b.y * y, b.z * z, b.w * w));\r\n    }\r\n    translates(v: Vec4): Obj4 {\r\n        this.position.adds(v);\r\n        return this;\r\n    }\r\n    rotates(r: Rotor): Obj4 {\r\n        this.rotation.mulsl(r);\r\n        return this;\r\n    }\r\n    rotatesconj(r: Rotor): Obj4 {\r\n        this.rotation.mulslconj(r);\r\n        return this;\r\n    }\r\n    rotatesb(b: Bivec): Obj4 {\r\n        this.rotation.mulsl(_r.expset(b));\r\n        return this;\r\n    }\r\n    rotatesAt(r: Rotor, center: Vec4 = new Vec4()): Obj4 {\r\n        this.rotation.mulsl(r);\r\n        this.position.subs(center).rotates(r).adds(center);\r\n        return this;\r\n    }\r\n    lookAt(direction: Vec4, target: Vec4) {\r\n        let dir = _vec4.subset(target, this.position);\r\n        this.rotates(_r.setFromLookAt(_vec4_1.copy(direction).rotates(this.rotation), dir.norms()));\r\n        return this;\r\n    }\r\n}\r\n","import { Mat4 } from \"../algebra/mat4\";\r\nimport { Vec4 } from \"../algebra/vec4\";\r\nimport { _90, _DEG2RAD } from \"../const\";\r\n\r\nexport interface PerspectiveCamera {\r\n    fov: number;\r\n    near: number;\r\n    far: number;\r\n    /** aspect = width / height = depth / height */\r\n    aspect?: number;\r\n}\r\nexport interface OrthographicCamera {\r\n    /** size = height */\r\n    size: number;\r\n    near: number;\r\n    far: number;\r\n    /** aspect = width / height = depth / height */\r\n    aspect?: number;\r\n}\r\n/** If fov == 0, then return Orthographic projection matrix\r\n *  Caution: This function calculates PerspectiveMatrix for 0-1 depth range */\r\nexport function getPerspectiveProjectionMatrix(c: PerspectiveCamera) {\r\n    let ky = Math.tan(_90 - c.fov / 2 * _DEG2RAD);\r\n    let kxz = ky / (c.aspect ?? 1);\r\n    let a = -c.far / (c.far - c.near);\r\n    let b = c.near * a;\r\n    // [kxz   0    0    0    0]\r\n    // [0    ky   0    0    0]\r\n    // [0    0    kxz   0    0]\r\n    // [0    0    0    a    b]\r\n    // [0    0    0   -1    0]\r\n    return {\r\n        /** used for 3d */\r\n        mat4: new Mat4(\r\n            kxz, 0, 0, 0,\r\n            0, ky, 0, 0,\r\n            0, 0, a, b,\r\n            0, 0, -1, 0\r\n        ),\r\n        /** used for 4d because of lack of mat5x5 */\r\n        vec4: new Vec4(kxz, ky, a, b)\r\n    }\r\n}\r\nexport function getOrthographicProjectionMatrix(c: OrthographicCamera) {\r\n    let ky = 1 / c.size, kxz = ky / (c.aspect ?? 1);\r\n    let a = -1 / (c.far - c.near);\r\n    let b = c.near * a;\r\n    // [kxz   0    0    0    0]\r\n    // [0    ky   0    0    0]\r\n    // [0    0    kxz   0    0]\r\n    // [0    0    0    a    b]\r\n    // [0    0    0    0    1]\r\n    return {\r\n        /** used for 3d */\r\n        mat4: new Mat4(\r\n            kxz, 0, 0, 0,\r\n            0, ky, 0, 0,\r\n            0, 0, a, b,\r\n            0, 0, 0, 1\r\n        ),\r\n        /** used for 4d because of lack of mat5x5\r\n         */\r\n        vec4: new Vec4(kxz, ky, a, b)\r\n    }\r\n}","import { Vec4 } from \"../algebra/vec4\";\r\n\r\nexport class Ray {\r\n    origin: Vec4;\r\n    direction: Vec4;\r\n}\r\nexport class Plane {\r\n    /** normal need to be normalized */\r\n    normal: Vec4;\r\n    offset: number;\r\n    constructor(normal: Vec4, offset: number) {\r\n        this.normal = normal;\r\n        this.offset = offset;\r\n    }\r\n    distanceToPoint(p: Vec4) {\r\n\r\n    }\r\n    /** regard r as an infinity line */\r\n    distanceToLine(r: Ray) {\r\n\r\n    }\r\n}\r\nexport class AABB {\r\n    min: Vec4;\r\n    max: Vec4;\r\n    testAABB(aabb: AABB) {\r\n        return (\r\n            (this.min.x <= aabb.max.x && this.max.x >= aabb.min.x) &&\r\n            (this.min.y <= aabb.max.y && this.max.y >= aabb.min.y) &&\r\n            (this.min.z <= aabb.max.z && this.max.z >= aabb.min.z) &&\r\n            (this.min.w <= aabb.max.w && this.max.w >= aabb.min.w)\r\n        );\r\n    }\r\n    /** when intersected return 0, when aabb is along the normal direction return 1, otherwise -1 */\r\n    testPlane(plane: Plane) {\r\n        let min: number, max: number;\r\n        if (plane.normal.x > 0) {\r\n            min = plane.normal.x * this.min.x;\r\n            max = plane.normal.x * this.max.x;\r\n        } else {\r\n            min = plane.normal.x * this.max.x;\r\n            max = plane.normal.x * this.min.x;\r\n        }\r\n        if (plane.normal.y > 0) {\r\n            min += plane.normal.y * this.min.y;\r\n            max += plane.normal.y * this.max.y;\r\n        } else {\r\n            min += plane.normal.y * this.max.y;\r\n            max += plane.normal.y * this.min.y;\r\n        }\r\n        if (plane.normal.z > 0) {\r\n            min += plane.normal.z * this.min.z;\r\n            max += plane.normal.z * this.max.z;\r\n        } else {\r\n            min += plane.normal.z * this.max.z;\r\n            max += plane.normal.z * this.min.z;\r\n        }\r\n        if (plane.normal.w > 0) {\r\n            min += plane.normal.w * this.min.w;\r\n            max += plane.normal.w * this.max.w;\r\n        } else {\r\n            min += plane.normal.w * this.max.w;\r\n            max += plane.normal.w * this.min.w;\r\n        }\r\n        if (min <= plane.offset && max >= plane.offset) {\r\n            return 0;\r\n        }\r\n        if (min <= plane.offset && max <= plane.offset) {\r\n            return -1;\r\n        }\r\n        if (min >= plane.offset && max >= plane.offset) {\r\n            return 1;\r\n        }\r\n    }\r\n    getPoints() {\r\n        return [\r\n            new Vec4(this.min.x, this.min.y, this.min.z, this.min.w),\r\n            new Vec4(this.max.x, this.min.y, this.min.z, this.min.w),\r\n            new Vec4(this.min.x, this.max.y, this.min.z, this.min.w),\r\n            new Vec4(this.max.x, this.max.y, this.min.z, this.min.w),\r\n            new Vec4(this.min.x, this.min.y, this.max.z, this.min.w),\r\n            new Vec4(this.max.x, this.min.y, this.max.z, this.min.w),\r\n            new Vec4(this.min.x, this.max.y, this.max.z, this.min.w),\r\n            new Vec4(this.max.x, this.max.y, this.max.z, this.min.w),\r\n            new Vec4(this.min.x, this.min.y, this.min.z, this.max.w),\r\n            new Vec4(this.max.x, this.min.y, this.min.z, this.max.w),\r\n            new Vec4(this.min.x, this.max.y, this.min.z, this.max.w),\r\n            new Vec4(this.max.x, this.max.y, this.min.z, this.max.w),\r\n            new Vec4(this.min.x, this.min.y, this.max.z, this.max.w),\r\n            new Vec4(this.max.x, this.min.y, this.max.z, this.max.w),\r\n            new Vec4(this.min.x, this.max.y, this.max.z, this.max.w),\r\n            new Vec4(this.max.x, this.max.y, this.max.z, this.max.w),\r\n\r\n\r\n        ]\r\n    }\r\n    constructor(min?: Vec4, max?: Vec4) {\r\n        this.min = min ?? new Vec4(Infinity, Infinity, Infinity, Infinity,);\r\n        this.max = max ?? new Vec4(-Infinity, -Infinity, -Infinity, -Infinity,);\r\n    }\r\n    static fromPoints(points: Vec4[]) {\r\n        let aabb = new AABB();\r\n        for (let p of points) {\r\n            aabb.min.x = Math.min(aabb.min.x, p.x);\r\n            aabb.min.y = Math.min(aabb.min.y, p.y);\r\n            aabb.min.z = Math.min(aabb.min.z, p.z);\r\n            aabb.min.w = Math.min(aabb.min.w, p.w);\r\n            aabb.max.x = Math.max(aabb.max.x, p.x);\r\n            aabb.max.y = Math.max(aabb.max.y, p.y);\r\n            aabb.max.z = Math.max(aabb.max.z, p.z);\r\n            aabb.max.w = Math.max(aabb.max.w, p.w);\r\n        }\r\n        return aabb;\r\n    }\r\n}","import { Rotor } from \"../algebra/rotor\";\r\nimport { Vec4 } from \"../algebra/vec4\";\r\n\r\nexport class Spline {\r\n    points: Vec4[];\r\n    derives: Vec4[];\r\n    constructor(points: Vec4[], derives: Vec4[]) {\r\n        if (points.length !== derives.length) console.error(\"Spline: points and derives lengths don't agree\")\r\n        this.points = points;\r\n        this.derives = derives;\r\n    }\r\n    generate(seg: number): { points: Vec4[], rotors: Rotor[], curveLength: number[] } {\r\n        let points: Vec4[] = [];\r\n        let prevPoint: Vec4 | undefined;\r\n        let prevDir = Vec4.w;\r\n        let prevRotor = new Rotor();\r\n        let rotors: Rotor[] = [];\r\n        let curveLength: number[] = [];\r\n        let curveLenSum = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            let p0 = this.points[i];\r\n            let p1 = this.points[i + 1];\r\n            let d0 = this.derives[i];\r\n            let d1 = this.derives[i + 1];\r\n            let p01 = p0.sub(p1);\r\n            let A = p01.mulf(2).adds(d0).adds(d1);\r\n            let B = d0.mulf(-2).subs(d1).subs(p01.mulfs(3));\r\n            let seginv = 1 / seg;\r\n            for (let j = 0; j <= seg; j++) {\r\n                if (j === seg && i !== this.points.length - 2) break;\r\n                let t = j * seginv;\r\n                let curPoint = new Vec4(\r\n                    p0.x + t * (d0.x + t * (B.x + t * A.x)),\r\n                    p0.y + t * (d0.y + t * (B.y + t * A.y)),\r\n                    p0.z + t * (d0.z + t * (B.z + t * A.z)),\r\n                    p0.w + t * (d0.w + t * (B.w + t * A.w))\r\n                );\r\n                if (prevPoint) {\r\n                    let curDir = curPoint.sub(prevPoint);\r\n                    let dirLen = curDir.norm();\r\n                    curDir.divfs(dirLen);\r\n                    prevRotor.mulsl(Rotor.lookAt(prevDir, curDir));\r\n                    // console.log(curDir.dot(Vec4.w.rotate(prevRotor)));\r\n                    prevDir = curDir;\r\n                    rotors.push(prevRotor.clone());\r\n                    curveLength.push(curveLenSum);\r\n                    curveLenSum += dirLen;\r\n                }\r\n                prevPoint = curPoint;\r\n                points.push(curPoint);\r\n            }\r\n        }\r\n        let lastDerive = this.derives[this.derives.length - 1];\r\n        if (\r\n            points[0].x == prevPoint!.x && points[0].y == prevPoint!.y &&\r\n            points[0].z == prevPoint!.z && points[0].w == prevPoint!.w &&\r\n            this.derives[0].x == lastDerive.x && this.derives[0].y == lastDerive.y &&\r\n            this.derives[0].z == lastDerive.z && this.derives[0].w == lastDerive.w\r\n        ) {\r\n            rotors.push(rotors[0]);\r\n        } else {\r\n            rotors.push(prevRotor);\r\n        }\r\n        curveLength.push(curveLenSum);\r\n        return { points, rotors, curveLength }\r\n    }\r\n    getValue(t: number) {\r\n        let i = Math.floor(t);\r\n        t -= i;\r\n        // i %= this.points.length - 1;\r\n        // if (i < 0) i += this.points.length - 1\r\n        let p0 = this.points[i];\r\n        let p1 = this.points[i + 1];\r\n        let d0 = this.derives[i];\r\n        let d1 = this.derives[i + 1];\r\n        let p01 = p0.sub(p1);\r\n        let A = p01.mulfs(2).adds(d0).adds(d1);\r\n        let B = d0.mulf(-2).subs(d1).subs(p01.mulfs(1.5));\r\n        let x = p0.x + t * (d0.x + t * (B.x + t * A.x));\r\n        let y = p0.y + t * (d0.y + t * (B.y + t * A.y));\r\n        let z = p0.z + t * (d0.z + t * (B.z + t * A.z));\r\n        let w = p0.w + t * (d0.w + t * (B.w + t * A.w));\r\n        return new Vec4(x, y, z, w);\r\n    }\r\n}","import { Srand } from \"./random\";\r\n\r\nexport class Perlin3 {\r\n    private _p = new Uint8Array(512);\r\n    constructor(srand: Srand) {\r\n        const p = this._p;\r\n        for (let i = 0; i < 256; i++) {\r\n            p[i] = i;\r\n        }\r\n        let i = 255;\r\n        while (i--) {\r\n            let j = srand.nexti(i);\r\n            let x = p[i];\r\n            p[i] = p[j];\r\n            p[j] = x;\r\n        }\r\n        for (i = 0; i < 256; i++) {\r\n            p[i + 256] = p[i];\r\n        }\r\n    }\r\n    value(x: number, y: number, z: number) {\r\n        const p = this._p;\r\n        let X = Math.floor(x) & 255;\r\n        let Y = Math.floor(y) & 255;\r\n        let Z = Math.floor(z) & 255;\r\n        x -= Math.floor(x);\r\n        y -= Math.floor(y);\r\n        z -= Math.floor(z);\r\n        function _fade(t: number) {\r\n            return t * t * t * (t * (t * 6 - 15) + 10);\r\n        }\r\n        let u = _fade(x);\r\n        let v = _fade(y);\r\n        let w = _fade(z);\r\n\r\n        function _lerp(t: number, a: number, b: number) {\r\n            return a + t * (b - a);\r\n        }\r\n\r\n        function _grad(hash: number, x: number, y: number, z: number) {\r\n            let h = hash & 15;\r\n            let u = h < 8 ? x : y;\r\n            let v = h < 4 ? y : (h == 12 || h == 14) ? x : z;\r\n            return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n        }\r\n\r\n        let A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z;\r\n        let B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;\r\n\r\n        return _lerp(w, _lerp(v, _lerp(u, _grad(p[AA], x, y, z),\r\n            _grad(p[BA], x - 1, y, z)),\r\n            _lerp(u, _grad(p[AB], x, y - 1, z),\r\n                _grad(p[BB], x - 1, y - 1, z))),\r\n            _lerp(v, _lerp(u, _grad(p[AA + 1], x, y, z - 1),\r\n                _grad(p[BA + 1], x - 1, y, z - 1)),\r\n                _lerp(u, _grad(p[AB + 1], x, y - 1, z - 1),\r\n                    _grad(p[BB + 1], x - 1, y - 1, z - 1)\r\n                )\r\n            )\r\n        );\r\n    }\r\n}","// @ts-nocheck\r\nexport namespace wgslreflect {\r\n    export declare type ReflectAttribute = {\r\n        name: string;\r\n        value?: string;\r\n    };\r\n    export declare type ReflectType = {\r\n        name: string;\r\n        attributes: Array<ReflectAttribute>;\r\n        format?: ReflectType;\r\n        count?: string;\r\n    };\r\n    export declare type ReflectArg = {\r\n        name: string;\r\n        type: ReflectType;\r\n        attributes: Array<ReflectAttribute>;\r\n        _type: \"arg\";\r\n    };\r\n    export declare type ReflectMember = {\r\n        name: string;\r\n        type: ReflectType;\r\n        attributes: Array<ReflectAttribute>;\r\n        _type: \"member\";\r\n    };\r\n    export declare type ReflectFunction = {\r\n        args: Array<ReflectArg>;\r\n        attributes: Array<ReflectAttribute>;\r\n        name: string;\r\n        return: ReflectType;\r\n        _type: \"function\";\r\n    };\r\n    // export declare class WgslReflect {\r\n    //     functions: Array<ReflectFunction>;\r\n    //     structs: Array<ReflectStruct>;\r\n    //     constructor(code: string);\r\n    // };\r\n    export declare type ReflectStruct = {\r\n        name: string;\r\n        members: Array<ReflectMember>;\r\n        attributes: Array<ReflectAttribute>;\r\n        _type: \"struct\";\r\n    };\r\n    /** expectedInput:\r\n     *  {\r\n     *      \"location(0)\": \"_attribute0\",\r\n     *      ...\r\n     *  }\r\n     *  input: set{ \"location(0)\", ...}\r\n     *  expectedOutput: \r\n     *  Array{\"builtin(position)\", \"location(0)\", ...}\r\n     *  output: {\r\n     *      \"builtin(position)\": \"_output_of_fn.pos\",\r\n     *      ...\r\n     *  }\r\n     * */\r\n    export function parseTypeName(type: ReflectType) {\r\n        return type.name + (type.format ? `<${parseTypeName(type.format)}${type.count ? \",\" + type.count : \"\"}>` : \"\");\r\n    }\r\n    export function parseAttr(attrs: Array<ReflectAttribute>) {\r\n        // todo: match just one attribute\r\n        return attrs ? attrs.map(a => a.name + (a.value ? `(${a.value})` : \"\")).join(\" \") : \"\";\r\n    }\r\n    export function getFnInputAndOutput(\r\n        reflect: WgslReflect, fn: ReflectFunction,\r\n        expectInput: { [name: string]: string }, expectOutput: string[]\r\n    ) {\r\n        let input: Set<string> = new Set();\r\n        let output: { [name: string]: { expr: string, type: string } } = {\r\n            \"return\": \"_ouput_of_\" + fn.name\r\n        };\r\n        let call = `\r\n                let _ouput_of_${fn.name} = ${fn.name}(${fn.args.map(a => getInput(a)).join(\", \")});\r\n                `;\r\n        getOutput(fn.return, \"_ouput_of_\" + fn.name);\r\n        return { input, call, output };\r\n\r\n        function getInput(arg: ReflectArg | ReflectMember) {\r\n            let attr = parseAttr(arg.attributes ? arg.attributes.concat(arg.type.attributes ?? []) : arg.type.attributes);\r\n            let varName = expectInput[attr];\r\n            if (varName) {\r\n                input.add(attr);\r\n                return varName;\r\n            } else {\r\n                let struct = reflect.structs.filter(s => s.name === arg.type.name)[0];\r\n                if (!struct) {\r\n                    console.error(\"invalid entry point function args\");\r\n                }\r\n                let str = arg.type.name + \"(\";\r\n                for (let m of struct.members) {\r\n                    str += getInput(m) + \",\";\r\n                }\r\n                str += \")\";\r\n                return str;\r\n            }\r\n        }\r\n        function getOutput(type: ReflectType, prefix: string) {\r\n            let varName = parseAttr(type.attributes);\r\n            if (expectOutput.includes(varName)) {\r\n                output[varName] = {\r\n                    expr: prefix,\r\n                    type: parseTypeName(type)\r\n                }; return;\r\n            } else {\r\n                let struct = reflect.structs.filter(s => s.name === type.name)[0];\r\n                if (!struct) { return; }\r\n                for (let m of struct.members) {\r\n                    if (m.attributes) {\r\n                        m.type.attributes = m.type.attributes ? m.type.attributes.concat(m.attributes) : m.attributes;\r\n                    }\r\n                    getOutput(m.type, prefix + \".\" + m.name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Brendan Duncan / https://github.com/brendan-duncan\r\n     */\r\n\r\n    class Token {\r\n        constructor(type, lexeme, line) {\r\n            this._type = type;\r\n            this._lexeme = lexeme;\r\n            this._line = line;\r\n        }\r\n\r\n        toString() {\r\n            return this._lexeme;\r\n        }\r\n    }\r\n\r\n    Token.EOF = { name: \"EOF\", type: \"token\", rule: -1 };\r\n\r\n    let Keyword = {};\r\n\r\n    class WgslScanner {\r\n        constructor(source) {\r\n            this._source = source || \"\";\r\n            this._tokens = [];\r\n            this._start = 0;\r\n            this._current = 0;\r\n            this._line = 1;\r\n        }\r\n\r\n        scanTokens() {\r\n            while (!this._isAtEnd()) {\r\n                this._start = this._current;\r\n                if (!this.scanToken())\r\n                    throw `Invalid syntax at line ${this._line}`;\r\n            }\r\n\r\n            this._tokens.push(new Token(Token.EOF, \"\", this._line));\r\n            return this._tokens;\r\n        }\r\n\r\n        scanToken() {\r\n            // Find the longest consecutive set of characters that match a rule.\r\n            let lexeme = this._advance();\r\n\r\n            // Skip line-feed, adding to the line counter.\r\n            if (lexeme == \"\\n\") {\r\n                this._line++;\r\n                return true;\r\n            }\r\n\r\n            // Skip whitespace\r\n            if (this._isWhitespace(lexeme)) {\r\n                return true;\r\n            }\r\n\r\n            if (lexeme == \"/\") {\r\n                // If it's a // comment, skip everything until the next line-feed.\r\n                if (this._peekAhead() == \"/\") {\r\n                    while (lexeme != \"\\n\") {\r\n                        if (this._isAtEnd())\r\n                            return true;\r\n                        lexeme = this._advance();\r\n                    }\r\n                    // skip the linefeed\r\n                    this._line++;\r\n                    return true;\r\n                } else if (this._peekAhead() == \"*\") {\r\n                    // If it's a /* block comment, skip everything until the matching */,\r\n                    // allowing for nested block comments.\r\n                    this._advance();\r\n                    let commentLevel = 1;\r\n                    while (commentLevel > 0) {\r\n                        if (this._isAtEnd())\r\n                            return true;\r\n                        lexeme = this._advance();\r\n                        if (lexeme == \"\\n\") {\r\n                            this._line++;\r\n                        } else if (lexeme == \"*\") {\r\n                            if (this._peekAhead() == \"/\") {\r\n                                this._advance();\r\n                                commentLevel--;\r\n                                if (commentLevel == 0) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (lexeme == \"/\") {\r\n                            if (this._peekAhead() == \"*\") {\r\n                                this._advance();\r\n                                commentLevel++;\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            let matchToken = null;\r\n\r\n            for (; ;) {\r\n                let matchedToken = this._findToken(lexeme);\r\n\r\n                // The exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a shift_right.\r\n                // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\r\n                // and one to close the array).\r\n                // I don't know of a great way to resolve this, so '>>' is special-cased and if\r\n                // there was a less_than up to some number of tokens previously, and the token prior to\r\n                // that is a keyword that requires a '<', then it will be split into two greater_than's;\r\n                // otherwise it's a shift_right.\r\n                if (lexeme == \">\" && this._peekAhead() == \">\") {\r\n                    let foundLessThan = false;\r\n                    let ti = this._tokens.length - 1;\r\n                    for (let count = 0; count < 4 && ti >= 0; ++count, --ti) {\r\n                        if (this._tokens[ti]._type == Token.less_than) {\r\n                            if (ti > 0 && Token.template_types.indexOf(this._tokens[ti - 1]._type) != -1) {\r\n                                foundLessThan = true;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    // If there was a less_than in the recent token history, then this is probably a\r\n                    // greater_than.\r\n                    if (foundLessThan) {\r\n                        this._addToken(matchedToken);\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                // The current lexeme may not match any rule, but some token types may be invalid for\r\n                // part of the string but valid after a few more characters.\r\n                // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\r\n                // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\r\n                // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\r\n                // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\r\n                // hex_float_literal. So that means if we hit an non-matching string, we should look\r\n                // ahead up to two characters to see if the string starts matching a valid rule again.\r\n                if (!matchedToken) {\r\n                    let lookAheadLexeme = lexeme;\r\n                    let lookAhead = 0;\r\n                    const maxLookAhead = 2;\r\n                    for (let li = 0; li < maxLookAhead; ++li) {\r\n                        lookAheadLexeme += this._peekAhead(li);\r\n                        matchedToken = this._findToken(lookAheadLexeme);\r\n                        if (matchedToken) {\r\n                            lookAhead = li;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (!matchedToken) {\r\n                        if (!matchToken)\r\n                            return false;\r\n                        this._current--;\r\n                        this._addToken(matchToken);\r\n                        return true;\r\n                    }\r\n\r\n                    lexeme = lookAheadLexeme;\r\n                    this._current += lookAhead + 1;\r\n                }\r\n\r\n                matchToken = matchedToken;\r\n\r\n                if (this._isAtEnd())\r\n                    break;\r\n\r\n                lexeme += this._advance();\r\n            }\r\n\r\n            // We got to the end of the input stream. Then the token we've ready so far is it.\r\n            if (matchToken === null)\r\n                return false;\r\n\r\n            this._addToken(matchToken);\r\n            return true;\r\n        }\r\n\r\n        _findToken(lexeme) {\r\n            for (const name in Keyword) {\r\n                const token = Keyword[name];\r\n                if (this._match(lexeme, token.rule)) {\r\n                    return token;\r\n                }\r\n            }\r\n            for (const name in Token.Tokens) {\r\n                const token = Token.Tokens[name];\r\n                if (this._match(lexeme, token.rule)) {\r\n                    return token;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        _match(lexeme, rule) {\r\n            if (typeof (rule) == \"string\") {\r\n                if (rule == lexeme) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                // regex\r\n                const match = rule.exec(lexeme);\r\n                if (match && match.index == 0 && match[0] == lexeme)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        _isAtEnd() {\r\n            return this._current >= this._source.length;\r\n        }\r\n\r\n        _isWhitespace(c) {\r\n            return c == \" \" || c == \"\\t\" || c == \"\\r\";\r\n        }\r\n\r\n        _advance(amount) {\r\n            let c = this._source[this._current];\r\n            amount = amount || 0;\r\n            amount++;\r\n            this._current += amount;\r\n            return c;\r\n        }\r\n\r\n        _peekAhead(offset) {\r\n            offset = offset || 0;\r\n            if (this._current + offset >= this._source.length) return \"\\0\";\r\n            return this._source[this._current + offset];\r\n        }\r\n\r\n        _addToken(type) {\r\n            const text = this._source.substring(this._start, this._current);\r\n            this._tokens.push(new Token(type, text, this._line));\r\n        }\r\n    }\r\n\r\n    Token.WgslTokens = {\r\n        decimal_float_literal:\r\n            /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)/,\r\n        hex_float_literal:\r\n            /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/,\r\n        int_literal:\r\n            /-?0x[0-9a-fA-F]+|0|-?[1-9][0-9]*/,\r\n        uint_literal:\r\n            /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/,\r\n        ident:\r\n            /[a-zA-Z][0-9a-zA-Z_]*/,\r\n        and:\r\n            '&',\r\n        and_and:\r\n            '&&',\r\n        arrow:\r\n            '->',\r\n        attr:\r\n            '@',\r\n        attr_left:\r\n            '[[',\r\n        attr_right:\r\n            ']]',\r\n        forward_slash:\r\n            '/',\r\n        bang:\r\n            '!',\r\n        bracket_left:\r\n            '[',\r\n        bracket_right:\r\n            ']',\r\n        brace_left:\r\n            '{',\r\n        brace_right:\r\n            '}',\r\n        colon:\r\n            ':',\r\n        comma:\r\n            ',',\r\n        equal:\r\n            '=',\r\n        equal_equal:\r\n            '==',\r\n        not_equal:\r\n            '!=',\r\n        greater_than:\r\n            '>',\r\n        greater_than_equal:\r\n            '>=',\r\n        shift_right:\r\n            '>>',\r\n        less_than:\r\n            '<',\r\n        less_than_equal:\r\n            '<=',\r\n        shift_left:\r\n            '<<',\r\n        modulo:\r\n            '%',\r\n        minus:\r\n            '-',\r\n        minus_minus:\r\n            '--',\r\n        period:\r\n            '.',\r\n        plus:\r\n            '+',\r\n        plus_plus:\r\n            '++',\r\n        or:\r\n            '|',\r\n        or_or:\r\n            '||',\r\n        paren_left:\r\n            '(',\r\n        paren_right:\r\n            ')',\r\n        semicolon:\r\n            ';',\r\n        star:\r\n            '*',\r\n        tilde:\r\n            '~',\r\n        underscore:\r\n            '_',\r\n        xor:\r\n            '^',\r\n\r\n        plus_equal:\r\n            '+=',\r\n        minus_equal:\r\n            '-=',\r\n        times_equal:\r\n            '*=',\r\n        division_equal:\r\n            '/=',\r\n        modulo_equal:\r\n            '%=',\r\n        and_equal:\r\n            '&=',\r\n        or_equal:\r\n            '|=',\r\n        xor_equal:\r\n            '^=',\r\n        shift_right_equal:\r\n            '>>=',\r\n        shift_left_equal:\r\n            '<<=',\r\n    };\r\n\r\n    Token.WgslKeywords = [\r\n        \"array\",\r\n        \"atomic\",\r\n        \"bool\",\r\n        \"f32\",\r\n        \"i32\",\r\n        \"mat2x2\",\r\n        \"mat2x3\",\r\n        \"mat2x4\",\r\n        \"mat3x2\",\r\n        \"mat3x3\",\r\n        \"mat3x4\",\r\n        \"mat4x2\",\r\n        \"mat4x3\",\r\n        \"mat4x4\",\r\n        \"ptr\",\r\n        \"sampler\",\r\n        \"sampler_comparison\",\r\n        \"struct\",\r\n        \"texture_1d\",\r\n        \"texture_2d\",\r\n        \"texture_2d_array\",\r\n        \"texture_3d\",\r\n        \"texture_cube\",\r\n        \"texture_cube_array\",\r\n        \"texture_multisampled_2d\",\r\n        \"texture_storage_1d\",\r\n        \"texture_storage_2d\",\r\n        \"texture_storage_2d_array\",\r\n        \"texture_storage_3d\",\r\n        \"texture_depth_2d\",\r\n        \"texture_depth_2d_array\",\r\n        \"texture_depth_cube\",\r\n        \"texture_depth_cube_array\",\r\n        \"texture_depth_multisampled_2d\",\r\n        \"u32\",\r\n        \"vec2\",\r\n        \"vec3\",\r\n        \"vec4\",\r\n        \"bitcast\",\r\n        \"block\",\r\n        \"break\",\r\n        \"case\",\r\n        \"continue\",\r\n        \"continuing\",\r\n        \"default\",\r\n        \"discard\",\r\n        \"else\",\r\n        \"elseif\",\r\n        \"enable\",\r\n        \"fallthrough\",\r\n        \"false\",\r\n        \"fn\",\r\n        \"for\",\r\n        \"function\",\r\n        \"if\",\r\n        \"let\",\r\n        \"const\",\r\n        \"loop\",\r\n        \"while\",\r\n        \"private\",\r\n        \"read\",\r\n        \"read_write\",\r\n        \"return\",\r\n        \"storage\",\r\n        \"switch\",\r\n        \"true\",\r\n        \"type\",\r\n        \"uniform\",\r\n        \"var\",\r\n        \"workgroup\",\r\n        \"write\",\r\n        \"r8unorm\",\r\n        \"r8snorm\",\r\n        \"r8uint\",\r\n        \"r8sint\",\r\n        \"r16uint\",\r\n        \"r16sint\",\r\n        \"r16float\",\r\n        \"rg8unorm\",\r\n        \"rg8snorm\",\r\n        \"rg8uint\",\r\n        \"rg8sint\",\r\n        \"r32uint\",\r\n        \"r32sint\",\r\n        \"r32float\",\r\n        \"rg16uint\",\r\n        \"rg16sint\",\r\n        \"rg16float\",\r\n        \"rgba8unorm\",\r\n        \"rgba8unorm_srgb\",\r\n        \"rgba8snorm\",\r\n        \"rgba8uint\",\r\n        \"rgba8sint\",\r\n        \"bgra8unorm\",\r\n        \"bgra8unorm_srgb\",\r\n        \"rgb10a2unorm\",\r\n        \"rg11b10float\",\r\n        \"rg32uint\",\r\n        \"rg32sint\",\r\n        \"rg32float\",\r\n        \"rgba16uint\",\r\n        \"rgba16sint\",\r\n        \"rgba16float\",\r\n        \"rgba32uint\",\r\n        \"rgba32sint\",\r\n        \"rgba32float\",\r\n        \"static_assert\"\r\n    ];\r\n\r\n    Token.WgslReserved = [\r\n        \"asm\",\r\n        \"bf16\",\r\n        \"do\",\r\n        \"enum\",\r\n        \"f16\",\r\n        \"f64\",\r\n        \"handle\",\r\n        \"i8\",\r\n        \"i16\",\r\n        \"i64\",\r\n        \"mat\",\r\n        \"premerge\",\r\n        \"regardless\",\r\n        \"typedef\",\r\n        \"u8\",\r\n        \"u16\",\r\n        \"u64\",\r\n        \"unless\",\r\n        \"using\",\r\n        \"vec\",\r\n        \"void\"\r\n    ];\r\n\r\n    function _InitTokens() {\r\n        Token.Tokens = {};\r\n        for (let token in Token.WgslTokens) {\r\n            Token.Tokens[token] = {\r\n                name: token,\r\n                type: \"token\",\r\n                rule: Token.WgslTokens[token],\r\n                toString: function () { return token; }\r\n            };\r\n            Token[token] = Token.Tokens[token];\r\n        }\r\n\r\n        for (let i = 0, l = Token.WgslKeywords.length; i < l; ++i) {\r\n            Keyword[Token.WgslKeywords[i]] = {\r\n                name: Token.WgslKeywords[i],\r\n                type: \"keyword\",\r\n                rule: Token.WgslKeywords[i],\r\n                toString: function () { return Token.WgslKeywords[i]; }\r\n            };\r\n        }\r\n\r\n        for (let i = 0, l = Token.WgslReserved.length; i < l; ++i) {\r\n            Keyword[Token.WgslReserved[i]] = {\r\n                name: Token.WgslReserved[i],\r\n                type: \"reserved\",\r\n                rule: Token.WgslReserved[i],\r\n                toString: function () { return Token.WgslReserved[i]; }\r\n            };\r\n        }\r\n\r\n        // WGSL grammar has a few keywords that have different token names than the strings they\r\n        // represent. Aliasing them here.\r\n\r\n        Keyword.int32 = Keyword.i32;\r\n        Keyword.uint32 = Keyword.u32;\r\n        Keyword.float32 = Keyword.f32;\r\n        Keyword.pointer = Keyword.ptr;\r\n\r\n        // The grammar has a few rules where the rule can match to any one of a given set of keywords\r\n        // or tokens. Defining those here.\r\n\r\n        Token.storage_class = [\r\n            Keyword.function,\r\n            Keyword.private,\r\n            Keyword.workgroup,\r\n            Keyword.uniform,\r\n            Keyword.storage\r\n        ];\r\n\r\n        Token.access_mode = [\r\n            Keyword.read,\r\n            Keyword.write,\r\n            Keyword.read_write\r\n        ];\r\n\r\n        Token.sampler_type = [\r\n            Keyword.sampler,\r\n            Keyword.sampler_comparison\r\n        ];\r\n\r\n        Token.sampled_texture_type = [\r\n            Keyword.texture_1d,\r\n            Keyword.texture_2d,\r\n            Keyword.texture_2d_array,\r\n            Keyword.texture_3d,\r\n            Keyword.texture_cube,\r\n            Keyword.texture_cube_array\r\n        ];\r\n\r\n        Token.multisampled_texture_type = [\r\n            Keyword.texture_multisampled_2d\r\n        ];\r\n\r\n        Token.storage_texture_type = [\r\n            Keyword.texture_storage_1d,\r\n            Keyword.texture_storage_2d,\r\n            Keyword.texture_storage_2d_array,\r\n            Keyword.texture_storage_3d\r\n        ];\r\n\r\n        Token.depth_texture_type = [\r\n            Keyword.texture_depth_2d,\r\n            Keyword.texture_depth_2d_array,\r\n            Keyword.texture_depth_cube,\r\n            Keyword.texture_depth_cube_array,\r\n            Keyword.texture_depth_multisampled_2d\r\n        ];\r\n\r\n        Token.any_texture_type = [\r\n            ...Token.sampled_texture_type,\r\n            ...Token.multisampled_texture_type,\r\n            ...Token.storage_texture_type,\r\n            ...Token.depth_texture_type\r\n        ];\r\n\r\n        Token.texel_format = [\r\n            Keyword.r8unorm,\r\n            Keyword.r8snorm,\r\n            Keyword.r8uint,\r\n            Keyword.r8sint,\r\n            Keyword.r16uint,\r\n            Keyword.r16sint,\r\n            Keyword.r16float,\r\n            Keyword.rg8unorm,\r\n            Keyword.rg8snorm,\r\n            Keyword.rg8uint,\r\n            Keyword.rg8sint,\r\n            Keyword.r32uint,\r\n            Keyword.r32sint,\r\n            Keyword.r32float,\r\n            Keyword.rg16uint,\r\n            Keyword.rg16sint,\r\n            Keyword.rg16float,\r\n            Keyword.rgba8unorm,\r\n            Keyword.rgba8unorm_srgb,\r\n            Keyword.rgba8snorm,\r\n            Keyword.rgba8uint,\r\n            Keyword.rgba8sint,\r\n            Keyword.bgra8unorm,\r\n            Keyword.bgra8unorm_srgb,\r\n            Keyword.rgb10a2unorm,\r\n            Keyword.rg11b10float,\r\n            Keyword.rg32uint,\r\n            Keyword.rg32sint,\r\n            Keyword.rg32float,\r\n            Keyword.rgba16uint,\r\n            Keyword.rgba16sint,\r\n            Keyword.rgba16float,\r\n            Keyword.rgba32uint,\r\n            Keyword.rgba32sint,\r\n            Keyword.rgba32float\r\n        ];\r\n\r\n        Token.const_literal = [\r\n            Token.int_literal,\r\n            Token.uint_literal,\r\n            Token.decimal_float_literal,\r\n            Token.hex_float_literal,\r\n            Keyword.true,\r\n            Keyword.false\r\n        ];\r\n\r\n        Token.literal_or_ident = [\r\n            Token.ident,\r\n            Token.int_literal,\r\n            Token.uint_literal,\r\n            Token.decimal_float_literal,\r\n            Token.hex_float_literal,\r\n        ];\r\n\r\n        Token.element_count_expression = [\r\n            Token.int_literal,\r\n            Token.uint_literal,\r\n            Token.ident\r\n        ];\r\n\r\n        Token.template_types = [\r\n            Keyword.vec2,\r\n            Keyword.vec3,\r\n            Keyword.vec4,\r\n            Keyword.mat2x2,\r\n            Keyword.mat2x3,\r\n            Keyword.mat2x4,\r\n            Keyword.mat3x2,\r\n            Keyword.mat3x3,\r\n            Keyword.mat3x4,\r\n            Keyword.mat4x2,\r\n            Keyword.mat4x3,\r\n            Keyword.mat4x4,\r\n            Keyword.atomic,\r\n\r\n            Keyword.bitcast,\r\n\r\n            ...Token.any_texture_type,\r\n        ];\r\n\r\n        // The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\r\n        // The attribute grammar should be ident | block.\r\n        Token.attribute_name = [\r\n            Token.ident,\r\n            Keyword.block,\r\n        ];\r\n\r\n        Token.assignment_operators = [\r\n            Token.equal,\r\n            Token.plus_equal,\r\n            Token.minus_equal,\r\n            Token.times_equal,\r\n            Token.division_equal,\r\n            Token.modulo_equal,\r\n            Token.and_equal,\r\n            Token.or_equal,\r\n            Token.xor_equal,\r\n            Token.shift_right_equal,\r\n            Token.shift_left_equal\r\n        ];\r\n\r\n        Token.increment_operators = [\r\n            Token.plus_plus,\r\n            Token.minus_minus\r\n        ];\r\n    }\r\n    _InitTokens();\r\n\r\n    /**\r\n     * @author Brendan Duncan / https://github.com/brendan-duncan\r\n     */\r\n\r\n    class AST {\r\n        constructor(type, options) {\r\n            this._type = type;\r\n            if (options) {\r\n                for (let option in options) {\r\n                    this[option] = options[option];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    class WgslParser {\r\n        constructor() {\r\n            this._tokens = [];\r\n            this._current = 0;\r\n        }\r\n\r\n        parse(tokensOrCode) {\r\n            this._initialize(tokensOrCode);\r\n\r\n            let statements = [];\r\n            while (!this._isAtEnd()) {\r\n                const statement = this._global_decl_or_directive();\r\n                if (!statement)\r\n                    break;\r\n                statements.push(statement);\r\n            }\r\n            return statements;\r\n        }\r\n\r\n        _initialize(tokensOrCode) {\r\n            if (tokensOrCode) {\r\n                if (typeof (tokensOrCode) == \"string\") {\r\n                    const scanner = new WgslScanner(tokensOrCode);\r\n                    this._tokens = scanner.scanTokens();\r\n                } else {\r\n                    this._tokens = tokensOrCode;\r\n                }\r\n            } else {\r\n                this._tokens = [];\r\n            }\r\n            this._current = 0;\r\n        }\r\n\r\n        _error(token, message) {\r\n            console.error(token, message);\r\n            return { token, message, toString: function () { return `${message}`; } };\r\n        }\r\n\r\n        _isAtEnd() { return this._current >= this._tokens.length || this._peek()._type == Token.EOF; }\r\n\r\n        _match(types) {\r\n            if (types.length === undefined) {\r\n                if (this._check(types)) {\r\n                    this._advance();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            for (let i = 0, l = types.length; i < l; ++i) {\r\n                const type = types[i];\r\n                if (this._check(type)) {\r\n                    this._advance();\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        _consume(types, message) {\r\n            if (this._check(types)) return this._advance();\r\n            throw this._error(this._peek(), message);\r\n        }\r\n\r\n        _check(types) {\r\n            if (this._isAtEnd()) return false;\r\n            if (types.length !== undefined) {\r\n                let t = this._peek()._type;\r\n                return types.indexOf(t) != -1;\r\n            }\r\n            return this._peek()._type == types;\r\n        }\r\n\r\n        _advance() {\r\n            if (!this._isAtEnd()) this._current++;\r\n            return this._previous();\r\n        }\r\n\r\n        _peek() {\r\n            return this._tokens[this._current];\r\n        }\r\n\r\n        _previous() {\r\n            return this._tokens[this._current - 1];\r\n        }\r\n\r\n        _global_decl_or_directive() {\r\n            // semicolon\r\n            // global_variable_decl semicolon\r\n            // global_constant_decl semicolon\r\n            // type_alias semicolon\r\n            // struct_decl\r\n            // function_decl\r\n            // enable_directive\r\n\r\n            // Ignore any stand-alone semicolons\r\n            while (this._match(Token.semicolon) && !this._isAtEnd());\r\n\r\n            if (this._match(Keyword.type)) {\r\n                const type = this._type_alias();\r\n                this._consume(Token.semicolon, \"Expected ';'\");\r\n                return type;\r\n            }\r\n\r\n            if (this._match(Keyword.enable)) {\r\n                const enable = this._enable_directive();\r\n                this._consume(Token.semicolon, \"Expected ';'\");\r\n                return enable;\r\n            }\r\n\r\n            // The following statements have an optional attribute*\r\n            const attrs = this._attribute();\r\n\r\n            if (this._check(Keyword.var)) {\r\n                const _var = this._global_variable_decl();\r\n                _var.attributes = attrs;\r\n                this._consume(Token.semicolon, \"Expected ';'.\");\r\n                return _var;\r\n            }\r\n\r\n            if (this._check(Keyword.let) || this._check(Keyword.const)) {\r\n                const _let = this._global_constant_decl();\r\n                _let.attributes = attrs;\r\n                this._consume(Token.semicolon, \"Expected ';'.\");\r\n                return _let;\r\n            }\r\n\r\n            if (this._check(Keyword.struct)) {\r\n                const _struct = this._struct_decl();\r\n                _struct.attributes = attrs;\r\n                return _struct;\r\n            }\r\n\r\n            if (this._check(Keyword.fn)) {\r\n                const _fn = this._function_decl();\r\n                _fn.attributes = attrs;\r\n                return _fn;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        _function_decl() {\r\n            // attribute* function_header compound_statement\r\n            // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\r\n            if (!this._match(Keyword.fn))\r\n                return null;\r\n\r\n            const name = this._consume(Token.ident, \"Expected function name.\").toString();\r\n\r\n            this._consume(Token.paren_left, \"Expected '(' for function arguments.\");\r\n\r\n            const args = [];\r\n            if (!this._check(Token.paren_right)) {\r\n                do {\r\n                    if (this._check(Token.paren_right))\r\n                        break;\r\n                    const argAttrs = this._attribute();\r\n\r\n                    const name = this._consume(Token.ident, \"Expected argument name.\").toString();\r\n\r\n                    this._consume(Token.colon, \"Expected ':' for argument type.\");\r\n\r\n                    const typeAttrs = this._attribute();\r\n                    const type = this._type_decl();\r\n                    type.attributes = typeAttrs;\r\n\r\n                    args.push(new AST(\"arg\", { name, attributes: argAttrs, type }));\r\n                } while (this._match(Token.comma));\r\n            }\r\n\r\n            this._consume(Token.paren_right, \"Expected ')' after function arguments.\");\r\n\r\n            let _return = null;\r\n            if (this._match(Token.arrow)) {\r\n                const attrs = this._attribute();\r\n                _return = this._type_decl();\r\n                _return.attributes = attrs;\r\n            }\r\n\r\n            const body = this._compound_statement();\r\n\r\n            return new AST(\"function\", { name, args, return: _return, body });\r\n        }\r\n\r\n        _compound_statement() {\r\n            // brace_left statement* brace_right\r\n            const statements = [];\r\n            this._consume(Token.brace_left, \"Expected '{' for block.\");\r\n            while (!this._check(Token.brace_right)) {\r\n                const statement = this._statement();\r\n                if (statement)\r\n                    statements.push(statement);\r\n            }\r\n            this._consume(Token.brace_right, \"Expected '}' for block.\");\r\n\r\n            return statements;\r\n        }\r\n\r\n        _statement() {\r\n            // semicolon\r\n            // return_statement semicolon\r\n            // if_statement\r\n            // switch_statement\r\n            // loop_statement\r\n            // for_statement\r\n            // func_call_statement semicolon\r\n            // variable_statement semicolon\r\n            // break_statement semicolon\r\n            // continue_statement semicolon\r\n            // discard semicolon\r\n            // assignment_statement semicolon\r\n            // compound_statement\r\n            // increment_statement semicolon\r\n            // decrement_statement semicolon\r\n            // static_assert_statement semicolon\r\n\r\n            // Ignore any stand-alone semicolons\r\n            while (this._match(Token.semicolon) && !this._isAtEnd());\r\n\r\n            if (this._check(Keyword.if))\r\n                return this._if_statement();\r\n\r\n            if (this._check(Keyword.switch))\r\n                return this._switch_statement();\r\n\r\n            if (this._check(Keyword.loop))\r\n                return this._loop_statement();\r\n\r\n            if (this._check(Keyword.for))\r\n                return this._for_statement();\r\n\r\n            if (this._check(Keyword.while))\r\n                return this._while_statement();\r\n\r\n            if (this._check(Keyword.static_assert))\r\n                return this._static_assert_statement();\r\n\r\n            if (this._check(Token.brace_left))\r\n                return this._compound_statement();\r\n\r\n            let result = null;\r\n            if (this._check(Keyword.return))\r\n                result = this._return_statement();\r\n            else if (this._check([Keyword.var, Keyword.let, Keyword.const]))\r\n                result = this._variable_statement();\r\n            else if (this._match(Keyword.discard))\r\n                result = new AST(\"discard\");\r\n            else if (this._match(Keyword.break))\r\n                result = new AST(\"break\");\r\n            else if (this._match(Keyword.continue))\r\n                result = new AST(\"continue\");\r\n            else\r\n                result = this._increment_decrement_statement() || this._func_call_statement() || this._assignment_statement();\r\n\r\n            if (result != null)\r\n                this._consume(Token.semicolon, \"Expected ';' after statement.\");\r\n\r\n            return result;\r\n        }\r\n\r\n        _static_assert_statement() {\r\n            if (!this._match(Keyword.static_assert))\r\n                return null;\r\n            let expression = this._optional_paren_expression();\r\n            return new AST(\"static_assert\", { expression });\r\n        }\r\n\r\n        _while_statement() {\r\n            if (!this._match(Keyword.while))\r\n                return null;\r\n            let condition = this._optional_paren_expression();\r\n            const block = this._compound_statement();\r\n            return new AST(\"while\", { condition, block });\r\n        }\r\n\r\n        _for_statement() {\r\n            // for paren_left for_header paren_right compound_statement\r\n            if (!this._match(Keyword.for))\r\n                return null;\r\n\r\n            this._consume(Token.paren_left, \"Expected '('.\");\r\n\r\n            // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\r\n            const init = !this._check(Token.semicolon) ? this._for_init() : null;\r\n            this._consume(Token.semicolon, \"Expected ';'.\");\r\n            const condition = !this._check(Token.semicolon) ? this._short_circuit_or_expression() : null;\r\n            this._consume(Token.semicolon, \"Expected ';'.\");\r\n            const increment = !this._check(Token.paren_right) ? this._for_increment() : null;\r\n\r\n            this._consume(Token.paren_right, \"Expected ')'.\");\r\n\r\n            const body = this._compound_statement();\r\n\r\n            return new AST(\"for\", { init, condition, increment, body });\r\n        }\r\n\r\n        _for_init() {\r\n            // (variable_statement assignment_statement func_call_statement)?\r\n            return this._variable_statement() || this._func_call_statement() || this._assignment_statement();\r\n        }\r\n\r\n        _for_increment() {\r\n            // (assignment_statement func_call_statement)?\r\n            return this._increment_decrement_statement() || this._func_call_statement() || this._assignment_statement();\r\n        }\r\n\r\n        _variable_statement() {\r\n            // variable_decl\r\n            // variable_decl equal short_circuit_or_expression\r\n            // let (ident variable_ident_decl) equal short_circuit_or_expression\r\n            // const (ident variable_ident_decl) equal short_circuit_or_expression\r\n            if (this._check(Keyword.var)) {\r\n                const _var = this._variable_decl();\r\n                let value = null;\r\n                if (this._match(Token.equal))\r\n                    value = this._short_circuit_or_expression();\r\n\r\n                return new AST(\"var\", { var: _var, value });\r\n            }\r\n\r\n            if (this._match(Keyword.let)) {\r\n                const name = this._consume(Token.ident, \"Expected name for let.\").toString();\r\n                let type = null;\r\n                if (this._match(Token.colon)) {\r\n                    const typeAttrs = this._attribute();\r\n                    type = this._type_decl();\r\n                    type.attributes = typeAttrs;\r\n                }\r\n                this._consume(Token.equal, \"Expected '=' for let.\");\r\n                const value = this._short_circuit_or_expression();\r\n                return new AST(\"let\", { name, type, value });\r\n            }\r\n\r\n            if (this._match(Keyword.const)) {\r\n                const name = this._consume(Token.ident, \"Expected name for const.\").toString();\r\n                let type = null;\r\n                if (this._match(Token.colon)) {\r\n                    const typeAttrs = this._attribute();\r\n                    type = this._type_decl();\r\n                    type.attributes = typeAttrs;\r\n                }\r\n                this._consume(Token.equal, \"Expected '=' for const.\");\r\n                const value = this._short_circuit_or_expression();\r\n                return new AST(\"const\", { name, type, value });\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        _increment_decrement_statement() {\r\n            const savedPos = this._current;\r\n\r\n            const _var = this._unary_expression();\r\n            if (_var == null)\r\n                return null;\r\n\r\n            if (!this._check(Token.increment_operators)) {\r\n                this._current = savedPos;\r\n                return null;\r\n            }\r\n\r\n            const type = this._consume(Token.increment_operators, \"Expected increment operator\");\r\n\r\n            return new AST(\"increment\", { type, var: _var });\r\n        }\r\n\r\n        _assignment_statement() {\r\n            // (unary_expression underscore) equal short_circuit_or_expression\r\n            let _var = null;\r\n\r\n            if (this._check(Token.brace_right))\r\n                return null;\r\n\r\n            let isUnderscore = this._match(Token.underscore);\r\n            if (!isUnderscore)\r\n                _var = this._unary_expression();\r\n\r\n            if (!isUnderscore && _var == null)\r\n                return null;\r\n\r\n            const type = this._consume(Token.assignment_operators, \"Expected assignment operator.\");\r\n\r\n            const value = this._short_circuit_or_expression();\r\n\r\n            return new AST(\"assign\", { type, var: _var, value });\r\n        }\r\n\r\n        _func_call_statement() {\r\n            // ident argument_expression_list\r\n            if (!this._check(Token.ident))\r\n                return null;\r\n\r\n            const savedPos = this._current;\r\n            const name = this._consume(Token.ident, \"Expected function name.\");\r\n            const args = this._argument_expression_list();\r\n\r\n            if (args === null) {\r\n                this._current = savedPos;\r\n                return null;\r\n            }\r\n\r\n            return new AST(\"call\", { name, args });\r\n        }\r\n\r\n        _loop_statement() {\r\n            // loop brace_left statement* continuing_statement? brace_right\r\n            if (!this._match(Keyword.loop))\r\n                return null;\r\n\r\n            this._consume(Token.brace_left, \"Expected '{' for loop.\");\r\n\r\n            // statement*\r\n            const statements = [];\r\n            let statement = this._statement();\r\n            while (statement !== null) {\r\n                statements.push(statement);\r\n                statement = this._statement();\r\n            }\r\n\r\n            // continuing_statement: continuing compound_statement\r\n            let continuing = null;\r\n            if (this._match(Keyword.continuing))\r\n                continuing = this._compound_statement();\r\n\r\n            this._consume(Token.brace_right, \"Expected '}' for loop.\");\r\n\r\n            return new AST(\"loop\", { statements, continuing });\r\n        }\r\n\r\n        _switch_statement() {\r\n            // switch optional_paren_expression brace_left switch_body+ brace_right\r\n            if (!this._match(Keyword.switch))\r\n                return null;\r\n\r\n            const condition = this._optional_paren_expression();\r\n            this._consume(Token.brace_left);\r\n            const body = this._switch_body();\r\n            if (body == null || body.length == 0)\r\n                throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\r\n            this._consume(Token.brace_right);\r\n            return new AST(\"switch\", { condition, body });\r\n        }\r\n\r\n        _switch_body() {\r\n            // case case_selectors colon brace_left case_body? brace_right\r\n            // default colon brace_left case_body? brace_right\r\n            const cases = [];\r\n            if (this._match(Keyword.case)) {\r\n                this._consume(Keyword.case);\r\n                const selector = this._case_selectors();\r\n                this._consume(Token.colon, \"Exected ':' for switch case.\");\r\n                this._consume(Token.brace_left, \"Exected '{' for switch case.\");\r\n                const body = this._case_body();\r\n                this._consume(Token.brace_right, \"Exected '}' for switch case.\");\r\n                cases.push(new AST(\"case\", { selector, body }));\r\n            }\r\n\r\n            if (this._match(Keyword.default)) {\r\n                this._consume(Token.colon, \"Exected ':' for switch default.\");\r\n                this._consume(Token.brace_left, \"Exected '{' for switch default.\");\r\n                const body = this._case_body();\r\n                this._consume(Token.brace_right, \"Exected '}' for switch default.\");\r\n                cases.push(new AST(\"default\", { body }));\r\n            }\r\n\r\n            if (this._check([Keyword.default, Keyword.case])) {\r\n                const _cases = this._switch_body();\r\n                cases.push(_cases[0]);\r\n            }\r\n\r\n            return cases;\r\n        }\r\n\r\n        _case_selectors() {\r\n            // const_literal (comma const_literal)* comma?\r\n            const selectors = [this._consume(Token.const_literal, \"Expected constant literal\").toString()];\r\n            while (this._match(Token.comma)) {\r\n                selectors.push(this._consume(Token.const_literal, \"Expected constant literal\").toString());\r\n            }\r\n            return selectors;\r\n        }\r\n\r\n        _case_body() {\r\n            // statement case_body?\r\n            // fallthrough semicolon\r\n            if (this._match(Keyword.fallthrough)) {\r\n                this._consume(Token.semicolon);\r\n                return [];\r\n            }\r\n\r\n            const statement = this._statement();\r\n            if (statement == null)\r\n                return [];\r\n\r\n            const nextStatement = this._case_body();\r\n            if (nextStatement.length == 0)\r\n                return [statement];\r\n\r\n            return [statement, nextStatement[0]];\r\n        }\r\n\r\n        _if_statement() {\r\n            // if optional_paren_expression compound_statement elseif_statement? else_statement?\r\n            if (!this._match(Keyword.if))\r\n                return null;\r\n\r\n            const condition = this._optional_paren_expression();\r\n            const block = this._compound_statement();\r\n\r\n            let elseif = null;\r\n            if (this._match(Keyword.elseif))\r\n                elseif = this._elseif_statement();\r\n\r\n            let _else = null;\r\n            if (this._match(Keyword.else))\r\n                _else = this._compound_statement();\r\n\r\n            return new AST(\"if\", { condition, block, elseif, else: _else });\r\n        }\r\n\r\n        _elseif_statement() {\r\n            // else_if optional_paren_expression compound_statement elseif_statement?\r\n            const elseif = [];\r\n            const condition = this._optional_paren_expression();\r\n            const block = this._compound_statement();\r\n            elseif.push(new AST(\"elseif\", { condition, block }));\r\n            if (this._match(Keyword.elseif))\r\n                elseif.push(this._elseif_statement()[0]);\r\n            return elseif;\r\n        }\r\n\r\n        _return_statement() {\r\n            // return short_circuit_or_expression?\r\n            if (!this._match(Keyword.return))\r\n                return null;\r\n            const value = this._short_circuit_or_expression();\r\n            return new AST(\"return\", { value: value });\r\n        }\r\n\r\n        _short_circuit_or_expression() {\r\n            // short_circuit_and_expression\r\n            // short_circuit_or_expression or_or short_circuit_and_expression\r\n            let expr = this._short_circuit_and_expr();\r\n            while (this._match(Token.or_or)) {\r\n                expr = new AST(\"compareOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._short_circuit_and_expr()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _short_circuit_and_expr() {\r\n            // inclusive_or_expression\r\n            // short_circuit_and_expression and_and inclusive_or_expression\r\n            let expr = this._inclusive_or_expression();\r\n            while (this._match(Token.and_and)) {\r\n                expr = new AST(\"compareOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._inclusive_or_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _inclusive_or_expression() {\r\n            // exclusive_or_expression\r\n            // inclusive_or_expression or exclusive_or_expression\r\n            let expr = this._exclusive_or_expression();\r\n            while (this._match(Token.or)) {\r\n                expr = new AST(\"binaryOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._exclusive_or_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _exclusive_or_expression() {\r\n            // and_expression\r\n            // exclusive_or_expression xor and_expression\r\n            let expr = this._and_expression();\r\n            while (this._match(Token.xor)) {\r\n                expr = new AST(\"binaryOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._and_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _and_expression() {\r\n            // equality_expression\r\n            // and_expression and equality_expression\r\n            let expr = this._equality_expression();\r\n            while (this._match(Token.and)) {\r\n                expr = new AST(\"binaryOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._equality_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _equality_expression() {\r\n            // relational_expression\r\n            // relational_expression equal_equal relational_expression\r\n            // relational_expression not_equal relational_expression\r\n            const expr = this._relational_expression();\r\n            if (this._match([Token.equal_equal, Token.not_equal])) {\r\n                return new AST(\"compareOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._relational_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _relational_expression() {\r\n            // shift_expression\r\n            // relational_expression less_than shift_expression\r\n            // relational_expression greater_than shift_expression\r\n            // relational_expression less_than_equal shift_expression\r\n            // relational_expression greater_than_equal shift_expression\r\n            let expr = this._shift_expression();\r\n            while (this._match([Token.less_than, Token.greater_than, Token.less_than_equal,\r\n            Token.greater_than_equal])) {\r\n                expr = new AST(\"compareOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._shift_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _shift_expression() {\r\n            // additive_expression\r\n            // shift_expression shift_left additive_expression\r\n            // shift_expression shift_right additive_expression\r\n            let expr = this._additive_expression();\r\n            while (this._match([Token.shift_left, Token.shift_right])) {\r\n                expr = new AST(\"binaryOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._additive_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _additive_expression() {\r\n            // multiplicative_expression\r\n            // additive_expression plus multiplicative_expression\r\n            // additive_expression minus multiplicative_expression\r\n            let expr = this._multiplicative_expression();\r\n            while (this._match([Token.plus, Token.minus])) {\r\n                expr = new AST(\"binaryOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._multiplicative_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _multiplicative_expression() {\r\n            // unary_expression\r\n            // multiplicative_expression star unary_expression\r\n            // multiplicative_expression forward_slash unary_expression\r\n            // multiplicative_expression modulo unary_expression\r\n            let expr = this._unary_expression();\r\n            while (this._match([Token.star, Token.forward_slash, Token.modulo])) {\r\n                expr = new AST(\"binaryOp\", {\r\n                    operator: this._previous().toString(),\r\n                    left: expr,\r\n                    right: this._unary_expression()\r\n                });\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        _unary_expression() {\r\n            // singular_expression\r\n            // minus unary_expression\r\n            // bang unary_expression\r\n            // tilde unary_expression\r\n            // star unary_expression\r\n            // and unary_expression\r\n            if (this._match([Token.minus, Token.bang, Token.tilde, Token.star, Token.and])) {\r\n                return new AST(\"unaryOp\", {\r\n                    operator: this._previous().toString(), right: this._unary_expression()\r\n                });\r\n            }\r\n            return this._singular_expression();\r\n        }\r\n\r\n        _singular_expression() {\r\n            // primary_expression postfix_expression ?\r\n            const expr = this._primary_expression();\r\n            const p = this._postfix_expression();\r\n            if (p)\r\n                expr.postfix = p;\r\n            return expr;\r\n        }\r\n\r\n        _postfix_expression() {\r\n            // bracket_left short_circuit_or_expression bracket_right postfix_expression?\r\n            if (this._match(Token.bracket_left)) {\r\n                const expr = this._short_circuit_or_expression();\r\n                this._consume(Token.bracket_right, \"Expected ']'.\");\r\n                const p = this._postfix_expression();\r\n                if (p)\r\n                    expr.postfix = p;\r\n                return expr;\r\n            }\r\n\r\n            // period ident postfix_expression?\r\n            if (this._match(Token.period)) {\r\n                const name = this._consume(Token.ident, \"Expected member name.\");\r\n                const p = this._postfix_expression();\r\n                if (p)\r\n                    name.postfix = p;\r\n                return name;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        _primary_expression() {\r\n            // ident argument_expression_list?\r\n            if (this._match(Token.ident)) {\r\n                const name = this._previous().toString();\r\n                if (this._check(Token.paren_left)) {\r\n                    const args = this._argument_expression_list();\r\n                    return new AST(\"call_expr\", { name, args });\r\n                }\r\n                return new AST(\"variable_expr\", { name });\r\n            }\r\n\r\n            // const_literal\r\n            if (this._match(Token.const_literal)) {\r\n                return new AST(\"literal_expr\", { value: this._previous().toString() });\r\n            }\r\n\r\n            // paren_expression\r\n            if (this._check(Token.paren_left)) {\r\n                return this._paren_expression();\r\n            }\r\n\r\n            // bitcast less_than type_decl greater_than paren_expression\r\n            if (this._match(Keyword.bitcast)) {\r\n                this._consume(Token.less_than, \"Expected '<'.\");\r\n                const type = this._type_decl();\r\n                this._consume(Token.greater_than, \"Expected '>'.\");\r\n                const value = this._paren_expression();\r\n                return new AST(\"bitcast_expr\", { type, value });\r\n            }\r\n\r\n            // type_decl argument_expression_list\r\n            const type = this._type_decl();\r\n            const args = this._argument_expression_list();\r\n            return new AST(\"typecast_expr\", { type, args });\r\n        }\r\n\r\n        _argument_expression_list() {\r\n            // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\r\n            if (!this._match(Token.paren_left))\r\n                return null;\r\n\r\n            const args = [];\r\n            do {\r\n                if (this._check(Token.paren_right))\r\n                    break;\r\n                const arg = this._short_circuit_or_expression();\r\n                args.push(arg);\r\n            } while (this._match(Token.comma));\r\n            this._consume(Token.paren_right, \"Expected ')' for agument list\");\r\n\r\n            return args;\r\n        }\r\n\r\n        _optional_paren_expression() {\r\n            // [paren_left] short_circuit_or_expression [paren_right]\r\n            this._match(Token.paren_left);\r\n            const expr = this._short_circuit_or_expression();\r\n            this._match(Token.paren_right);\r\n            return new AST(\"grouping_expr\", { contents: expr });\r\n        }\r\n\r\n        _paren_expression() {\r\n            // paren_left short_circuit_or_expression paren_right\r\n            this._consume(Token.paren_left, \"Expected '('.\");\r\n            const expr = this._short_circuit_or_expression();\r\n            this._consume(Token.paren_right, \"Expected ')'.\");\r\n            return new AST(\"grouping_expr\", { contents: expr });\r\n        }\r\n\r\n        _struct_decl() {\r\n            // attribute* struct ident struct_body_decl\r\n            if (!this._match(Keyword.struct))\r\n                return null;\r\n\r\n            const name = this._consume(Token.ident, \"Expected name for struct.\").toString();\r\n\r\n            // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\r\n            this._consume(Token.brace_left, \"Expected '{' for struct body.\");\r\n            const members = [];\r\n            while (!this._check(Token.brace_right)) {\r\n                // struct_member: attribute* variable_ident_decl\r\n                const memberAttrs = this._attribute();\r\n\r\n                const memberName = this._consume(Token.ident, \"Expected variable name.\").toString();\r\n\r\n                this._consume(Token.colon, \"Expected ':' for struct member type.\");\r\n\r\n                const typeAttrs = this._attribute();\r\n                const memberType = this._type_decl();\r\n                memberType.attributes = typeAttrs;\r\n\r\n                if (!this._check(Token.brace_right))\r\n                    this._consume(Token.comma, \"Expected ',' for struct member.\");\r\n                else\r\n                    this._match(Token.comma); // trailing comma optional.\r\n\r\n                members.push(new AST(\"member\", {\r\n                    name: memberName,\r\n                    attributes: memberAttrs,\r\n                    type: memberType\r\n                }));\r\n            }\r\n\r\n            this._consume(Token.brace_right, \"Expected '}' after struct body.\");\r\n\r\n            return new AST(\"struct\", { name, members });\r\n        }\r\n\r\n        _global_variable_decl() {\r\n            // attribute* variable_decl (equal const_expression)?\r\n            const _var = this._variable_decl();\r\n            if (this._match(Token.equal))\r\n                _var.value = this._const_expression();\r\n            return _var;\r\n        }\r\n\r\n        _global_constant_decl() {\r\n            // attribute* let (ident variable_ident_decl) global_const_initializer?\r\n            if (!this._match(Keyword.let) && !this._match(Keyword.const))\r\n                return null;\r\n\r\n            const name = this._consume(Token.ident, \"Expected variable name\");\r\n            let type = null;\r\n            if (this._match(Token.colon)) {\r\n                const attrs = this._attribute();\r\n                type = this._type_decl();\r\n                type.attributes = attrs;\r\n            }\r\n            let value = null;\r\n            if (this._match(Token.equal)) {\r\n                value = this._const_expression();\r\n            }\r\n            return new AST(\"let\", { name: name.toString(), type, value });\r\n        }\r\n\r\n        _const_expression() {\r\n            // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\r\n            // const_literal\r\n            if (this._match(Token.const_literal))\r\n                return this._previous().toString();\r\n\r\n            const type = this._type_decl();\r\n\r\n            this._consume(Token.paren_left, \"Expected '('.\");\r\n\r\n            let args = [];\r\n            while (!this._check(Token.paren_right)) {\r\n                args.push(this._const_expression());\r\n                if (!this._check(Token.comma))\r\n                    break;\r\n                this._advance();\r\n            }\r\n\r\n            this._consume(Token.paren_right, \"Expected ')'.\");\r\n\r\n            return new AST(\"create\", { type, args });\r\n        }\r\n\r\n        _variable_decl() {\r\n            // var variable_qualifier? (ident variable_ident_decl)\r\n            if (!this._match(Keyword.var))\r\n                return null;\r\n\r\n            // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\r\n            let storage = null;\r\n            let access = null;\r\n            if (this._match(Token.less_than)) {\r\n                storage = this._consume(Token.storage_class, \"Expected storage_class.\").toString();\r\n                if (this._match(Token.comma))\r\n                    access = this._consume(Token.access_mode, \"Expected access_mode.\").toString();\r\n                this._consume(Token.greater_than, \"Expected '>'.\");\r\n            }\r\n\r\n            const name = this._consume(Token.ident, \"Expected variable name\");\r\n            let type = null;\r\n            if (this._match(Token.colon)) {\r\n                const attrs = this._attribute();\r\n                type = this._type_decl();\r\n                type.attributes = attrs;\r\n            }\r\n\r\n            return new AST(\"var\", { name: name.toString(), type, storage, access });\r\n        }\r\n\r\n        _enable_directive() {\r\n            // enable ident semicolon\r\n            const name = this._consume(Token.ident, \"identity expected.\");\r\n            return new AST(\"enable\", { name: name.toString() });\r\n        }\r\n\r\n        _type_alias() {\r\n            // type ident equal type_decl\r\n            const name = this._consume(Token.ident, \"identity expected.\");\r\n            this._consume(Token.equal, \"Expected '=' for type alias.\");\r\n            const alias = this._type_decl();\r\n            return new AST(\"alias\", { name: name.toString(), alias });\r\n        }\r\n\r\n        _type_decl() {\r\n            // ident\r\n            // bool\r\n            // float32\r\n            // int32\r\n            // uint32\r\n            // vec2 less_than type_decl greater_than\r\n            // vec3 less_than type_decl greater_than\r\n            // vec4 less_than type_decl greater_than\r\n            // mat2x2 less_than type_decl greater_than\r\n            // mat2x3 less_than type_decl greater_than\r\n            // mat2x4 less_than type_decl greater_than\r\n            // mat3x2 less_than type_decl greater_than\r\n            // mat3x3 less_than type_decl greater_than\r\n            // mat3x4 less_than type_decl greater_than\r\n            // mat4x2 less_than type_decl greater_than\r\n            // mat4x3 less_than type_decl greater_than\r\n            // mat4x4 less_than type_decl greater_than\r\n            // atomic less_than type_decl greater_than\r\n            // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n            // array_type_decl\r\n            // texture_sampler_types\r\n\r\n            if (this._check([Token.ident, ...Token.texel_format, Keyword.bool, Keyword.float32, Keyword.int32, Keyword.uint32])) {\r\n                const type = this._advance();\r\n                return new AST(\"type\", { name: type.toString() });\r\n            }\r\n\r\n            if (this._check(Token.template_types)) {\r\n                let type = this._advance().toString();\r\n                this._consume(Token.less_than, \"Expected '<' for type.\");\r\n                const format = this._type_decl();\r\n                let access = null;\r\n                if (this._match(Token.comma))\r\n                    access = this._consume(Token.access_mode, \"Expected access_mode for pointer\").toString();\r\n                this._consume(Token.greater_than, \"Expected '>' for type.\");\r\n                return new AST(type, { name: type, format, access });\r\n            }\r\n\r\n            // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n            if (this._match(Keyword.pointer)) {\r\n                let pointer = this._previous().toString();\r\n                this._consume(Token.less_than, \"Expected '<' for pointer.\");\r\n                const storage = this._consume(Token.storage_class, \"Expected storage_class for pointer\");\r\n                this._consume(Token.comma, \"Expected ',' for pointer.\");\r\n                const decl = this._type_decl();\r\n                let access = null;\r\n                if (this._match(Token.comma))\r\n                    access = this._consume(Token.access_mode, \"Expected access_mode for pointer\").toString();\r\n                this._consume(Token.greater_than, \"Expected '>' for pointer.\");\r\n                return new AST(\"pointer\", { name: pointer, storage: storage.toString(), decl, access });\r\n            }\r\n\r\n            // texture_sampler_types\r\n            let type = this._texture_sampler_types();\r\n            if (type)\r\n                return type;\r\n\r\n            // The following type_decl's have an optional attribyte_list*\r\n            const attrs = this._attribute();\r\n\r\n            // attribute* array less_than type_decl (comma element_count_expression)? greater_than\r\n            if (this._match(Keyword.array)) {\r\n                const array = this._previous();\r\n                this._consume(Token.less_than, \"Expected '<' for array type.\");\r\n                const format = this._type_decl();\r\n                let count = null;\r\n                if (this._match(Token.comma))\r\n                    count = this._consume(Token.element_count_expression, \"Expected element_count for array.\").toString();\r\n                this._consume(Token.greater_than, \"Expected '>' for array.\");\r\n\r\n                return new AST(\"array\", { name: array.toString(), attributes: attrs, format, count });\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        _texture_sampler_types() {\r\n            // sampler_type\r\n            if (this._match(Token.sampler_type))\r\n                return new AST(\"sampler\", { name: this._previous().toString() });\r\n\r\n            // depth_texture_type\r\n            if (this._match(Token.depth_texture_type))\r\n                return new AST(\"sampler\", { name: this._previous().toString() });\r\n\r\n            // sampled_texture_type less_than type_decl greater_than\r\n            // multisampled_texture_type less_than type_decl greater_than\r\n            if (this._match(Token.sampled_texture_type) ||\r\n                this._match(Token.multisampled_texture_type)) {\r\n                const sampler = this._previous();\r\n                this._consume(Token.less_than, \"Expected '<' for sampler type.\");\r\n                const format = this._type_decl();\r\n                this._consume(Token.greater_than, \"Expected '>' for sampler type.\");\r\n                return new AST(\"sampler\", { name: sampler.toString(), format });\r\n            }\r\n\r\n            // storage_texture_type less_than texel_format comma access_mode greater_than\r\n            if (this._match(Token.storage_texture_type)) {\r\n                const sampler = this._previous();\r\n                this._consume(Token.less_than, \"Expected '<' for sampler type.\");\r\n                const format = this._consume(Token.texel_format, \"Invalid texel format.\").toString();\r\n                this._consume(Token.comma, \"Expected ',' after texel format.\");\r\n                const access = this._consume(Token.access_mode, \"Expected access mode for storage texture type.\").toString();\r\n                this._consume(Token.greater_than, \"Expected '>' for sampler type.\");\r\n                return new AST(\"sampler\", { name: sampler.toString(), format, access });\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        _attribute() {\r\n            // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\r\n            // attr ident\r\n\r\n            let attributes = [];\r\n\r\n            while (this._match(Token.attr)) {\r\n                const name = this._consume(Token.attribute_name, \"Expected attribute name\");\r\n                const attr = new AST(\"attribute\", { name: name.toString() });\r\n                if (this._match(Token.paren_left)) {\r\n                    // literal_or_ident\r\n                    attr.value = this._consume(Token.literal_or_ident, \"Expected attribute value\").toString();\r\n                    if (this._check(Token.comma)) {\r\n                        this._advance();\r\n                        attr.value = [attr.value];\r\n                        do {\r\n                            const v = this._consume(Token.literal_or_ident, \"Expected attribute value\").toString();\r\n                            attr.value.push(v);\r\n                        } while (this._match(Token.comma));\r\n                    }\r\n                    this._consume(Token.paren_right, \"Expected ')'\");\r\n                }\r\n                attributes.push(attr);\r\n            }\r\n\r\n            // Deprecated:\r\n            // attr_left (attribute comma)* attribute attr_right\r\n            while (this._match(Token.attr_left)) {\r\n                if (!this._check(Token.attr_right)) {\r\n                    do {\r\n                        const name = this._consume(Token.attribute_name, \"Expected attribute name\");\r\n                        const attr = new AST(\"attribute\", { name: name.toString() });\r\n                        if (this._match(Token.paren_left)) {\r\n                            // literal_or_ident\r\n                            attr.value = this._consume(Token.literal_or_ident, \"Expected attribute value\").toString();\r\n                            if (this._check(Token.comma)) {\r\n                                this._advance();\r\n                                attr.value = [attr.value];\r\n                                do {\r\n                                    const v = this._consume(Token.literal_or_ident, \"Expected attribute value\").toString();\r\n                                    attr.value.push(v);\r\n                                } while (this._match(Token.comma));\r\n                            }\r\n                            this._consume(Token.paren_right, \"Expected ')'\");\r\n                        }\r\n                        attributes.push(attr);\r\n                    } while (this._match(Token.comma));\r\n\r\n                }\r\n                // Consume ]]\r\n                this._consume(Token.attr_right, \"Expected ']]' after attribute declarations\");\r\n            }\r\n\r\n            if (attributes.length == 0)\r\n                return null;\r\n\r\n            return attributes;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Brendan Duncan / https://github.com/brendan-duncan\r\n     */\r\n\r\n    export class WgslReflect {\r\n        functions: Array<ReflectFunction>;\r\n        structs: Array<ReflectStruct>;\r\n        constructor(code: string) {\r\n            if (code)\r\n                this.initialize(code);\r\n        }\r\n\r\n        initialize(code) {\r\n            const parser = new WgslParser();\r\n            this.ast = parser.parse(code);\r\n\r\n            // All top-level structs in the shader.\r\n            this.structs = [];\r\n            // All top-level uniform vars in the shader.\r\n            this.uniforms = [];\r\n            // All top-level storage vars in the shader.\r\n            this.storage = [];\r\n            // All top-level texture vars in the shader;\r\n            this.textures = [];\r\n            // All top-level sampler vars in the shader.\r\n            this.samplers = [];\r\n            // All top-level functions in the shader.\r\n            this.functions = [];\r\n            // All top-level type aliases in the shader.\r\n            this.aliases = [];\r\n            // All entry functions in the shader: vertex, fragment, and/or compute.\r\n            this.entry = {\r\n                vertex: [],\r\n                fragment: [],\r\n                compute: []\r\n            };\r\n\r\n            for (const node of this.ast) {\r\n                if (node._type == \"struct\")\r\n                    this.structs.push(node);\r\n\r\n                if (node._type == \"alias\")\r\n                    this.aliases.push(node);\r\n\r\n                if (this.isUniformVar(node)) {\r\n                    const group = this.getAttribute(node, \"group\");\r\n                    node.group = group && group.value ? parseInt(group.value) : 0;\r\n                    const binding = this.getAttribute(node, \"binding\");\r\n                    node.binding = binding && binding.value ? parseInt(binding.value) : 0;\r\n                    this.uniforms.push(node);\r\n                }\r\n\r\n                if (this.isStorageVar(node)) {\r\n                    const group = this.getAttribute(node, \"group\");\r\n                    node.group = group && group.value ? parseInt(group.value) : 0;\r\n                    const binding = this.getAttribute(node, \"binding\");\r\n                    node.binding = binding && binding.value ? parseInt(binding.value) : 0;\r\n                    this.storage.push(node);\r\n                }\r\n\r\n                if (this.isTextureVar(node)) {\r\n                    const group = this.getAttribute(node, \"group\");\r\n                    node.group = group && group.value ? parseInt(group.value) : 0;\r\n                    const binding = this.getAttribute(node, \"binding\");\r\n                    node.binding = binding && binding.value ? parseInt(binding.value) : 0;\r\n                    this.textures.push(node);\r\n                }\r\n\r\n                if (this.isSamplerVar(node)) {\r\n                    const group = this.getAttribute(node, \"group\");\r\n                    node.group = group && group.value ? parseInt(group.value) : 0;\r\n                    const binding = this.getAttribute(node, \"binding\");\r\n                    node.binding = binding && binding.value ? parseInt(binding.value) : 0;\r\n                    this.samplers.push(node);\r\n                }\r\n\r\n                if (node._type == \"function\") {\r\n                    this.functions.push(node);\r\n                    const vertexStage = this.getAttribute(node, \"vertex\");\r\n                    const fragmentStage = this.getAttribute(node, \"fragment\");\r\n                    const computeStage = this.getAttribute(node, \"compute\");\r\n                    const stage = vertexStage || fragmentStage || computeStage;\r\n                    if (stage) {\r\n                        node.inputs = this._getInputs(node);\r\n                        if (this.entry[stage.name])\r\n                            this.entry[stage.name].push(node);\r\n                        else\r\n                            this.entry[stage.name] = [node];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        isTextureVar(node) {\r\n            return node._type == \"var\" && WgslReflect.TextureTypes.indexOf(node.type.name) != -1;\r\n        }\r\n\r\n        isSamplerVar(node) {\r\n            return node._type == \"var\" && WgslReflect.SamplerTypes.indexOf(node.type.name) != -1;\r\n        }\r\n\r\n        isUniformVar(node) {\r\n            return node && node._type == \"var\" && node.storage == \"uniform\";\r\n        }\r\n\r\n        isStorageVar(node) {\r\n            return node && node._type == \"var\" && node.storage == \"storage\";\r\n        }\r\n\r\n        _getInputs(args, inputs) {\r\n            if (args._type == \"function\")\r\n                args = args.args;\r\n            if (!inputs)\r\n                inputs = [];\r\n\r\n            for (const arg of args) {\r\n                const input = this._getInputInfo(arg);\r\n                if (input)\r\n                    inputs.push(input);\r\n                const struct = this.getStruct(arg.type);\r\n                if (struct)\r\n                    this._getInputs(struct.members, inputs);\r\n            }\r\n\r\n            return inputs;\r\n        }\r\n\r\n        _getInputInfo(node) {\r\n            const location = this.getAttribute(node, \"location\") || this.getAttribute(node, \"builtin\");\r\n            if (location) {\r\n                let input = {\r\n                    name: node.name,\r\n                    type: node.type,\r\n                    input: node,\r\n                    locationType: location.name,\r\n                    location: this._parseInt(location.value)\r\n                };\r\n                const interpolation = this.getAttribute(node, \"interpolation\");\r\n                if (interpolation)\r\n                    input.interpolation = interpolation.value;\r\n                return input;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        _parseInt(s) {\r\n            const n = parseInt(s);\r\n            return isNaN(n) ? s : n;\r\n        }\r\n\r\n        getAlias(name) {\r\n            if (!name) return null;\r\n            if (name.constructor === AST) {\r\n                if (name._type != \"type\")\r\n                    return null;\r\n                name = name.name;\r\n            }\r\n            for (const u of this.aliases) {\r\n                if (u.name == name)\r\n                    return u.alias;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        getStruct(name) {\r\n            if (!name) return null;\r\n            if (name.constructor === AST) {\r\n                if (name._type == \"struct\")\r\n                    return name;\r\n                if (name._type != \"type\")\r\n                    return null;\r\n                name = name.name;\r\n            }\r\n            for (const u of this.structs) {\r\n                if (u.name == name)\r\n                    return u;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        getAttribute(node, name) {\r\n            if (!node || !node.attributes) return null;\r\n            for (let a of node.attributes) {\r\n                if (a.name == name)\r\n                    return a;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        getBindGroups() {\r\n            const groups = [];\r\n\r\n            function _makeRoom(group, binding) {\r\n                if (group >= groups.length)\r\n                    groups.length = group + 1;\r\n                if (groups[group] === undefined)\r\n                    groups[group] = [];\r\n\r\n                if (binding >= groups[group].length)\r\n                    groups[group].length = binding + 1;\r\n            }\r\n\r\n            for (const u of this.uniforms) {\r\n                _makeRoom(u.group, u.binding);\r\n                const group = groups[u.group];\r\n                group[u.binding] = { type: 'buffer', resource: this.getUniformBufferInfo(u) };\r\n            }\r\n\r\n            for (const u of this.storage) {\r\n                _makeRoom(u.group, u.binding);\r\n                const group = groups[u.group];\r\n                group[u.binding] = { type: 'storage', resource: this.getStorageBufferInfo(u) };\r\n            }\r\n\r\n            for (const t of this.textures) {\r\n                _makeRoom(t.group, t.binding);\r\n                const group = groups[t.group];\r\n                group[t.binding] = { type: 'texture', resource: t };\r\n            }\r\n\r\n            for (const t of this.samplers) {\r\n                _makeRoom(t.group, t.binding);\r\n                const group = groups[t.group];\r\n                group[t.binding] = { type: 'sampler', resource: t };\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        getStorageBufferInfo(node) {\r\n            if (!this.isStorageVar(node))\r\n                return null;\r\n\r\n            let group = this.getAttribute(node, \"group\");\r\n            let binding = this.getAttribute(node, \"binding\");\r\n\r\n            group = group && group.value ? parseInt(group.value) : 0;\r\n            binding = binding && binding.value ? parseInt(binding.value) : 0;\r\n\r\n            return { name: node.name, type: node.type, group, binding };\r\n        }\r\n\r\n        getUniformBufferInfo(node) {\r\n            if (!this.isUniformVar(node))\r\n                return null;\r\n\r\n            let group = this.getAttribute(node, \"group\");\r\n            let binding = this.getAttribute(node, \"binding\");\r\n\r\n            group = group && group.value ? parseInt(group.value) : 0;\r\n            binding = binding && binding.value ? parseInt(binding.value) : 0;\r\n\r\n            const struct = this.getStruct(node.type);\r\n\r\n            let offset = 0;\r\n            let lastSize = 0;\r\n            let lastOffset = 0;\r\n            let structAlign = 0;\r\n            let buffer = { name: node.name, type: 'uniform', align: 0, size: 0, members: [], group, binding };\r\n\r\n            for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\r\n                let member = struct.members[mi];\r\n                let name = member.name;\r\n\r\n                let info = this.getTypeInfo(member);\r\n                if (!info)\r\n                    continue;\r\n\r\n                let type = member.type;\r\n                let align = info.align;\r\n                let size = info.size;\r\n                offset = this._roundUp(align, offset + lastSize);\r\n                lastSize = size;\r\n                lastOffset = offset;\r\n                structAlign = Math.max(structAlign, align);\r\n\r\n                let u = { name, offset, size, type, member };\r\n                buffer.members.push(u);\r\n            }\r\n\r\n            buffer.size = this._roundUp(structAlign, lastOffset + lastSize);\r\n            buffer.align = structAlign;\r\n\r\n            return buffer;\r\n        }\r\n\r\n        getTypeInfo(type) {\r\n            let explicitSize = 0;\r\n            const sizeAttr = this.getAttribute(type, \"size\");\r\n            if (sizeAttr)\r\n                explicitSize = parseInt(sizeAttr.value);\r\n\r\n            let explicitAlign = 0;\r\n            const alignAttr = this.getAttribute(type, \"align\");\r\n            if (alignAttr)\r\n                explicitAlign = parseInt(alignAttr.value);\r\n\r\n            if (type._type == \"member\")\r\n                type = type.type;\r\n\r\n            if (type._type == \"type\") {\r\n                const alias = this.getAlias(type.name);\r\n                if (alias) {\r\n                    type = alias;\r\n                } else {\r\n                    const struct = this.getStruct(type.name);\r\n                    if (struct)\r\n                        type = struct;\r\n                }\r\n            }\r\n\r\n            const info = WgslReflect.TypeInfo[type.name];\r\n            if (info) {\r\n                return {\r\n                    align: Math.max(explicitAlign, info.align),\r\n                    size: Math.max(explicitSize, info.size)\r\n                };\r\n            }\r\n\r\n            if (type.name == \"array\") {\r\n                let align = 8;\r\n                let size = 8;\r\n                // Type                 AlignOf(T)          Sizeof(T)\r\n                // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\r\n                // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\r\n                //\r\n                // @stride(Q)\r\n                // array<E, N>          AlignOf(E)          N * Q\r\n                //\r\n                // @stride(Q)\r\n                // array<E>             AlignOf(E)          Nruntime * Q\r\n                //const E = type.format.name;\r\n                const E = this.getTypeInfo(type.format);\r\n                if (E) {\r\n                    size = E.size;\r\n                    align = E.align;\r\n                }\r\n\r\n                const N = parseInt(type.count || 1);\r\n\r\n                const stride = this.getAttribute(type, \"stride\");\r\n                if (stride) {\r\n                    size = N * parseInt(stride.value);\r\n                } else {\r\n                    size = N * this._roundUp(align, size);\r\n                }\r\n\r\n                if (explicitSize)\r\n                    size = explicitSize;\r\n\r\n                return {\r\n                    align: Math.max(explicitAlign, align),\r\n                    size: Math.max(explicitSize, size)\r\n                };\r\n            }\r\n\r\n            if (type._type == \"struct\") {\r\n                let align = 0;\r\n                let size = 0;\r\n                // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\r\n                //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\r\n                //                          Where L is the last member of the structure\r\n                let offset = 0;\r\n                let lastSize = 0;\r\n                let lastOffset = 0;\r\n                for (const m of type.members) {\r\n                    const mi = this.getTypeInfo(m);\r\n                    align = Math.max(mi.align, align);\r\n                    offset = this._roundUp(mi.align, offset + lastSize);\r\n                    lastSize = mi.size;\r\n                    lastOffset = offset;\r\n                }\r\n                size = this._roundUp(align, lastOffset + lastSize);\r\n\r\n                return {\r\n                    align: Math.max(explicitAlign, align),\r\n                    size: Math.max(explicitSize, size)\r\n                };\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        _roundUp(k, n) {\r\n            return Math.ceil(n / k) * k;\r\n        }\r\n    }\r\n\r\n\r\n    // Type                 AlignOf(T)          Sizeof(T)\r\n    // i32, u32, or f32     4                   4\r\n    // atomic<T>            4                   4\r\n    // vec2<T>              8                   8\r\n    // vec3<T>              16                  12\r\n    // vec4<T>              16                  16\r\n    // mat2x2<f32>          8                   16\r\n    // mat3x2<f32>          8                   24\r\n    // mat4x2<f32>          8                   32\r\n    // mat2x3<f32>          16                  32\r\n    // mat3x3<f32>          16                  48\r\n    // mat4x3<f32>          16                  64\r\n    // mat2x4<f32>          16                  32\r\n    // mat3x4<f32>          16                  48\r\n    // mat4x4<f32>          16                  64\r\n    WgslReflect.TypeInfo = {\r\n        \"i32\": { align: 4, size: 4 },\r\n        \"u32\": { align: 4, size: 4 },\r\n        \"f32\": { align: 4, size: 4 },\r\n        \"atomic\": { align: 4, size: 4 },\r\n        \"vec2\": { align: 8, size: 8 },\r\n        \"vec3\": { align: 16, size: 12 },\r\n        \"vec4\": { align: 16, size: 16 },\r\n        \"mat2x2\": { align: 8, size: 16 },\r\n        \"mat3x2\": { align: 8, size: 24 },\r\n        \"mat4x2\": { align: 8, size: 32 },\r\n        \"mat2x3\": { align: 16, size: 32 },\r\n        \"mat3x3\": { align: 16, size: 48 },\r\n        \"mat4x3\": { align: 16, size: 64 },\r\n        \"mat2x4\": { align: 16, size: 32 },\r\n        \"mat3x4\": { align: 16, size: 48 },\r\n        \"mat4x4\": { align: 16, size: 64 },\r\n    };\r\n\r\n    WgslReflect.TextureTypes = Token.any_texture_type.map((t) => { return t.name; });\r\n    WgslReflect.SamplerTypes = Token.sampler_type.map((t) => { return t.name; });\r\n\r\n    // export { AST, Keyword, Token, WgslParser, WgslReflect, WgslScanner };\r\n}","import { Mat4 } from \"../math/algebra/mat4\";\r\nimport { _DEG2RAD, _RAD2DEG } from \"../math/const\";\r\nimport { getOrthographicProjectionMatrix, getPerspectiveProjectionMatrix, OrthographicCamera, PerspectiveCamera } from \"../math/geometry/camera\";\r\nimport { AABB, AffineMat4, Obj4, Plane, Vec4 } from \"../math/math\";\r\nimport { GPU } from \"./gpu\";\r\nimport { wgslreflect } from \"./wgslparser\";\r\n\r\n// todo remove SliceRendererOption\r\nexport interface SliceRendererOption {\r\n    /** Caution: must be 2^n, this includes cross section thumbnails */\r\n    maxSlicesNumber?: number;\r\n    /** Caution: must be 2^n, large number can waste lots GPU memory;\r\n     *  Used to preallocate gpumemory for intermediate data of cross section\r\n     */\r\n    maxCrossSectionBufferSize?: number;\r\n    sliceGroupSize?: number;\r\n    /** Caution: enable this may cause performance issue */\r\n    enableFloat16Blend: boolean;\r\n    /** whether initiate default confiuration like sliceconfigs and retina configs */\r\n    defaultConfigs?: boolean;\r\n}\r\nexport enum SliceFacing {\r\n    POSZ,\r\n    NEGZ,\r\n    POSY,\r\n    NEGY,\r\n    POSX,\r\n    NEGX,\r\n}\r\nexport enum EyeOffset {\r\n    LeftEye,\r\n    None,\r\n    RightEye,\r\n}\r\nexport interface TetraSlicePipelineDescriptor {\r\n    vertex: TetraVertexState;\r\n    fragment: GeneralShaderState;\r\n    cullMode?: GPUCullMode;\r\n    layout?: SlicePipelineLayout;\r\n}\r\nexport interface RaytracingPipelineDescriptor {\r\n    code: string;\r\n    rayEntryPoint: string;\r\n    fragmentEntryPoint: string;\r\n}\r\nexport interface GeneralShaderState {\r\n    code: string;\r\n    entryPoint: string;\r\n}\r\nexport interface TetraVertexState extends GeneralShaderState {\r\n    workgroupSize?: number;\r\n}\r\nexport interface TetraSlicePipeline {\r\n    computePipeline: GPUComputePipeline;\r\n    computeBindGroup0: GPUBindGroup;\r\n    renderPipeline: GPURenderPipeline;\r\n    outputVaryBuffer: GPUBuffer[];\r\n    vertexOutNum: number;\r\n    descriptor: TetraSlicePipelineDescriptor\r\n};\r\nexport interface RaytracingPipeline {\r\n    pipeline: GPURenderPipeline;\r\n    bindGroup0: GPUBindGroup;\r\n};\r\n\r\nexport interface SectionConfig {\r\n    slicePos?: number;\r\n    facing: SliceFacing;\r\n    eyeOffset?: EyeOffset;\r\n    viewport: { x: number; y: number; width: number; height: number };\r\n    resolution?: number;\r\n}\r\n// internal config state\r\ninterface DisplayConfig {\r\n    layers: number;\r\n    retinaEyeOffset: number;\r\n    sectionEyeOffset: number;\r\n    opacity: number;\r\n    sections: Array<SectionConfig>;\r\n    sliceNum: number;\r\n    retinaResolution: number;\r\n}\r\n// config for user\r\nexport interface SliceConfig {\r\n    layers?: number;\r\n    sections?: Array<SectionConfig>;\r\n    retinaResolution?: number;\r\n}\r\ninterface RenderState {\r\n    commandEncoder: GPUCommandEncoder;\r\n    computePassEncoder?: GPUComputePassEncoder;\r\n    slicePassEncoder?: GPURenderPassEncoder;\r\n    sliceIndex: number;\r\n    pipeline?: TetraSlicePipeline;\r\n    needClear: boolean;\r\n    frustumRange: Vec4[];\r\n}\r\nconst DefaultWorkGroupSize = 256;\r\nconst DefaultRetinaResolution = 512;\r\nconst DefaultSliceGroupSize = 16;\r\nconst DefaultMaxSlicesNumber = 256;\r\nconst DefaultMaxCrossSectionBufferSize = 0x800000;\r\nconst DefaultEnableFloat16Blend = true;\r\nconst DefaultRetinaFov = 40;\r\nconst DefaultRetinaSize = 1.8;\r\nexport class SliceRenderer {\r\n\r\n    getSafeTetraNumInOnePass() {\r\n        // maximum vertices per slice\r\n        let maxVertices = this.maxCrossSectionBufferSize >> (this.sliceGroupSizeBit + 4);\r\n        // one tetra generate at most 6 vertices\r\n        return Math.floor(maxVertices / 6);\r\n    }\r\n\r\n    // configurations\r\n\r\n    private maxSlicesNumber: number;\r\n    private maxCrossSectionBufferSize: number;\r\n    /** On each computeshader slice calling numbers, should be 2^n */\r\n    private sliceGroupSize: number;\r\n    private sliceGroupSizeBit: number;\r\n    private screenSize: GPUExtent3DStrict;\r\n    private outputBufferStride: number;\r\n    private viewportCompressShift: number;\r\n    private blendFormat: GPUTextureFormat;\r\n    private displayConfig: DisplayConfig;\r\n    private sliceTextureSize: { width: number, height: number };\r\n\r\n    // GPU resources\r\n\r\n    private gpu: GPU;\r\n    private context: GPUCanvasContext;\r\n    private crossRenderVertexShaderModule: GPUShaderModule;\r\n    private screenTexture: GPUTexture;\r\n    private screenView: GPUTextureView;\r\n    private linearTextureSampler: GPUSampler;\r\n    private nearestTextureSampler: GPUSampler;\r\n\r\n    private crossRenderPassDescClear: GPURenderPassDescriptor;\r\n    private crossRenderPassDescLoad: GPURenderPassDescriptor;\r\n    private clearRenderPipeline: GPURenderPipeline;\r\n    private retinaRenderPipeline: GPURenderPipeline;\r\n    private screenRenderPipeline: GPURenderPipeline;\r\n    private retinaBindGroup: GPUBindGroup;\r\n    private screenBindGroup: GPUBindGroup;\r\n    private sliceView: GPUTextureView;\r\n    private depthView: GPUTextureView;\r\n\r\n    private outputVaryBufferPool: Array<GPUBuffer> = []; // all the vary buffers for pipelines\r\n    private sliceOffsetBuffer: GPUBuffer;\r\n    private emitIndexSliceBuffer: GPUBuffer;\r\n    private refacingBuffer: GPUBuffer; // refacing buffer stores not only refacing but also retina slices\r\n    private eyeCrossBuffer: GPUBuffer;\r\n    private thumbnailViewportBuffer: GPUBuffer;\r\n    private sliceGroupOffsetBuffer: GPUBuffer;\r\n    private retinaMVBuffer: GPUBuffer;\r\n    private retinaPBuffer: GPUBuffer;\r\n    private screenAspectBuffer: GPUBuffer;\r\n    private layerOpacityBuffer: GPUBuffer;\r\n    private camProjBuffer: GPUBuffer;\r\n    static readonly outputAttributeUsage = typeof GPUBufferUsage === 'undefined' ? null : GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX;\r\n\r\n    // CPU caches for retina and screen\r\n\r\n    private slicesJsBuffer: Float32Array;\r\n    private camProjJsBuffer: Float32Array = new Float32Array(4);\r\n    private retinaProjecJsBuffer = new Float32Array(16);\r\n    private retinaMVMatJsBuffer = new Float32Array(16);\r\n    private currentRetinaFacing: SliceFacing;\r\n    private retinaMatrixChanged: boolean = true;\r\n    private retinaFacingChanged: boolean = true;\r\n    private screenClearColor: GPUColor = { r: 0, g: 0, b: 0, a: 0.0 };\r\n    private renderState: RenderState;\r\n    private enableEye3D: boolean;\r\n    private refacingMatsCode: string;\r\n    private crossHairSize: number = 0;\r\n\r\n    // section thumbnail\r\n\r\n    private totalGroupNum: number;\r\n    private sliceGroupNum: number;\r\n\r\n    async init(gpu: GPU, context: GPUCanvasContext, options?: SliceRendererOption) {\r\n\r\n        // constants generations\r\n\r\n        // by default we maximum sliceGroupSize value according to maximum 2d texture size\r\n        let sliceGroupSize = options?.sliceGroupSize ?? DefaultSliceGroupSize;\r\n        // sliceTexture covered by sliceGroupSize x 2 atlas of sliceResolution x sliceResolution\r\n        let maxTextureSize = gpu.device.limits.maxTextureDimension2D;\r\n        let sliceTextureSize = { width: maxTextureSize >> 1, height: maxTextureSize };\r\n        let power2arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512];\r\n        let sliceGroupSizeBit = power2arr.indexOf(sliceGroupSize);\r\n        let outputBufferSize = (options?.maxCrossSectionBufferSize ?? DefaultMaxCrossSectionBufferSize);\r\n        let outputBufferStride = outputBufferSize >> sliceGroupSizeBit;\r\n        let maxSlicesNumber = options?.maxSlicesNumber ?? DefaultMaxSlicesNumber;\r\n        let enableFloat16Blend = (options?.enableFloat16Blend ?? DefaultEnableFloat16Blend);\r\n        let blendFormat: GPUTextureFormat = enableFloat16Blend === true ? 'rgba16float' : gpu.preferredFormat;\r\n\r\n        this.sliceGroupSize = sliceGroupSize;\r\n        this.sliceGroupSizeBit = sliceGroupSizeBit;\r\n        this.maxCrossSectionBufferSize = outputBufferSize;\r\n        this.outputBufferStride = outputBufferStride;\r\n        this.maxSlicesNumber = maxSlicesNumber;\r\n        this.blendFormat = blendFormat;\r\n        this.sliceTextureSize = sliceTextureSize;\r\n\r\n        // buffers\r\n\r\n        // this.readBuffer = gpu.createBuffer(GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ, outputBufferSize);\r\n\r\n\r\n        let sliceOffsetBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 4);\r\n        let emitIndexSliceBuffer = gpu.createBuffer(GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, (4 << sliceGroupSizeBit) + (maxSlicesNumber << 4));\r\n        let retinaMVBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 64);\r\n        let retinaPBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 64);\r\n        let refacingBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 4);\r\n        let eyeCrossBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 12);\r\n        let thumbnailViewportBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 16 * 16 * 4);\r\n        // here is the default builtin(position) outputbuffer\r\n        this.outputVaryBufferPool.push(gpu.createBuffer(SliceRenderer.outputAttributeUsage!, outputBufferSize, \"Output buffer for builtin(position)\"));\r\n        let sliceGroupOffsetBuffer = gpu.createBuffer(GPUBufferUsage.COPY_SRC, _genSlicesOffsetJsBuffer());\r\n        let screenAspectBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 4);\r\n        let layerOpacityBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 4);\r\n        let camProjBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 16);\r\n        let SmallUniformsBuffer = gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, 16);\r\n\r\n        function _genSlicesOffsetJsBuffer() {\r\n            let maxSliceGroupNum = Math.ceil(maxSlicesNumber / sliceGroupSize);\r\n            let sliceGroupOffsets = new Uint32Array(maxSliceGroupNum);\r\n            for (let i = 0; i < maxSliceGroupNum; i++) {\r\n                sliceGroupOffsets[i] = i * sliceGroupSize;\r\n            }\r\n            return sliceGroupOffsets;\r\n        }\r\n        this.sliceOffsetBuffer = sliceOffsetBuffer;\r\n        this.emitIndexSliceBuffer = emitIndexSliceBuffer;\r\n        this.retinaMVBuffer = retinaMVBuffer;\r\n        this.retinaPBuffer = retinaPBuffer;\r\n        this.refacingBuffer = refacingBuffer;\r\n        this.eyeCrossBuffer = eyeCrossBuffer;\r\n        this.sliceGroupOffsetBuffer = sliceGroupOffsetBuffer;\r\n        this.screenAspectBuffer = screenAspectBuffer;\r\n        this.layerOpacityBuffer = layerOpacityBuffer;\r\n        this.camProjBuffer = camProjBuffer;\r\n        this.thumbnailViewportBuffer = thumbnailViewportBuffer;\r\n        this.viewportCompressShift = power2arr.indexOf(maxTextureSize >> 8);\r\n        // textures\r\n\r\n        let depthTexture = gpu.device.createTexture({\r\n            size: sliceTextureSize, format: 'depth24plus',\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n        let depthView = depthTexture.createView();\r\n        this.depthView = depthView;\r\n        let sliceTexture = gpu.device.createTexture({\r\n            size: sliceTextureSize, format: gpu.preferredFormat,\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\r\n        });\r\n        let sliceView = sliceTexture.createView();\r\n        this.sliceView = sliceView;\r\n        this.linearTextureSampler = gpu.device.createSampler({\r\n            magFilter: 'linear',\r\n            minFilter: 'linear'\r\n        });\r\n        this.nearestTextureSampler = gpu.device.createSampler({\r\n            magFilter: 'nearest',\r\n            minFilter: 'nearest'\r\n        });\r\n        this.refacingMatsCode = `\r\nconst refacingMats = array<mat4x4<f32>,6>(\r\n    // +z\r\n    mat4x4<f32>(\r\n        1,0,0,0,\r\n        0,1,0,0,\r\n        0,0,1,0,\r\n        0,0,0,1,\r\n    ),\r\n    // -z\r\n    mat4x4<f32>(\r\n        1,0,0,0,\r\n        0,1,0,0,\r\n        0,0,-1,0,\r\n        0,0,0,1,\r\n    ),\r\n    // +y\r\n    mat4x4<f32>(\r\n        1,0,0,0,\r\n        0,0,1,0,\r\n        0,1,0,0,\r\n        0,0,0,1,\r\n    ),\r\n    // -y\r\n    mat4x4<f32>(\r\n        1,0,0,0,\r\n        0,0,-1,0,\r\n        0,-1,0,0,\r\n        0,0,0,1,\r\n    ),\r\n    // +x\r\n    mat4x4<f32>(\r\n        0,0,1,0,\r\n        0,1,0,0,\r\n        1,0,0,0,\r\n        0,0,0,1,\r\n    ),\r\n    // -x\r\n    mat4x4<f32>(\r\n        0,0,-1,0,\r\n        0,1,0,0,\r\n        -1,0,0,0,\r\n        0,0,0,1,\r\n    ),\r\n);\r\nconst determinantRefacingMats = array<f32,6>(1,-1,-1,-1,-1,-1);\r\n`;\r\n\r\n        /** \r\n         * ---------------------------------\r\n         * cross render vertex shader\r\n         * fragment shader and pipeline are provided by user\r\n         * ---------------------------------\r\n         *  */\r\n\r\n\r\n        this.crossRenderPassDescClear = {\r\n            colorAttachments: [{\r\n                view: sliceView,\r\n                clearValue: { r: 0, g: 0, b: 0, a: 0.0 },\r\n                loadOp: 'clear' as GPULoadOp,\r\n                storeOp: 'store' as GPUStoreOp\r\n            }],\r\n            depthStencilAttachment: {\r\n                view: depthView,\r\n                depthClearValue: 1.0,\r\n                depthLoadOp: 'clear' as GPULoadOp,\r\n                depthStoreOp: 'store' as GPUStoreOp,\r\n            }\r\n        };\r\n\r\n        this.crossRenderPassDescLoad = {\r\n            colorAttachments: [{\r\n                view: sliceView,\r\n                loadOp: 'load' as GPULoadOp,\r\n                storeOp: 'store' as GPUStoreOp\r\n            }],\r\n            depthStencilAttachment: {\r\n                view: depthView,\r\n                depthLoadOp: 'load' as GPULoadOp,\r\n                depthStoreOp: 'store' as GPUStoreOp,\r\n            }\r\n        };\r\n\r\n        /** \r\n         * ---------------------------------\r\n         * retina render shader and pipeline\r\n         * \r\n         * ---------------------------------\r\n         *  */\r\n\r\n        let retinaRenderCode = this.refacingMatsCode + `\r\nstruct vOutputType{\r\n    @builtin(position) position : vec4<f32>,\r\n    @location(0) relativeFragPosition : vec3<f32>,\r\n    @location(1) crossHair : f32,\r\n    @location(2) rayForCalOpacity : vec4<f32>,\r\n    @location(3) normalForCalOpacity : vec4<f32>,\r\n}\r\nstruct fInputType{\r\n    @location(0) relativeFragPosition : vec3<f32>,\r\n    @location(1) crossHair : f32,\r\n    @location(2) rayForCalOpacity : vec4<f32>,\r\n    @location(3) normalForCalOpacity : vec4<f32>,\r\n}\r\nstruct _SliceInfo{\r\n    slicePos: f32,\r\n    refacing: u32,\r\n    flag: u32,\r\n    viewport: u32,\r\n}\r\n@group(0) @binding(0) var<uniform> mvmat: mat4x4<f32>;\r\n@group(0) @binding(1) var<uniform> pmat: mat4x4<f32>;\r\n@group(0) @binding(2) var<storage,read> slice : array<_SliceInfo,${this.maxSlicesNumber}>;\r\n@group(0) @binding(3) var<uniform> sliceoffset : u32;\r\n@group(0) @binding(4) var<uniform> refacing : u32;\r\n@group(0) @binding(5) var<uniform> screenAspect : f32;\r\n@group(0) @binding(6) var<uniform> layerOpacity : f32;\r\n@group(0) @binding(7) var<uniform> thumbnailViewport : array<vec4<f32>,16>;\r\n@group(0) @binding(8) var<uniform> eyeOffset : vec3<f32>; //(eye4,eye3,crosshair)\r\n\r\n@vertex fn mainVertex(@builtin(vertex_index) vindex : u32, @builtin(instance_index) iindex : u32) -> vOutputType {\r\n    const pos = array<vec2<f32>, 4>(\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0, 1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>( 1.0, 1.0),\r\n    );\r\n    var sindex = iindex;\r\n    var pos2d = pos[vindex];\r\n    let stereoLR = f32(iindex & 1) - 0.5;\r\n    if (slice[sliceoffset].flag == 0 && eyeOffset.y > 0.0){\r\n        sindex = iindex >> 1;\r\n    }\r\n    let s = slice[sindex + sliceoffset];\r\n    // let coord = vec2<f32>(pos2d.x, -pos2d.y) * 0.5 + 0.5;\r\n    let ray = vec4<f32>(pos2d, s.slicePos, 1.0);\r\n    var glPosition: vec4<f32>;\r\n    var camRay: vec4<f32>;\r\n    var normal: vec4<f32>;\r\n    let x = f32(((s.viewport >> 24) & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.width};\r\n    let y = f32(((s.viewport >> 16) & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.height};\r\n    let w = f32(((s.viewport >> 8 ) & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.width};\r\n    let h = f32((s.viewport & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.height};\r\n    var crossHair : f32;\r\n    if (slice[sliceoffset].flag == 0){\r\n        crossHair = 0.0;\r\n        let stereoLR_offset = -stereoLR * eyeOffset.y;\r\n        let se = sin(stereoLR_offset);\r\n        let ce = cos(stereoLR_offset);\r\n        var pureRotationMvMat = mvmat;\r\n        pureRotationMvMat[3].z = 0.0;\r\n        let eyeMat = mat4x4<f32>(\r\n            ce,0,se,0,\r\n            0,1,0,0,\r\n            -se,0,ce,0,\r\n            0,0,mvmat[3].z,1\r\n        );\r\n        let omat = eyeMat * pureRotationMvMat * refacingMats[refacing & 7];\r\n        camRay = omat * ray;\r\n        glPosition = pmat * camRay;\r\n        if(pmat[3].w > 0){ // Orthographic\r\n            camRay = vec4<f32>(0.0,0.0,-1.0,1.0);\r\n        }\r\n        normal = omat[2];\r\n        // todo: viewport of retina slices\r\n        glPosition.x = (glPosition.x) * screenAspect + step(0.0001, eyeOffset.y) * stereoLR * glPosition.w;\r\n    }else{\r\n        let vp = thumbnailViewport[sindex + sliceoffset - (refacing >> 5)];\r\n        crossHair = eyeOffset.z / vp.w * step(abs(s.slicePos),0.1);\r\n        glPosition = vec4<f32>(ray.x * vp.z * screenAspect + vp.x, ray.y * vp.w + vp.y,0.5,1.0);\r\n        camRay = vec4<f32>(pos[vindex].x * vp.z / vp.w,pos[vindex].y,0.0,1.0); // for rendering crosshair\r\n    }\r\n    \r\n    let texelCoord = array<vec2<f32>, 4>(\r\n        vec2<f32>(x, y+h),\r\n        vec2<f32>(x, y),\r\n        vec2<f32>( x+w, y+h),\r\n        vec2<f32>( x+w, y),\r\n    );\r\n    return vOutputType(\r\n        glPosition,\r\n        vec3<f32>(texelCoord[vindex] , s.slicePos),\r\n        crossHair,\r\n        camRay,\r\n        normal\r\n    );\r\n}\r\n\r\n@group(0) @binding(9) var txt: texture_2d<f32>;\r\n@group(0) @binding(10) var splr: sampler;\r\n@fragment fn mainFragment(input : fInputType) -> @location(0) vec4<f32> {\r\n    let color = textureSample(txt, splr, input.relativeFragPosition.xy);\r\n    var alpha: f32 = 1.0;\r\n    let k = layerOpacity;\r\n    var factor = 0.0;\r\n    if (slice[sliceoffset].flag == 0){\r\n        let dotvalue = dot(normalize(input.rayForCalOpacity.xyz), input.normalForCalOpacity.xyz);\r\n        let factor = layerOpacity / (clamp(-dotvalue,0.0,1.0));\r\n        alpha = color.a * max(0.0, factor);\r\n    }else if(input.crossHair > 0.0){\r\n        let cross = abs(input.rayForCalOpacity.xy);\r\n        factor = step(cross.x,input.crossHair*0.05) + step(cross.y,input.crossHair*0.05);\r\n        factor *= step(cross.x,input.crossHair) * step(cross.y,input.crossHair);\r\n    }\r\n    return vec4<f32>(mix(color.rgb,vec3<f32>(1.0) - color.rgb,clamp(factor,0.0,1.0)), alpha);\r\n}\r\n`;\r\n        let retinaRenderShaderModule = gpu.device.createShaderModule({\r\n            code: retinaRenderCode\r\n        });\r\n        let clearModule = gpu.device.createShaderModule({\r\n            code:\r\n                \"@vertex fn v()->@builtin(position) vec4<f32>{ return vec4<f32>();} @fragment fn f()->@location(0) vec4<f32>{ return vec4<f32>();}\"\r\n        });\r\n        this.clearRenderPipeline = await gpu.device.createRenderPipelineAsync({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: clearModule,\r\n                entryPoint: 'v',\r\n            },\r\n            fragment: {\r\n                module: clearModule,\r\n                entryPoint: 'f',\r\n                targets: [{ format: gpu.preferredFormat }]\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthCompare: 'less',\r\n                depthWriteEnabled: true\r\n            }\r\n        });\r\n        this.retinaRenderPipeline = await gpu.device.createRenderPipelineAsync({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: retinaRenderShaderModule,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                module: retinaRenderShaderModule,\r\n                entryPoint: 'mainFragment',\r\n                targets: [{\r\n                    format: blendFormat,\r\n                    blend: {\r\n                        color: {\r\n                            srcFactor: \"src-alpha\" as GPUBlendFactor,\r\n                            dstFactor: \"one-minus-src-alpha\" as GPUBlendFactor,\r\n                            operation: \"add\" as GPUBlendOperation\r\n                        },\r\n                        alpha: {}\r\n                    }\r\n                }],\r\n            },\r\n            primitive: { topology: 'triangle-strip' }\r\n        });\r\n        this.retinaBindGroup = gpu.createBindGroup(this.retinaRenderPipeline, 0, [\r\n            { buffer: retinaMVBuffer },\r\n            { buffer: retinaPBuffer },\r\n            { buffer: emitIndexSliceBuffer },\r\n            { buffer: sliceOffsetBuffer },\r\n            { buffer: refacingBuffer },\r\n            { buffer: screenAspectBuffer },\r\n            { buffer: layerOpacityBuffer },\r\n            { buffer: thumbnailViewportBuffer },\r\n            { buffer: eyeCrossBuffer },\r\n            sliceView,\r\n            this.linearTextureSampler,\r\n        ], \"retinaBindGroup\");\r\n\r\n        /** \r\n         * ---------------------------------\r\n         * screen render shader and pipeline\r\n         * for float16 blending and convert color to srgb\r\n         * ---------------------------------\r\n         *  */\r\n\r\n        let screenRenderCode = `\r\n@group(0) @binding(0) var txt: texture_2d<f32>;\r\n@group(0) @binding(1) var splr: sampler;\r\n@group(0) @binding(2) var<uniform> eyeCross: vec3<f32>;\r\n@group(0) @binding(3) var<uniform> screenAspect : f32;\r\n@group(0) @binding(4) var<uniform> layerOpacity : f32;\r\nstruct vOutputType{\r\n    @builtin(position) position : vec4<f32>,\r\n    @location(0) fragPosition : vec2<f32>,\r\n}\r\nstruct fInputType{\r\n    @location(0) fragPosition : vec2<f32>,\r\n}\r\n@vertex fn mainVertex(@builtin(vertex_index) index : u32) -> vOutputType {\r\n    const pos = array<vec2<f32>, 4>(\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0, 1.0),\r\n        vec2<f32>(1.0, -1.0),\r\n        vec2<f32>(1.0, 1.0),\r\n    );\r\n    const uv = array<vec2<f32>, 4>(\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(0.0, 0.0),\r\n        vec2<f32>(1.0, 1.0),\r\n        vec2<f32>(1.0, 0.0),\r\n    );\r\n    return vOutputType(vec4<f32>(pos[index], 0.0, 1.0), uv[index]);\r\n}\r\n@fragment fn mainFragment(input: fInputType) -> @location(0) vec4<f32> {\r\n    let color = textureSample(txt, splr, input.fragPosition);\r\n    var factor = 0.0;\r\n    if(eyeCross.z > 0.0 && layerOpacity > 0.0){\r\n        let aspectedCross = eyeCross.z*screenAspect;\r\n        if(eyeCross.x > 0.0 ){\r\n            let cross1 = abs(input.fragPosition - vec2<f32>(0.25 ,0.5))*2.0;\r\n            let cross2 = abs(input.fragPosition - vec2<f32>(0.75 ,0.5))*2.0;\r\n            factor = step(cross1.x,0.05*aspectedCross) + step(cross2.x,0.05*aspectedCross) + step(cross1.y,eyeCross.z*0.05);\r\n            factor *= step(cross1.y,eyeCross.z) * (step(cross1.x,aspectedCross) + step(cross2.x,aspectedCross));\r\n        }else{\r\n            let cross = abs(input.fragPosition - vec2<f32>(0.5 ,0.5))*2.0;\r\n            factor = step(cross.x,0.05*aspectedCross) + step(cross.y,eyeCross.z*0.05);\r\n            factor *= step(cross.y,eyeCross.z) * step(cross.x,aspectedCross);\r\n        }\r\n    }\r\n    return vec4<f32>(mix(color.rgb,vec3<f32>(1.0) - color.rgb,clamp(factor,0.0,1.0)), 1.0);\r\n}\r\n`;\r\n        let screenRenderShaderModule = gpu.device.createShaderModule({\r\n            code: screenRenderCode\r\n        });\r\n        this.screenRenderPipeline = await gpu.device.createRenderPipelineAsync({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module: screenRenderShaderModule,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                module: screenRenderShaderModule,\r\n                entryPoint: 'mainFragment',\r\n                targets: [{\r\n                    format: gpu.preferredFormat\r\n                }],\r\n            },\r\n            primitive: { topology: 'triangle-strip' }\r\n        });\r\n        this.gpu = gpu;\r\n        this.context = context;\r\n        this.displayConfig = {\r\n            layers: null,\r\n            retinaEyeOffset: 0,\r\n            sectionEyeOffset: 0,\r\n            opacity: 0,\r\n            sections: [],\r\n            sliceNum: 0,\r\n            retinaResolution: DefaultRetinaResolution\r\n        };\r\n        // default retina settings\r\n        if (options?.defaultConfigs !== false) {\r\n            let size = 0.2;\r\n            this.setSliceConfig({\r\n                layers: 64,\r\n                sections: [\r\n                    {\r\n                        facing: SliceFacing.NEGX,\r\n                        eyeOffset: EyeOffset.LeftEye,\r\n                        viewport: { x: -size, y: size - 1, width: size, height: size }\r\n                    },\r\n                    {\r\n                        facing: SliceFacing.NEGX,\r\n                        eyeOffset: EyeOffset.RightEye,\r\n                        viewport: { x: 1 - size, y: size - 1, width: size, height: size }\r\n                    },\r\n                    {\r\n                        facing: SliceFacing.NEGY,\r\n                        eyeOffset: EyeOffset.LeftEye,\r\n                        viewport: { x: -size, y: 1 - size, width: size, height: size }\r\n                    },\r\n                    {\r\n                        facing: SliceFacing.NEGY,\r\n                        eyeOffset: EyeOffset.RightEye,\r\n                        viewport: { x: 1 - size, y: 1 - size, width: size, height: size }\r\n                    },\r\n                    {\r\n                        facing: SliceFacing.POSZ,\r\n                        eyeOffset: EyeOffset.LeftEye,\r\n                        viewport: { x: size - 1, y: size - 1, width: size, height: size }\r\n                    },\r\n                    {\r\n                        facing: SliceFacing.POSZ,\r\n                        eyeOffset: EyeOffset.RightEye,\r\n                        viewport: { x: size, y: size - 1, width: size, height: size }\r\n                    },\r\n                ]\r\n            });\r\n            this.setEyeOffset(0.1, 0.2);\r\n            this.setOpacity(1);\r\n            this.setCameraProjectMatrix({ fov: 90, near: 0.01, far: 10 });\r\n            this.setRetinaProjectMatrix({\r\n                fov: DefaultRetinaFov, near: 0.2, far: 20\r\n            });\r\n            let distance = DefaultRetinaSize / Math.tan(DefaultRetinaFov / 2 * _DEG2RAD);\r\n            this.setRetinaViewMatrix(new Mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -distance, 0, 0, 0, 1));\r\n        }\r\n        return this;\r\n    } // end init\r\n    /** for TetraSlicePipeline, vertex shader is internally a compute shader, so it doesn't share bindgroups with fragment shader.\r\n     *  for RaytracingPipeline, vertex shader and fragment shader are in one traditional render pipeline, they share bindgroups.\r\n     */\r\n    createVertexShaderBindGroup(pipeline: TetraSlicePipeline | RaytracingPipeline, index: number, buffers: GPUBuffer[], label?: string) {\r\n        if (index == 0) console.error(\"Unable to create BindGroup 0, which is occupied by internal usages.\")\r\n        return this.gpu.createBindGroup(\r\n            ((pipeline as TetraSlicePipeline).computePipeline ?\r\n                (pipeline as TetraSlicePipeline).computePipeline :\r\n                (pipeline as RaytracingPipeline).pipeline\r\n            ), index, buffers.map(e => ({ buffer: e })), \"VertexShaderBindGroup<\" + label + \">\"\r\n        );\r\n    }\r\n    /** for TetraSlicePipeline, vertex shader is internally a compute shader, so it doesn't share bindgroups with fragment shader.\r\n     *  for RaytracingPipeline, vertex shader and fragment shader are in one traditional render pipeline, they share bindgroups.\r\n     */\r\n    createFragmentShaderBindGroup(pipeline: TetraSlicePipeline | RaytracingPipeline, index: number, buffers: GPUBuffer[], label?: string) {\r\n        if (index == 0 && (pipeline as RaytracingPipeline).pipeline) console.error(\"Unable to create BindGroup 0, which is occupied by internal usages.\")\r\n        return this.gpu.createBindGroup(\r\n            ((pipeline as TetraSlicePipeline).computePipeline ?\r\n                (pipeline as TetraSlicePipeline).renderPipeline :\r\n                (pipeline as RaytracingPipeline).pipeline\r\n            ), index, buffers.map(e => ({ buffer: e })), \"FragmentShaderBindGroup<\" + label + \">\"\r\n        );\r\n    }\r\n    async createTetraSlicePipeline(desc: TetraSlicePipelineDescriptor): Promise<TetraSlicePipeline> {\r\n        let vertexState = desc.vertex;\r\n        const reflect = new wgslreflect.WgslReflect(vertexState.code);\r\n        let mainFn = reflect.functions.filter(e => e.attributes && e.attributes.some(a => a.name === \"tetra\") && e.name == vertexState.entryPoint)[0];\r\n        if (!mainFn) console.error(\"Tetra vertex shader entry Point function not found\");\r\n        let expectInput = {\r\n            \"location(0)\": \"_attribute0[tetraIndex]\",\r\n            \"location(1)\": \"_attribute1[tetraIndex]\",\r\n            \"location(2)\": \"_attribute2[tetraIndex]\",\r\n            \"location(3)\": \"_attribute3[tetraIndex]\",\r\n            \"location(4)\": \"_attribute4[tetraIndex]\",\r\n            \"location(5)\": \"_attribute5[tetraIndex]\",\r\n            \"builtin(instance_index)\": \"instanceIndex\",\r\n            \"builtin(tetra_index)\": \"tetraIndex\",\r\n        }\r\n        let expectOutput = [\r\n            \"location(0)\", \"location(1)\", \"location(2)\", \"location(3)\", \"location(4)\", \"location(5)\",\r\n            \"builtin(position)\"\r\n        ];\r\n        let { input, output, call } = wgslreflect.getFnInputAndOutput(reflect, mainFn, expectInput, expectOutput);\r\n        const bindGroup0declareIndex = 6;\r\n        let computeBindGroupLayouts: GPUBindGroupLayout[] = [];\r\n        let renderBindGroupLayouts: GPUBindGroupLayout[] = [];\r\n        let layout = getBindGroupLayout(this, desc.layout);\r\n        function getBindGroupLayout(self: SliceRenderer, layout: SlicePipelineLayout) {\r\n            if (!layout || layout === 'auto') return {\r\n                computeLayout: 'auto' as GPUAutoLayoutMode,\r\n                renderLayout: 'auto' as GPUAutoLayoutMode\r\n            }\r\n            let computeLayout = layout?.computeLayout;\r\n            let renderLayout = layout?.renderLayout;\r\n            if ((computeLayout !== 'auto' && computeLayout as GPUBindGroupLayoutDescriptor[])?.length) {\r\n                const bindGroupLayoutsDesc = (computeLayout as GPUBindGroupLayoutDescriptor[]);\r\n                let bindgroupLayouts = reflect.getBindGroups();\r\n                for (let groupIdx = 0, l = bindgroupLayouts.length; groupIdx < l; groupIdx++) {\r\n                    let groupLayoutDesc: Array<GPUBindGroupLayoutEntry> = [];\r\n                    if (groupIdx === 0) {\r\n                        // here Object.keys(output).length - 1 because it has \"return\" key\r\n                        for (let i = 0, l = Object.keys(output).length - 1 + bindGroup0declareIndex; i < l; i++) {\r\n                            const type: GPUBufferBindingType = i && i < bindGroup0declareIndex ? 'uniform' : 'storage';\r\n                            groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.COMPUTE, buffer: { type } });\r\n                        }\r\n                    } else {\r\n                        const bindings = bindgroupLayouts[groupIdx];\r\n                        for (let i = 0, l = bindings.length; i < l; i++) {\r\n                            const entry = (bindGroupLayoutsDesc[groupIdx]?.entries as Array<GPUBindGroupLayoutEntry>)?.filter(\r\n                                e => e.binding === i\r\n                            )[0];\r\n                            const desc = bindings[i];\r\n                            if (entry) {\r\n                                groupLayoutDesc.push(entry);\r\n                            } else if (!desc) {\r\n                                groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'read-only-storage' } });\r\n                            } else if (desc.type === \"buffer\") {\r\n                                groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.COMPUTE, buffer: { type: desc.resource.type } });\r\n                            }\r\n                        }\r\n                    }\r\n                    const bindGroupLayout = self.gpu.device.createBindGroupLayout({ entries: groupLayoutDesc });\r\n                    computeBindGroupLayouts.push(bindGroupLayout);\r\n                }\r\n                computeLayout = self.gpu.device.createPipelineLayout({ bindGroupLayouts: computeBindGroupLayouts, label: \"computeBindGroupLayoutDesc\" });\r\n            }\r\n\r\n            if ((renderLayout !== 'auto' && renderLayout as GPUBindGroupLayoutDescriptor[])?.length) {\r\n                const bindGroupLayoutsDesc = (renderLayout as GPUBindGroupLayoutDescriptor[]);\r\n                const renderReflect = new wgslreflect.WgslReflect(desc.fragment.code);\r\n                let bindgroupLayouts = renderReflect.getBindGroups();\r\n                for (let groupIdx = 0, l = bindgroupLayouts.length; groupIdx < l; groupIdx++) {\r\n                    let groupLayoutDesc: Array<GPUBindGroupLayoutEntry> = [];\r\n\r\n                    const bindings = bindgroupLayouts[groupIdx];\r\n                    for (let i = 0, l = bindings.length; i < l; i++) {\r\n                        const entry = (bindGroupLayoutsDesc[groupIdx]?.entries as Array<GPUBindGroupLayoutEntry>)?.filter(\r\n                            e => e.binding === i\r\n                        )[0];\r\n                        if (entry) {\r\n                            groupLayoutDesc.push(entry);\r\n                        } else if (!bindings[i] || bindings[i].type === \"buffer\") {\r\n                            groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.FRAGMENT, buffer: {} });\r\n                        } else if (bindings[i].type === \"buffer\") {\r\n                            groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.FRAGMENT, buffer: {} });\r\n                        } else if (bindings[i].type === \"sampler\") {\r\n                            groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.FRAGMENT, sampler: {} });\r\n                        } else if (bindings[i].type === \"texture\") {\r\n                            groupLayoutDesc.push({ binding: i, visibility: GPUShaderStage.FRAGMENT, texture: {} });\r\n                        }\r\n                    }\r\n                    const bindGroupLayout = self.gpu.device.createBindGroupLayout({ entries: groupLayoutDesc });\r\n                    renderBindGroupLayouts.push(bindGroupLayout);\r\n                }\r\n                renderLayout = self.gpu.device.createPipelineLayout({ bindGroupLayouts: renderBindGroupLayouts, label: \"renderBindGroupLayoutDesc\" });\r\n            }\r\n            return {\r\n                computeLayout, renderLayout\r\n            }\r\n        }\r\n        // compute pipeline\r\n        let bindGroup0declare = '';\r\n        let varInterpolate = \"\";\r\n        let emitOutput1 = \"\";\r\n        let emitOutput2 = \"\";\r\n\r\n        // render pipeline\r\n        let vinputVert = '';\r\n        let voutputVert = '';\r\n        let vcallVert = \"\";\r\n        let vertexBufferAttributes: GPUVertexBufferLayout[] = [];\r\n        let vertexOutNum = 0;\r\n        let buffers = [\r\n            { buffer: this.emitIndexSliceBuffer },\r\n            { buffer: this.sliceOffsetBuffer },\r\n            { buffer: this.refacingBuffer },\r\n            { buffer: this.eyeCrossBuffer },\r\n            { buffer: this.camProjBuffer },\r\n            { buffer: this.thumbnailViewportBuffer }\r\n        ];\r\n        let indicesInOutputBufferPool = new Set<number>();\r\n        indicesInOutputBufferPool.add(0); // default builtin(position) buffer\r\n        let outputVaryBuffer = [this.outputVaryBufferPool[0]];\r\n        for (let attr in output) {\r\n            let id: number;\r\n            if (attr === \"return\") continue;\r\n            let packedType = output[attr].type; // unpack matrix4x4\r\n            let rawType = packedType.replace(\"mat4x4<f32>\", \"vec4<f32>\");\r\n            if (attr === \"builtin(position)\") {\r\n                id = 0;\r\n            } else if (attr.startsWith(\"location(\")) {\r\n                let i = attr.charAt(9);\r\n                id = Number(i) + 1;\r\n            }\r\n            if (id >= 0) {\r\n                vertexOutNum++;\r\n                bindGroup0declare += `@group(0) @binding(${bindGroup0declareIndex + id}) var<storage, read_write> _output${id} : array<${rawType}>;\\n`;\r\n\r\n\r\n                varInterpolate += `var output${id}s : array<${rawType},4>;\\n`;\r\n                emitOutput1 += `\r\n            _output${id}[outOffset] =   output${id}s[0];\r\n            _output${id}[outOffset+1] = output${id}s[1];\r\n            _output${id}[outOffset+2] = output${id}s[2];`\r\n                emitOutput2 += `\r\n                _output${id}[outOffset+3] = output${id}s[2];\r\n                _output${id}[outOffset+4] = output${id}s[1];\r\n                _output${id}[outOffset+5] = output${id}s[3];`\r\n                let jeg = rawType.match(/array<(.+),(.+)>/);\r\n                if (jeg) {\r\n                    let typeArrLength = Number(jeg[2]);\r\n                    let attributes = [];\r\n                    for (let i = 0; i < typeArrLength; i++) {\r\n                        attributes.push({\r\n                            shaderLocation: id, // here we keep same id, we'll deal this later\r\n                            format: 'float32x4',\r\n                            offset: i << 4\r\n                        })\r\n                    }\r\n                    vertexBufferAttributes.push({\r\n                        arrayStride: typeArrLength << 4,\r\n                        attributes\r\n                    });\r\n                    buffers.push({ buffer: requireOutputBuffer(this, id, typeArrLength) });\r\n                } else {\r\n                    buffers.push({ buffer: requireOutputBuffer(this, id, 1) });\r\n                    vertexBufferAttributes.push({\r\n                        arrayStride: 16,\r\n                        attributes: [{\r\n                            shaderLocation: id,\r\n                            format: 'float32x4' as GPUVertexFormat,\r\n                            offset: 0\r\n                        }]\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n        function requireOutputBuffer(self: SliceRenderer, id: number, size: number): GPUBuffer {\r\n            if (id === 0) return self.outputVaryBufferPool[0];\r\n            let expectedSize = self.maxCrossSectionBufferSize * size;\r\n            for (let i = 0; i < self.outputVaryBufferPool.length; i++) {\r\n                if (indicesInOutputBufferPool.has(i)) continue; // we can't bind the same buffer again\r\n                let buffer = self.outputVaryBufferPool[i];\r\n                if (buffer.size === expectedSize) {\r\n                    // found unused exactly sized buffer\r\n                    indicesInOutputBufferPool.add(i);\r\n                    outputVaryBuffer.push(buffer);\r\n                    return buffer;\r\n                }\r\n            }\r\n            // no buffer found, we need to create\r\n            let buffer = self.gpu.createBuffer(SliceRenderer.outputAttributeUsage, expectedSize, \"Output buffer for \" + size + \" vec4(s)\");\r\n            indicesInOutputBufferPool.add(self.outputVaryBufferPool.length);\r\n            self.outputVaryBufferPool.push(buffer);\r\n            outputVaryBuffer.push(buffer);\r\n            return buffer;\r\n        }\r\n        let bindGroup1declare = '';\r\n        for (let attr of input) {\r\n            if (!attr.startsWith(\"location(\")) continue;\r\n            let i = attr.charAt(9);\r\n            bindGroup1declare += `@group(1) @binding(${i}) var<storage, read> _attribute${i} : array<mat4x4<f32>>;\\n`;\r\n        }\r\n        let parsedCode = vertexState.code.replace(/@tetra/g, \" \").replace(/@location\\s*\\(\\s*[0-9]+\\s*\\)\\s*/g, \" \").replace(/@builtin\\s*\\(\\s*[^\\)\\s]+\\s*\\)\\s*/g, \" \");\r\n        function makeInterpolate(a: number, b: number) {\r\n            let str = '';\r\n            for (let attr in output) {\r\n                let jeg = output[attr].type?.match(/array<(.+),(.+)>/);\r\n\r\n                let name = attr.startsWith(\"location(\") ? output[attr].expr : attr == \"builtin(position)\" ? \"refPosMat\" : \"\";\r\n                if (!name) continue;\r\n                let i = attr.startsWith(\"location(\") ? Number(attr.charAt(9)) + 1 : 0;\r\n                if (jeg) {\r\n                    let typeArrLength = Number(jeg[2]);\r\n                    for (let idx = 0; idx < typeArrLength; idx++)\r\n                        str += `output${i}s[offset][${idx}] = mix(${name}[${idx}][${a}],${name}[${idx}][${b}],alpha);\\n`;\r\n                } else {\r\n                    str += `output${i}s[offset] = mix(${name}[${a}],${name}[${b}],alpha);\\n`;\r\n                }\r\n            }\r\n            return str;\r\n        }\r\n        let cullOperator = desc.cullMode == \"back\" ? \"<\" : \">\";\r\n        let commonCameraSliceCode = `\r\nlet sign = step(vec4<f32>(0.0,0.0,0.0,0.0),scalar);\r\nlet vertnum = sign.x + sign.y + sign.z + sign.w;\r\nif(!(vertnum == 0.0 || vertnum == 4.0)){ // if hit one slice\r\n    if(sign.x + sign.y == 1.0){\r\n        let alpha = scalar.x/(scalar.x - scalar.y);\r\n        ${makeInterpolate(0, 1)}\r\n        offset++;\r\n    }\r\n    if(sign.x + sign.z == 1.0){\r\n        let alpha = scalar.x/(scalar.x - scalar.z);\r\n        ${makeInterpolate(0, 2)}\r\n        offset++;\r\n    }\r\n    if(sign.x + sign.w == 1.0){\r\n        let alpha = scalar.x/(scalar.x - scalar.w);\r\n        ${makeInterpolate(0, 3)}\r\n        offset++;\r\n    }\r\n    if(sign.y + sign.z == 1.0){\r\n        let alpha = scalar.y/(scalar.y - scalar.z);\r\n        ${makeInterpolate(1, 2)}\r\n        offset++;\r\n    }\r\n    if(sign.y + sign.w == 1.0){\r\n        let alpha = scalar.y/(scalar.y - scalar.w);\r\n        ${makeInterpolate(1, 3)}\r\n        offset++;\r\n    }\r\n    if(sign.z + sign.w == 1.0){\r\n        let alpha = scalar.z/(scalar.z - scalar.w);\r\n        ${makeInterpolate(2, 3)}\r\n        offset++;\r\n    }\r\n\r\n    // offset is total verticex number (3 or 4), delta is faces number (3 or 6)\r\n    let delta:u32 = u32((offset - 2) * 3);\r\n    // get output location thread-safely\r\n    let outOffset : u32 = atomicAdd(&(_emitIndex_slice.emitIndex[i]), delta) + emitIndexOffset;\r\n    // write 3 vertices of first triangular face\r\n    ${emitOutput1}\r\n    // write 3 vertices of second triangular face if one has\r\n    if(offset == 4){\r\n        ${emitOutput2}\r\n    }\r\n} // end one hit\r\n`;\r\n        let crossComputeCode = this.refacingMatsCode + `\r\n\r\nstruct _SliceInfo{\r\n    slicePos: f32,\r\n    refacing: u32,\r\n    flag: u32,\r\n    _pading: u32,\r\n}\r\nstruct _EmitIndex_Slice{\r\n    slice: array<_SliceInfo, ${this.maxSlicesNumber}>,\r\n    emitIndex: array<atomic<u32>>,\r\n}\r\n@group(0) @binding(0) var<storage, read_write> _emitIndex_slice: _EmitIndex_Slice;\r\n@group(0) @binding(1) var<uniform> _sliceoffset : u32;\r\n@group(0) @binding(2) var<uniform> _refacingMat : u32;\r\n@group(0) @binding(3) var<uniform> _eye4dOffset : f32;\r\n@group(0) @binding(4) var<uniform> _camProj: vec4<f32>;\r\n@group(0) @binding(5) var<uniform> thumbnailViewport : array<vec4<f32>,16>;\r\n${bindGroup0declare}\r\n${bindGroup1declare}\r\n\r\n// user defined functions and bind groups\r\n${parsedCode}\r\n\r\nconst _emitIndexStride : u32 = ${this.outputBufferStride >> 4};\r\n@compute @workgroup_size(${vertexState.workgroupSize ?? DefaultWorkGroupSize})\r\nfn _mainCompute(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>){\r\n    let tetraIndex = GlobalInvocationID.x;\r\n    let instanceIndex = GlobalInvocationID.y;\r\n    ${input.has(\"location(0)\") ? `\r\n    if(tetraIndex >= arrayLength(&_attribute0)){ // todo: check performance?\r\n        return;\r\n    }` : ``} \r\n    // calculate camera space coordinate : builtin(position) and other output need to be interpolated : location(x)\r\n    // call user defined code \r\n    ${call}\r\n    let cameraPosMat = ${output[\"builtin(position)\"].expr};\r\n    \r\n    var instanceLength:u32 = ${this.sliceGroupSize};\r\n    var refPosMat : mat4x4<f32>;\r\n    var refCamMat : mat4x4<f32>;\r\n    let sliceFlag = _emitIndex_slice.slice[_sliceoffset].flag;\r\n\r\n    if(_camProj.x < 0){ // Orthographic\r\n        let projBiais:mat4x4<f32> = mat4x4<f32>(\r\n            0,0,_camProj.w,1,\r\n            0,0,_camProj.w,1,\r\n            0,0,_camProj.w,1,\r\n            0,0,_camProj.w,1,\r\n        );\r\n        let projMat = mat4x4<f32>(\r\n            -_camProj.x,0,0,0,\r\n            0,_camProj.y,0,0,\r\n            0,0,0,0,\r\n            0,0,_camProj.z,0,\r\n        );\r\n\r\n        ${(desc.cullMode == \"back\" || desc.cullMode == \"front\") ? `\r\n        // cull face: if all slices in this group has no eye4D offset, cull here\r\n        var cameraPosDetMat = transpose(cameraPosMat); \r\n        cameraPosDetMat[3] = vec4<f32>(-1.0);\r\n        if(determinant(cameraPosDetMat) ${cullOperator} 0){ return; }` : \"\"}\r\n\r\n        // [uniform if] all slices are in retina, no eye4D\r\n        if(sliceFlag == 0){\r\n            // we get refacing mat from uniform for retina slices\r\n            let retinaRefacingMat = refacingMats[_refacingMat & 7];\r\n            // calculate standard device coordinate for retina: projection * refacing * view * model * pos\r\n            refCamMat = retinaRefacingMat * cameraPosMat;\r\n            refPosMat = projMat * refCamMat + projBiais;\r\n        }else{\r\n            instanceLength = _emitIndex_slice.slice[_sliceoffset].flag;\r\n        }\r\n        \r\n        // prepare for interpolations\r\n        var emitIndexOffset = 0u;\r\n        for(var i:u32 = 0; i<instanceLength; i++){\r\n            ${varInterpolate}\r\n            let sliceInfo = _emitIndex_slice.slice[_sliceoffset + i];\r\n            if(sliceInfo.slicePos > 1.0){\r\n                emitIndexOffset += _emitIndexStride;\r\n                continue;\r\n            }\r\n            var offset = 0u;\r\n            if(sliceFlag != 0){\r\n                refCamMat = refacingMats[sliceInfo.refacing & 7] * cameraPosMat;\r\n                refPosMat = projMat * refCamMat + projBiais;\r\n                let vp = thumbnailViewport[_sliceoffset + i - (_refacingMat >> 5)];\r\n                let aspect = vp.w / vp.z;\r\n                refPosMat[0].x *= aspect;\r\n                refPosMat[1].x *= aspect;\r\n                refPosMat[2].x *= aspect;\r\n                refPosMat[3].x *= aspect;\r\n            }\r\n            // calculate cross section pos * plane.normal\r\n            let scalar = transpose(refCamMat)[2] + vec4<f32>(sliceInfo.slicePos / _camProj.x); \r\n            ${commonCameraSliceCode}\r\n            emitIndexOffset += _emitIndexStride;\r\n        } // end all hits\r\n    }else{\r\n        let preclipW = cameraPosMat[0].w >= 0 && cameraPosMat[1].w >= 0 && cameraPosMat[2].w >= 0  && cameraPosMat[3].w >= 0;\r\n        if(preclipW){ return; }\r\n        let projBiais:mat4x4<f32> = mat4x4<f32>(\r\n            0,0,_camProj.w,0,\r\n            0,0,_camProj.w,0,\r\n            0,0,_camProj.w,0,\r\n            0,0,_camProj.w,0\r\n        );\r\n        let projMat = mat4x4<f32>(\r\n            _camProj.x,0,0,0,\r\n            0,_camProj.y,0,0,\r\n            0,0,0,0,\r\n            0,0,_camProj.z,-1,\r\n        );\r\n        let eyeMat = mat4x4<f32>(\r\n            _eye4dOffset,0,0,0,\r\n            _eye4dOffset,0,0,0,\r\n            _eye4dOffset,0,0,0,\r\n            _eye4dOffset,0,0,0\r\n        );\r\n        // [uniform if] all slices are in retina, no eye4D\r\n        if(sliceFlag == 0){\r\n            ${(desc.cullMode == \"back\" || desc.cullMode == \"front\") ? `\r\n            // cull face: if all slices in this group has no eye4D offset, cull here\r\n            if(determinant(cameraPosMat) ${cullOperator} 0){ return; }` : \"\"}\r\n            \r\n            // we get refacing mat from uniform for retina slices\r\n            let retinaRefacingMat = refacingMats[_refacingMat & 7];\r\n            // calculate standard device coordinate for retina: projection * refacing * view * model * pos\r\n            refCamMat = retinaRefacingMat * cameraPosMat;\r\n            refPosMat = projMat * refCamMat + projBiais;\r\n        }else{\r\n            instanceLength = _emitIndex_slice.slice[_sliceoffset].flag;\r\n        }\r\n        \r\n        // prepare for interpolations\r\n        var emitIndexOffset = 0u;\r\n        for(var i:u32 = 0; i<instanceLength; i++){\r\n            ${varInterpolate}\r\n            let sliceInfo = _emitIndex_slice.slice[_sliceoffset + i];\r\n            if(sliceInfo.slicePos > 1.0){\r\n                emitIndexOffset += _emitIndexStride;\r\n                continue;\r\n            }\r\n            var offset = 0u;\r\n            if(sliceFlag != 0){\r\n                refCamMat = refacingMats[sliceInfo.refacing & 7] * cameraPosMat + \r\n                    eyeMat * (f32(sliceInfo.refacing >> 3) - 1.0);\r\n                    ${(desc.cullMode == \"back\" || desc.cullMode == \"front\") ? `\r\n                if(determinant(refCamMat) * determinantRefacingMats[sliceInfo.refacing & 7] ${cullOperator} 0){\r\n                    emitIndexOffset += _emitIndexStride;\r\n                    continue;\r\n                }`: \"\"}\r\n                refPosMat = projMat * refCamMat + projBiais;\r\n                let vp = thumbnailViewport[_sliceoffset + i - (_refacingMat >> 5)];\r\n                let aspect = vp.w / vp.z;\r\n                refPosMat[0].x *= aspect;\r\n                refPosMat[1].x *= aspect;\r\n                refPosMat[2].x *= aspect;\r\n                refPosMat[3].x *= aspect;\r\n            }\r\n            // calculate cross section pos * plane.normal\r\n            let scalar = transpose(refCamMat) * vec4(0.0,0.0,1.0,sliceInfo.slicePos / _camProj.x); \r\n            ${commonCameraSliceCode}\r\n            emitIndexOffset += _emitIndexStride;\r\n        } // end all hits\r\n    } // end camera type\r\n}\r\n`;\r\n        let computePipeline = await this.gpu.device.createComputePipelineAsync({\r\n            layout: layout.computeLayout as GPUPipelineLayout | GPUAutoLayoutMode,\r\n            compute: {\r\n                module: this.gpu.device.createShaderModule({\r\n                    code: crossComputeCode\r\n                }),\r\n                entryPoint: '_mainCompute'\r\n            }\r\n        });\r\n        vertexBufferAttributes.sort((a, b) =>\r\n            (a.attributes[0].shaderLocation - b.attributes[0].shaderLocation)\r\n        );\r\n        let shaderLocationCounter = 0;\r\n        for (let vba of vertexBufferAttributes) {\r\n            for (let attr of vba.attributes) {\r\n                attr.shaderLocation = shaderLocationCounter++;\r\n            }\r\n        }\r\n        for (let i = 0; i < shaderLocationCounter; i++) {\r\n            let attr = i ? `location(${i - 1})` : \"builtin(position)\";\r\n            vinputVert += `@location(${i}) member${i}: vec4<f32>,\\n`;\r\n            voutputVert += `@${attr} member${i}: vec4<f32>,\\n`;\r\n            vcallVert += `data.member${i},`;\r\n        }\r\n        this.crossRenderVertexShaderModule = this.gpu.device.createShaderModule({\r\n            code: `\r\nstruct vInputType{\r\n    ${vinputVert}\r\n};\r\nstruct vOutputType{\r\n    ${voutputVert}\r\n};\r\n@vertex fn main(data : vInputType)-> vOutputType{\r\n    return vOutputType(${vcallVert});\r\n}\r\n`});\r\n\r\n        let renderPipeline = await this.gpu.device.createRenderPipelineAsync({\r\n            layout: layout.renderLayout as GPUPipelineLayout | GPUAutoLayoutMode,\r\n            vertex: {\r\n                module: this.crossRenderVertexShaderModule,\r\n                entryPoint: 'main',\r\n                buffers: vertexBufferAttributes,\r\n            },\r\n            fragment: {\r\n                module: this.gpu.device.createShaderModule({ code: desc.fragment.code }),\r\n                entryPoint: desc.fragment.entryPoint,\r\n                targets: [{ format: this.gpu.preferredFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-list',\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less',\r\n                format: 'depth24plus',\r\n            }\r\n        });\r\n        return {\r\n            computePipeline,\r\n            computeBindGroup0: this.gpu.createBindGroup(computePipeline, 0, buffers, \"TetraComputePipeline\"),\r\n            renderPipeline,\r\n            vertexOutNum,\r\n            outputVaryBuffer,\r\n            descriptor: desc\r\n        };\r\n    }\r\n    setSize(size: GPUExtent3DStrict) {\r\n        if (this.screenTexture) {\r\n            this.screenTexture.destroy();\r\n        }\r\n        this.screenTexture = this.gpu.device.createTexture({\r\n            size, format: this.blendFormat,\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\r\n        });\r\n        this.screenView = this.screenTexture.createView();\r\n        this.screenBindGroup = this.gpu.createBindGroup(this.screenRenderPipeline, 0, [\r\n            this.screenView,\r\n            this.linearTextureSampler,\r\n            { buffer: this.eyeCrossBuffer },\r\n            { buffer: this.screenAspectBuffer },\r\n            { buffer: this.layerOpacityBuffer },\r\n        ], \"screenBindGroup\");\r\n        let aspect: number;\r\n        if ((size as GPUExtent3DDict).height) {\r\n            aspect = (size as GPUExtent3DDict).height / (size as GPUExtent3DDict).width;\r\n        } else {\r\n            aspect = size[1] / size[0];\r\n        }\r\n        this.gpu.device.queue.writeBuffer(this.screenAspectBuffer, 0, new Float32Array([aspect]));\r\n    }\r\n    setCameraProjectMatrix(camera: PerspectiveCamera | OrthographicCamera) {\r\n        if ((camera as PerspectiveCamera).fov) {\r\n            getPerspectiveProjectionMatrix(camera as PerspectiveCamera).vec4.writeBuffer(this.camProjJsBuffer);\r\n        } else {\r\n            getOrthographicProjectionMatrix(camera as OrthographicCamera).vec4.writeBuffer(this.camProjJsBuffer);\r\n            this.camProjJsBuffer[0] = -this.camProjJsBuffer[0]; // use negative to mark Orthographic in shader\r\n        }\r\n        this.gpu.device.queue.writeBuffer(this.camProjBuffer, 0, this.camProjJsBuffer);\r\n    }\r\n    setRetinaProjectMatrix(camera: PerspectiveCamera | OrthographicCamera) {\r\n        if ((camera as PerspectiveCamera).fov) {\r\n            getPerspectiveProjectionMatrix(camera as PerspectiveCamera).mat4.writeBuffer(this.retinaProjecJsBuffer);\r\n        } else {\r\n            getOrthographicProjectionMatrix(camera as OrthographicCamera).mat4.writeBuffer(this.retinaProjecJsBuffer);\r\n        }\r\n        this.gpu.device.queue.writeBuffer(this.retinaPBuffer, 0, this.retinaProjecJsBuffer);\r\n    }\r\n    setRetinaViewMatrix(m: Mat4) {\r\n        let e = m.elem;\r\n        let facing = getFacing(e[8], e[9], e[10]);\r\n        if (facing !== this.currentRetinaFacing) {\r\n            this.retinaFacingChanged = true;\r\n            this.currentRetinaFacing = facing;\r\n        }\r\n        m.writeBuffer(this.retinaMVMatJsBuffer);\r\n        this.retinaMatrixChanged = true;\r\n        function getFacing(x: number, y: number, z: number) {\r\n            let xa = Math.abs(x);\r\n            let ya = Math.abs(y);\r\n            let za = Math.abs(z);\r\n            switch (za > ya ? za > xa ? 2 : 0 : ya > xa ? 1 : 0) {\r\n                case 0:\r\n                    return x > 0 ? SliceFacing.POSX : SliceFacing.NEGX;\r\n                case 1:\r\n                    return y > 0 ? SliceFacing.POSY : SliceFacing.NEGY;\r\n                default:\r\n                    return z > 0 ? SliceFacing.POSZ : SliceFacing.NEGZ;\r\n            }\r\n        }\r\n    }\r\n    getOpacity() { return this.displayConfig.opacity; }\r\n    getSectionEyeOffset() { return this.displayConfig.sectionEyeOffset; }\r\n    getRetinaEyeOffset() { return this.displayConfig.retinaEyeOffset; }\r\n    getLayers() { return this.displayConfig.layers; }\r\n    getRetinaResolution() { return this.displayConfig.retinaResolution; }\r\n    getMinResolutionMultiple() { return 1 << this.viewportCompressShift; }\r\n    getStereoMode() { return this.enableEye3D; }\r\n    getCamera(): PerspectiveCamera | OrthographicCamera {\r\n        let c = this.camProjJsBuffer;\r\n        let near = c[3] / c[2];\r\n        if (c[0] > 0) {\r\n            return {\r\n                fov: Math.atan(1 / c[1]) * _RAD2DEG * 2,\r\n                aspect: c[1] / c[0],\r\n                near,\r\n                far: c[2] * near / (1 + c[2])\r\n            };\r\n        } else {\r\n            return {\r\n                size: 1 / c[1],\r\n                aspect: - c[1] / c[0],\r\n                near,\r\n                far: near - 1.0 / c[2]\r\n            };\r\n        }\r\n    }\r\n    getRetinaCamera(): PerspectiveCamera | OrthographicCamera {\r\n        let c = this.retinaProjecJsBuffer;\r\n        let near = c[3] / c[2];\r\n        if (c[0] > 0) {\r\n            return {\r\n                fov: Math.atan(1 / c[1]) * _RAD2DEG * 2,\r\n                aspect: c[1] / c[0],\r\n                near,\r\n                far: c[2] * near / (1 + c[2])\r\n            };\r\n        } else {\r\n            return {\r\n                size: 1 / c[1],\r\n                aspect: - c[1] / c[0],\r\n                near,\r\n                far: near - 1.0 / c[2]\r\n            };\r\n        }\r\n    }\r\n    getSize() {\r\n        if (!this.screenTexture) { return { width: 1, height: 1 }; }\r\n        return { width: this.screenTexture.width, height: this.screenTexture.height };\r\n    }\r\n    setOpacity(opacity: number) {\r\n        this.displayConfig.opacity = opacity;\r\n        // This is useful: when sliceNum == 0, opacity is 0 -> detect opacity to not render crosshair\r\n        let value = this.displayConfig.sliceNum ? opacity / this.displayConfig.sliceNum : 0.0;\r\n        this.gpu.device.queue.writeBuffer(this.layerOpacityBuffer, 0, new Float32Array([value]));\r\n    }\r\n    setEyeOffset(sectionEyeOffset?: number, retinaEyeOffset?: number) {\r\n        let s = typeof sectionEyeOffset === \"number\";\r\n        let r = typeof retinaEyeOffset === \"number\";\r\n\r\n        if (s && r) {\r\n            this.gpu.device.queue.writeBuffer(this.eyeCrossBuffer, 0, new Float32Array([\r\n                sectionEyeOffset, retinaEyeOffset\r\n            ]));\r\n        } else if (s) {\r\n            this.gpu.device.queue.writeBuffer(this.eyeCrossBuffer, 0, new Float32Array([\r\n                sectionEyeOffset\r\n            ]));\r\n        } else if (r) {\r\n            this.gpu.device.queue.writeBuffer(this.eyeCrossBuffer, 4, new Float32Array([\r\n                retinaEyeOffset\r\n            ]));\r\n        }\r\n        if (s) this.displayConfig.sectionEyeOffset = sectionEyeOffset;\r\n        if (r) this.displayConfig.retinaEyeOffset = retinaEyeOffset;\r\n        this.enableEye3D = this.displayConfig.sectionEyeOffset > 0 || this.displayConfig.retinaEyeOffset > 0;\r\n    }\r\n    setCrosshair(size: number) {\r\n        this.crossHairSize = size;\r\n        this.gpu.device.queue.writeBuffer(this.eyeCrossBuffer, 8, new Float32Array([\r\n            size\r\n        ]));\r\n    }\r\n    getCrosshair() {\r\n        return this.crossHairSize;\r\n    }\r\n    setSliceConfig(sliceConfig: SliceConfig) {\r\n        let vpShift = this.viewportCompressShift;\r\n        let prevRetinaResolution = this.displayConfig.retinaResolution;\r\n        if (sliceConfig.retinaResolution) this.displayConfig.retinaResolution = (sliceConfig.retinaResolution >> vpShift) << vpShift;\r\n        if (sliceConfig.sections) {\r\n            // deepcopy\r\n            this.displayConfig.sections = sliceConfig.sections.map(e => ({\r\n                eyeOffset: e.eyeOffset ?? EyeOffset.None,\r\n                facing: e.facing,\r\n                slicePos: e.slicePos ?? 0,\r\n                viewport: {\r\n                    x: e.viewport.x,\r\n                    y: e.viewport.y,\r\n                    width: e.viewport.width,\r\n                    height: e.viewport.height,\r\n                },\r\n                resolution: e.resolution ?? this.displayConfig.retinaResolution\r\n            }))\r\n        }\r\n        if (\r\n            (!sliceConfig.sections) && (\r\n                (typeof sliceConfig.layers !== \"number\") ||\r\n                this.displayConfig.layers == sliceConfig.layers\r\n            ) && (!sliceConfig.retinaResolution)\r\n        ) return;\r\n        this.displayConfig.sections ??= [];\r\n        sliceConfig.layers ??= this.displayConfig.layers ?? 0;\r\n        this.displayConfig.layers = sliceConfig.layers;\r\n        let sections = this.displayConfig.sections;\r\n        let sliceStep = 2 / sliceConfig.layers; // slice from -1 to 1\r\n        let sliceGroupNum = Math.ceil(sliceConfig.layers / this.sliceGroupSize);\r\n        let sliceNum = sliceGroupNum << this.sliceGroupSizeBit;\r\n        if (this.displayConfig.sliceNum !== sliceNum) {\r\n            this.displayConfig.sliceNum = sliceNum;\r\n            this.setOpacity(this.displayConfig.opacity ?? 1);\r\n        }\r\n        let sectionNum = sections.length ?? 0;\r\n        let sectionGroupNum = Math.ceil(sectionNum / this.sliceGroupSize);\r\n        let totalNum = sliceNum + (sectionGroupNum << this.sliceGroupSizeBit);\r\n        let slices = (this.slicesJsBuffer?.length === totalNum << 2) ? this.slicesJsBuffer : new Float32Array(totalNum << 2);\r\n        this.slicesJsBuffer = slices;\r\n        slices.fill(0);// todo : check neccesity?\r\n\r\n        let retinaWidth = this.displayConfig.retinaResolution;\r\n        let retinaX = 0;\r\n        let retinaY = 0;\r\n        for (let slice = -1, i = 0, sliceGroupOffset = 0; i < sliceNum; slice += sliceStep, i++, sliceGroupOffset++) {\r\n            if (sliceGroupOffset === this.sliceGroupSize) {\r\n                sliceGroupOffset = 0;\r\n                retinaX = 0;\r\n                retinaY = 0;\r\n            }\r\n            slices[(i << 2)] = slice; // if slice > 1, discard in shader\r\n            slices[(i << 2) + 1] = 0;\r\n            slices[(i << 2) + 2] = 0;\r\n            let wshift = retinaWidth >> vpShift;\r\n            slices[(i << 2) + 3] = u32_to_f32(((retinaX >> vpShift) << 24) + ((retinaY >> vpShift) << 16) + (wshift << 8) + wshift);\r\n            if (retinaX + retinaWidth > this.sliceTextureSize.width ||\r\n                retinaY + retinaWidth > this.sliceTextureSize.height) {\r\n                this.setSliceConfig({ retinaResolution: prevRetinaResolution });\r\n                console.warn(\"Maximum retinaResolution reached\");\r\n                return;\r\n            }\r\n            retinaY += retinaWidth;\r\n            if (retinaY + retinaWidth > this.sliceTextureSize.height) {\r\n                retinaX += retinaWidth;\r\n                retinaY = 0;\r\n            }\r\n        }\r\n\r\n        this.sliceGroupNum = sliceGroupNum;\r\n        this.totalGroupNum = sliceGroupNum + sectionGroupNum;\r\n        if (sectionNum) {\r\n            let thumbnailViewportJsBuffer = new Float32Array(4 * 16);\r\n            let lastGroupPosition = sectionGroupNum - 1 << this.sliceGroupSizeBit;\r\n            let lastGroupSlices = sections.length - lastGroupPosition;\r\n            // get max resolution widths per slice group\r\n\r\n            let deltaX = [];\r\n            let maxDx = 0;\r\n            for (let j = 0, sliceGroupOffset = 0, l = sections.length; j < l; j++, sliceGroupOffset++) {\r\n                let config = sections[j];\r\n                if (sliceGroupOffset === this.sliceGroupSize) {\r\n                    sliceGroupOffset = 0;\r\n                    deltaX.push((maxDx >> vpShift) << vpShift);\r\n                    maxDx = 0;\r\n                }\r\n                maxDx = Math.max(maxDx, Math.ceil(config.resolution / config.viewport.height * config.viewport.width));\r\n            }\r\n            deltaX.push((maxDx >> 4) << 4);\r\n            retinaX = 0;\r\n            retinaY = 0;\r\n            let sliceGroup = 0;\r\n            for (let i = sliceNum, j = 0, sliceGroupOffset = 0; i < totalNum; i++, j++, sliceGroupOffset++) {\r\n                let config = sections[j];\r\n                slices[(i << 2)] = config?.slicePos ?? 0;\r\n                slices[(i << 2) + 1] = u32_to_f32(((config?.facing) ?? 0) | ((config?.eyeOffset ?? 1) << 3));\r\n                slices[(i << 2) + 2] = u32_to_f32(j < lastGroupPosition ? this.sliceGroupSize : lastGroupSlices);\r\n                if (config) {\r\n                    if (sliceGroupOffset === this.sliceGroupSize) {\r\n                        retinaX = 0;\r\n                        retinaY = 0;\r\n                        sliceGroupOffset = 0;\r\n                        sliceGroup++;\r\n                    } else if (retinaY + config.resolution > this.sliceTextureSize.height) {\r\n                        retinaX += deltaX[sliceGroup];\r\n                        retinaY = 0;\r\n                    }\r\n\r\n                    let wshift = Math.ceil(config.resolution / config.viewport.height * config.viewport.width) >> vpShift;\r\n                    let hshift = config.resolution >> vpShift;\r\n                    slices[(i << 2) + 3] = u32_to_f32(\r\n                        (((retinaX >> vpShift)) << 24) + ((retinaY >> vpShift) << 16) + (wshift << 8) + hshift\r\n                    );\r\n                    thumbnailViewportJsBuffer[j << 2] = config.viewport.x;\r\n                    thumbnailViewportJsBuffer[(j << 2) + 1] = config.viewport.y;\r\n                    thumbnailViewportJsBuffer[(j << 2) + 2] = config.viewport.width;\r\n                    thumbnailViewportJsBuffer[(j << 2) + 3] = config.viewport.height;\r\n\r\n                    retinaY += (config.resolution >> vpShift) << vpShift;\r\n                }\r\n            }\r\n            this.gpu.device.queue.writeBuffer(this.thumbnailViewportBuffer, 0, thumbnailViewportJsBuffer);\r\n        }\r\n        this.gpu.device.queue.writeBuffer(this.emitIndexSliceBuffer, 0, slices);\r\n        this.retinaFacingChanged = true; // force to reload retina slice num into refacing buffer\r\n    }\r\n    render(drawCall: () => void) {\r\n        if (!this.screenTexture) { console.error(\"tesserxel.SliceRenderer: Must call setSize before rendering\"); }\r\n        const gpu = this.gpu;\r\n        if (this.retinaMatrixChanged) {\r\n            this.retinaMatrixChanged = false;\r\n            gpu.device.queue.writeBuffer(this.retinaMVBuffer, 0, this.retinaMVMatJsBuffer);\r\n        }\r\n        if (this.retinaFacingChanged) {\r\n            // refacing buffer stores not only refacing but also retina slices\r\n            gpu.device.queue.writeBuffer(this.refacingBuffer, 0, new Uint32Array([\r\n                this.currentRetinaFacing | ((this.sliceGroupNum) << (5 + this.sliceGroupSizeBit))\r\n            ]));\r\n            this.retinaFacingChanged = false;\r\n        }\r\n        let commandEncoder = gpu.device.createCommandEncoder();\r\n        let canvasView = this.context.getCurrentTexture().createView();\r\n\r\n        for (let sliceIndex = 0; sliceIndex < this.totalGroupNum; sliceIndex++) {\r\n\r\n            this.renderState = {\r\n                commandEncoder,\r\n                sliceIndex,\r\n                needClear: true,\r\n                frustumRange: undefined\r\n            };\r\n            // set new slicegroup offset\r\n            commandEncoder.copyBufferToBuffer(this.sliceGroupOffsetBuffer, sliceIndex << 2, this.sliceOffsetBuffer, 0, 4);\r\n            drawCall();\r\n            if (this.renderState.needClear) {\r\n                // if drawCall is empty, we also need to clear texture\r\n                let clearPassEncoder = commandEncoder.beginRenderPass(this.crossRenderPassDescClear);\r\n                clearPassEncoder.setPipeline(this.clearRenderPipeline);\r\n                clearPassEncoder.draw(0);\r\n                clearPassEncoder.end();\r\n            }\r\n            let retinaPassEncoder = commandEncoder.beginRenderPass({\r\n                colorAttachments: [{\r\n                    view: this.screenView,\r\n                    clearValue: this.screenClearColor,\r\n                    loadOp: sliceIndex === 0 ? 'clear' : \"load\" as GPULoadOp,\r\n                    storeOp: 'store' as GPUStoreOp\r\n                }]\r\n            });\r\n            retinaPassEncoder.setPipeline(this.retinaRenderPipeline);\r\n            retinaPassEncoder.setBindGroup(0, this.retinaBindGroup);\r\n            let isSectionCount = this.displayConfig.sections.length && sliceIndex >= this.sliceGroupNum;\r\n            let lastCount = isSectionCount ? this.displayConfig.sections.length % this.sliceGroupSize : 0;\r\n            let count = isSectionCount ? (\r\n                // if is section group\r\n                sliceIndex == this.totalGroupNum - 1 && lastCount ? lastCount : this.sliceGroupSize\r\n            ) :\r\n                // if is not section group\r\n                this.enableEye3D ? (this.sliceGroupSize << 1) : this.sliceGroupSize;\r\n            retinaPassEncoder.draw(4, count, 0, 0);\r\n            retinaPassEncoder.end();\r\n        }\r\n        let screenPassEncoder = commandEncoder.beginRenderPass({\r\n            colorAttachments: [{\r\n                view: canvasView,\r\n                clearValue: this.screenClearColor,\r\n                loadOp: 'clear' as GPULoadOp,\r\n                storeOp: 'store' as GPUStoreOp\r\n            }]\r\n        });\r\n        screenPassEncoder.setPipeline(this.screenRenderPipeline);\r\n        screenPassEncoder.setBindGroup(0, this.screenBindGroup);\r\n        screenPassEncoder.draw(4);\r\n        screenPassEncoder.end();\r\n        gpu.device.queue.submit([commandEncoder.finish()]);\r\n        this.renderState = null;\r\n    } // end render\r\n    /** Set TetraSlicePipeline and prepare GPU resources.\r\n     *  Next calls should be function sliceTetras or setBindGroup.\r\n     */\r\n    beginTetras(pipeline: TetraSlicePipeline) {\r\n        if (!this.renderState) console.error(\"beginTetras should be called in a closure passed to render function\");\r\n        let { commandEncoder, sliceIndex, needClear } = this.renderState;\r\n        // clear triagle slice vertex output pointer to zero (emitIndex part)\r\n        commandEncoder.clearBuffer(this.emitIndexSliceBuffer, this.maxSlicesNumber << 4, 4 << this.sliceGroupSizeBit);\r\n        // clear triagle slice vertex output data to zero\r\n        commandEncoder.clearBuffer(pipeline.outputVaryBuffer[0]);\r\n\r\n        let computePassEncoder = commandEncoder.beginComputePass();\r\n        computePassEncoder.setPipeline(pipeline.computePipeline);\r\n        computePassEncoder.setBindGroup(0, pipeline.computeBindGroup0);\r\n        this.renderState.computePassEncoder = computePassEncoder;\r\n        this.renderState.pipeline = pipeline;\r\n    }\r\n    private _vec4 = new Vec4;\r\n    private _vec42 = new Vec4;\r\n    testWithFrustumData(obb: AABB, camMat: AffineMat4 | Obj4, modelMat?: AffineMat4 | Obj4): boolean {\r\n        if (!this.renderState) console.error(\"getFrustum should be called in a closure passed to render function\");\r\n        this.renderState.frustumRange ??= this.getFrustumRange(camMat);\r\n        if (!this.renderState.frustumRange) return true;\r\n        let relP = this._vec4.copy((camMat as AffineMat4).vec ?? (camMat as Obj4).position);\r\n        if (modelMat) relP.subs(((modelMat as AffineMat4).vec ?? (modelMat as Obj4).position));\r\n        if (!modelMat) {\r\n            for (let f of this.renderState.frustumRange) {\r\n                if (obb.testPlane(new Plane(f, f.dot(relP))) === 1) return false;\r\n            }\r\n        } else if ((modelMat as AffineMat4).mat) {\r\n            for (let f of this.renderState.frustumRange) { // todo: .t() to optimise\r\n                if (obb.testPlane(new Plane(this._vec42.mulmatvset((modelMat as AffineMat4).mat.t(), f), f.dot(relP))) === 1) return false;\r\n            }\r\n        } else {\r\n            for (let f of this.renderState.frustumRange) {\r\n                if (obb.testPlane(new Plane(this._vec42.rotatesconj((modelMat as Obj4).rotation), f.dot(relP))) === 1) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    getFrustumRange(camMat: AffineMat4 | Obj4) {\r\n        if (!this.renderState) console.error(\"getFrustum should be called in a closure passed to render function\");\r\n        let minslice = this.renderState.sliceIndex << this.sliceGroupSizeBit;\r\n        let maxslice = minslice + this.sliceGroupSize - 1;\r\n        let isRetinaGroup = this.slicesJsBuffer[(minslice << 2) + 1];\r\n        let frustum: number[];\r\n        // let refacing;\r\n        let camProj = 1 / this.camProjJsBuffer[1];\r\n        if (isRetinaGroup === 0) {\r\n            minslice = this.slicesJsBuffer[minslice << 2] * camProj;\r\n            maxslice = this.slicesJsBuffer[maxslice << 2] * camProj;\r\n            switch (this.currentRetinaFacing) {\r\n                case SliceFacing.POSZ:\r\n                    frustum = [-camProj, camProj, -camProj, camProj, minslice, maxslice];\r\n                    break;\r\n                case SliceFacing.NEGZ:\r\n                    frustum = [-camProj, camProj, -camProj, camProj, -maxslice, -minslice];\r\n                    break;\r\n                case SliceFacing.POSX:\r\n                    frustum = [minslice, maxslice, -camProj, camProj, -camProj, camProj];\r\n                    break;\r\n                case SliceFacing.NEGX:\r\n                    frustum = [-maxslice, -minslice, -camProj, camProj, -camProj, camProj];\r\n                    break;\r\n                case SliceFacing.POSY:\r\n                    frustum = [-camProj, camProj, minslice, maxslice, -camProj, camProj];\r\n                    break;\r\n                case SliceFacing.NEGY:\r\n                    frustum = [-camProj, camProj, -maxslice, -minslice, -camProj, camProj];\r\n                    break;\r\n            }\r\n            // refacing = SliceFacing[this.currentRetinaFacing];\r\n        } else {\r\n            // isRetinaGroup = new Uint32Array(new Float32Array([isRetinaGroup]).buffer)[0];\r\n            // todo\r\n        }\r\n        if ((camMat as AffineMat4).mat) {\r\n            return frustum ? [\r\n                new Vec4(-1, 0, 0, -frustum[0]).mulmatls((camMat as AffineMat4).mat),\r\n                new Vec4(1, 0, 0, frustum[1]).mulmatls((camMat as AffineMat4).mat),\r\n                new Vec4(0, -1, 0, -frustum[2]).mulmatls((camMat as AffineMat4).mat),\r\n                new Vec4(0, 1, 0, frustum[3]).mulmatls((camMat as AffineMat4).mat),\r\n                new Vec4(0, 0, -1, -frustum[4]).mulmatls((camMat as AffineMat4).mat),\r\n                new Vec4(0, 0, 1, frustum[5]).mulmatls((camMat as AffineMat4).mat),\r\n            ] : undefined;\r\n        } else {\r\n            return frustum ? [\r\n                new Vec4(-1, 0, 0, -frustum[0]).rotates((camMat as Obj4).rotation),\r\n                new Vec4(1, 0, 0, frustum[1]).rotates((camMat as Obj4).rotation),\r\n                new Vec4(0, -1, 0, -frustum[2]).rotates((camMat as Obj4).rotation),\r\n                new Vec4(0, 1, 0, frustum[3]).rotates((camMat as Obj4).rotation),\r\n                new Vec4(0, 0, -1, -frustum[4]).rotates((camMat as Obj4).rotation),\r\n                new Vec4(0, 0, 1, frustum[5]).rotates((camMat as Obj4).rotation),\r\n            ] : undefined;\r\n        }\r\n        // console.log({ isRetinaGroup, frustum,  refacing});\r\n    }\r\n    setBindGroup(index: number, bindGroup: GPUBindGroup) {\r\n        if (!this.renderState) console.error(\"setBindGroup should be called in a closure passed to render function\");\r\n        let { computePassEncoder } = this.renderState;\r\n        computePassEncoder.setBindGroup(index, bindGroup);\r\n    }\r\n    /** Compute slice of given bindgroup attribute data.\r\n     *  beginTetras should be called at first to specify a tetraSlicePipeline\r\n     *  Next calls should be function sliceTetras, setBindGroup or drawTetras.\r\n     */\r\n    sliceTetras(vertexBindGroup: GPUBindGroup, tetraCount: number, instanceCount?: number) {\r\n        if (!this.renderState) console.error(\"sliceTetras should be called in a closure passed to render function\");\r\n        let { computePassEncoder } = this.renderState;\r\n        if (vertexBindGroup) computePassEncoder.setBindGroup(1, vertexBindGroup);\r\n        computePassEncoder.dispatchWorkgroups(Math.ceil(tetraCount / 256), instanceCount); // todo: change workgroups\r\n    }\r\n    setWorldClearColor(color: GPUColor) {\r\n        this.crossRenderPassDescClear.colorAttachments[0].clearValue = color;\r\n    }\r\n    setScreenClearColor(color: GPUColor) {\r\n        this.screenClearColor = color;\r\n    }\r\n    /** This function draw slices on a internal framebuffer\r\n     *  Every beginTetras call should be end with drawTetras call\r\n     */\r\n    drawTetras(bindGroups?: { group: number, binding: GPUBindGroup }[]) {\r\n        if (!this.renderState) console.error(\"drawTetras should be called in a closure passed to render function\");\r\n        let { commandEncoder, computePassEncoder, pipeline, needClear, sliceIndex } = this.renderState;\r\n        computePassEncoder.end();\r\n\r\n        let slicePassEncoder = commandEncoder.beginRenderPass(\r\n            // this.crossRenderPassDescClear\r\n            needClear ? this.crossRenderPassDescClear : this.crossRenderPassDescLoad\r\n        );\r\n        slicePassEncoder.setPipeline(pipeline.renderPipeline);\r\n        for (let i = 0; i < pipeline.vertexOutNum; i++) {\r\n            slicePassEncoder.setVertexBuffer(i, pipeline.outputVaryBuffer[i]);\r\n        }\r\n        if (bindGroups) {\r\n            for (let { group, binding } of bindGroups) {\r\n                slicePassEncoder.setBindGroup(group, binding);\r\n            }\r\n        }\r\n        // bitshift: outputBufferSize / 16 for vertices number, / sliceGroupSize for one stride\r\n        let bitshift = 4 + this.sliceGroupSizeBit;\r\n        let verticesStride = this.maxCrossSectionBufferSize >> bitshift;\r\n        let offsetVert = 0;\r\n        let sliceJsOffset = (sliceIndex << (2 + this.sliceGroupSizeBit)) + 3;\r\n        let vpShift = this.viewportCompressShift;\r\n        for (let c = 0; c < this.sliceGroupSize; c++, offsetVert += verticesStride) {\r\n            let vp = f32_to_u32(this.slicesJsBuffer[sliceJsOffset + (c << 2)]);\r\n            slicePassEncoder.setViewport(\r\n                ((vp >> 24) & 0xFF) << vpShift,\r\n                ((vp >> 16) & 0xFF) << vpShift,\r\n                ((vp >> 8) & 0xFF) << vpShift,\r\n                (vp & 0xFF) << vpShift,\r\n                0, 1\r\n            );\r\n            slicePassEncoder.draw(verticesStride, 1, offsetVert);\r\n        }\r\n        slicePassEncoder.end();\r\n        this.renderState.needClear = false;\r\n    }\r\n    async createRaytracingPipeline(desc: RaytracingPipelineDescriptor) {\r\n        let code = desc.code.replace(/@ray(\\s)/g, \"@vertex$1\");\r\n        const reflect = new wgslreflect.WgslReflect(code);\r\n        let mainRayFn = reflect.functions.filter(\r\n            e => e.attributes && e.attributes.some(a => a.name === \"vertex\") && e.name == desc.rayEntryPoint\r\n        )[0];\r\n        if (!mainRayFn) console.error(\"Raytracing pipeline: Entry point does not exist.\");\r\n        // let mainFragFn = reflect.functions.filter(\r\n        //     e => e.attributes && e.attributes.some(a => a.name === \"fragment\") && e.name == desc.fragment.entryPoint\r\n        // )[0];\r\n        let { input, output, call } = wgslreflect.getFnInputAndOutput(reflect, mainRayFn,\r\n            {\r\n                \"builtin(ray_origin)\": \"camRayOri\",\r\n                \"builtin(ray_direction)\": \"camRayDir\",\r\n                \"builtin(voxel_coord)\": \"voxelCoord\",\r\n                \"builtin(aspect_matrix)\": \"refacingMat3 * mat3x3<f32>(aspect,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0) * refacingMat3\",\r\n            },\r\n            [\"location(0)\", \"location(1)\", \"location(2)\", \"location(3)\", \"location(4)\", \"location(5)\"]\r\n        );\r\n        let dealRefacingCall = \"\";\r\n        if (input.has(\"builtin(aspect_matrix)\")) {\r\n            dealRefacingCall = \"let refacingMat3 = mat3x3<f32>(refacingMat[0].xyz,refacingMat[1].xyz,refacingMat[2].xyz);\"\r\n        }\r\n        let retunTypeMembers: string;\r\n        let outputMembers: string;\r\n        if (mainRayFn.return.attributes) {\r\n            outputMembers = output[\"return\"].expr;\r\n            retunTypeMembers = `@${wgslreflect.parseAttr(mainRayFn.return.attributes)} ${wgslreflect.parseTypeName(mainRayFn.return)}`;\r\n        } else {\r\n            let st = reflect.structs.filter(s => s.name === mainRayFn.return.name)[0];\r\n            if (!st) console.error(\"No attribute found\");\r\n            outputMembers = st.members.map(m => output[wgslreflect.parseAttr(m.attributes)].expr).join(\",\\n\");\r\n            retunTypeMembers = st.members.map(m => `@${wgslreflect.parseAttr(m.attributes)} ${m.name}: ${wgslreflect.parseTypeName(m.type)}`).join(\",\\n\");\r\n        }\r\n\r\n        // ${wgslreflect.parseAttr(mainRayFn.return.attributes)} userRayOut: ${wgslreflect.parseTypeName(mainRayFn.return)}\r\n        let shaderCode = this.refacingMatsCode + `\r\nstruct _SliceInfo{\r\n    slicePos: f32,\r\n    refacing: u32,\r\n    flag: u32,\r\n    viewport: u32,\r\n}\r\nstruct _vOut{\r\n    @builtin(position) pos: vec4<f32>,\r\n    ${retunTypeMembers}\r\n}\r\nstruct AffineMat{\r\n    matrix: mat4x4<f32>,\r\n    vector: vec4<f32>,\r\n}\r\n@group(0) @binding(0) var<storage, read> _slice: array<_SliceInfo, ${this.maxSlicesNumber}>;\r\n@group(0) @binding(1) var<uniform> _sliceoffset : u32;\r\n@group(0) @binding(2) var<uniform> _refacingMat : u32;\r\n@group(0) @binding(3) var<uniform> _eye4dOffset : f32;\r\n@group(0) @binding(4) var<uniform> _camProj: vec4<f32>;\r\n@group(0) @binding(5) var<uniform> thumbnailViewport : array<vec4<f32>,16>;\r\nfn apply(afmat: AffineMat, points: mat4x4<f32>) -> mat4x4<f32>{\r\n    let biais = mat4x4<f32>(afmat.vector, afmat.vector, afmat.vector, afmat.vector);\r\n    return afmat.matrix * points + biais;\r\n}\r\nfn applyinv(afmat: AffineMat, points: mat4x4<f32>) -> mat4x4<f32>{\r\n    let biais = mat4x4<f32>(afmat.vector, afmat.vector, afmat.vector, afmat.vector);\r\n    return transpose(afmat.matrix) * (points - biais);\r\n}\r\n${code.replace(/@vertex/g, \" \").replace(/@builtin\\s*\\(\\s*(ray_origin|ray_direction|voxel_coord|aspect_matrix)\\s*\\)\\s*/g, \" \")}\r\n@vertex fn mainVertex(@builtin(vertex_index) vindex:u32, @builtin(instance_index) i_index:u32) -> _vOut{\r\n    const pos = array<vec2<f32>, 4>(\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0, 1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>( 1.0, 1.0),\r\n    );\r\n    let sliceInfo = _slice[_sliceoffset + i_index];\r\n    let sliceFlag = _slice[_sliceoffset].flag;\r\n    var refacingEnum : u32;\r\n\r\n    let posidx = pos[vindex];\r\n    let coord = vec2<f32>(posidx.x, posidx.y);\r\n    var aspect = 1.0;\r\n    var rayPos = vec4<f32>(0.0);// no eye offset for retina\r\n    var rayDir = vec4<f32>(0.0,0.0,0.0,-1.0);// point forward for Orthographic camera\r\n    if(_camProj.x < 0){\r\n        rayPos = vec4<f32>(coord.x/_camProj.x * aspect, coord.y/_camProj.y, sliceInfo.slicePos/_camProj.x, -_camProj.w/_camProj.z);\r\n    }else{\r\n        if(sliceFlag == 0){\r\n            refacingEnum = _refacingMat;\r\n        }else{\r\n            refacingEnum = sliceInfo.refacing;\r\n            let vp = thumbnailViewport[_sliceoffset + i_index - (_refacingMat >> 5)];\r\n            aspect = vp.z / vp.w;\r\n            rayPos = vec4<f32>(-_eye4dOffset * (f32(sliceInfo.refacing >> 3) - 1.0), 0.0, 0.0, 0.0);\r\n        }\r\n        rayDir = vec4<f32>(coord.x/_camProj.x * aspect, coord.y/_camProj.y, sliceInfo.slicePos/_camProj.x, -1.0);\r\n    }\r\n    let refacingMat = refacingMats[refacingEnum & 7];\r\n    let camRayDir = refacingMat * rayDir;\r\n    let camRayOri = refacingMat * rayPos;\r\n    let voxelCoord = (refacingMat * vec4<f32>(coord, sliceInfo.slicePos,0.0)).xyz;\r\n    ${dealRefacingCall}\r\n    ${call}\r\n    let x = f32(((sliceInfo.viewport >> 24) & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.width};\r\n    let y = f32(((sliceInfo.viewport >> 16) & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.height};\r\n    let w = f32(((sliceInfo.viewport >> 8 ) & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.width};\r\n    let h = f32((sliceInfo.viewport & 0xFF) << ${this.viewportCompressShift}) * ${1 / this.sliceTextureSize.height};\r\n    let texelCoord = array<vec2<f32>, 4>(\r\n        vec2<f32>(x, y+h),\r\n        vec2<f32>(x, y),\r\n        vec2<f32>(x+w, y+h),\r\n        vec2<f32>(x+w, y),\r\n    )[vindex] * 2.0 - vec2<f32>(1.0);\r\n    \r\n    if(sliceInfo.slicePos > 1.0){\r\n        return _vOut(\r\n            vec4<f32>(0.0,0.0,0.0, -1.0),\r\n            ${outputMembers}\r\n        );\r\n    }else{\r\n        return _vOut(\r\n            vec4<f32>(texelCoord.x,-texelCoord.y, 0.999999, 1.0),\r\n            ${outputMembers}\r\n        );\r\n    }\r\n}\r\nfn calDepth(distance: f32)->f32{\r\n    return -_camProj.z + _camProj.w / distance;\r\n}\r\n`;\r\n        let module = this.gpu.device.createShaderModule({ code: shaderCode });\r\n        let pipeline = await this.gpu.device.createRenderPipelineAsync({\r\n            layout: 'auto',\r\n            vertex: {\r\n                module,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                module,\r\n                entryPoint: desc.fragmentEntryPoint,\r\n                targets: [{ format: this.gpu.preferredFormat }]\r\n            },\r\n            primitive: {\r\n                topology: 'triangle-strip',\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less',\r\n                format: 'depth24plus',\r\n            }\r\n        });\r\n\r\n        let buffers = [\r\n            { buffer: this.emitIndexSliceBuffer },\r\n            { buffer: this.sliceOffsetBuffer },\r\n            { buffer: this.refacingBuffer },\r\n            { buffer: this.eyeCrossBuffer },\r\n            { buffer: this.camProjBuffer },\r\n            { buffer: this.thumbnailViewportBuffer },\r\n        ];\r\n        return {\r\n            pipeline, bindGroup0: this.gpu.createBindGroup(pipeline, 0, buffers)\r\n        };\r\n    }\r\n    drawRaytracing(pipeline: RaytracingPipeline, bindGroups?: GPUBindGroup[]) {\r\n        if (!this.renderState) console.error(\"drawRaytracing should be called in a closure passed to render function\");\r\n        let { commandEncoder, needClear } = this.renderState;\r\n        let slicePassEncoder = commandEncoder.beginRenderPass(\r\n            needClear ? this.crossRenderPassDescClear : this.crossRenderPassDescLoad\r\n        );\r\n        slicePassEncoder.setPipeline(pipeline.pipeline);\r\n        slicePassEncoder.setBindGroup(0, pipeline.bindGroup0);\r\n        if (bindGroups && bindGroups[0]) slicePassEncoder.setBindGroup(1, bindGroups[0]);\r\n        slicePassEncoder.draw(4, this.sliceGroupSize);\r\n        slicePassEncoder.end();\r\n        this.renderState.needClear = false;\r\n    }\r\n}; // end class\r\nfunction f32_to_u32(f32: number) {\r\n    return new Uint32Array(new Float32Array([f32]).buffer)[0];\r\n}\r\nfunction u32_to_f32(u32: number) {\r\n    return new Float32Array(new Uint32Array([u32]).buffer)[0];\r\n}\r\ntype SinglePipelineLayout = GPUPipelineLayout | GPUAutoLayoutMode | GPUBindGroupLayoutDescriptor[];\r\nexport type SlicePipelineLayout = GPUAutoLayoutMode | {\r\n    computeLayout: SinglePipelineLayout;\r\n    renderLayout: SinglePipelineLayout;\r\n}","/// <reference types=\"@webgpu/types\" />\r\nexport class GPU {\r\n    adapter: GPUAdapter;\r\n    device: GPUDevice;\r\n    preferredFormat: GPUTextureFormat;\r\n    async init(): Promise<GPU | null> {\r\n        if (!('gpu' in navigator)) {\r\n            console.warn(\"User agent doesn't support WebGPU.\");\r\n            return null;\r\n        }\r\n        const gpuAdapter = await navigator.gpu.requestAdapter({\r\n            powerPreference: 'high-performance'\r\n        });\r\n        if (!gpuAdapter) {\r\n            console.warn('No WebGPU adapters found.');\r\n            return null;\r\n        }\r\n        this.adapter = gpuAdapter;\r\n        this.preferredFormat = navigator.gpu.getPreferredCanvasFormat();\r\n        this.device = await gpuAdapter.requestDevice();\r\n        this.device.lost.then((info) => {\r\n            console.error(`WebGPU device was lost: ${info.message}`);\r\n            this.device = null;\r\n            if (info.reason != 'destroyed') {\r\n                this.init();\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    createBuffer(usage: number, buffer_or_size: (ArrayLike<number> & ArrayBuffer) | number, label?: string) {\r\n        let gpuBuffer = this.device.createBuffer({\r\n            size: (buffer_or_size as ArrayLike<number> & ArrayBuffer)?.byteLength ?? (buffer_or_size as number),\r\n            usage,\r\n            mappedAtCreation: typeof buffer_or_size != \"number\"\r\n        });\r\n        if (typeof buffer_or_size != \"number\") {\r\n            let jsBuffer = new (buffer_or_size.constructor as ArrayBufferConstructor)(gpuBuffer.getMappedRange());\r\n            (jsBuffer as Float32Array).set(buffer_or_size);\r\n            gpuBuffer.unmap();\r\n        }\r\n        return gpuBuffer;\r\n    }\r\n    createBindGroup(pipeline: GPUPipelineBase, index: number, entries: Array<GPUBindingResource>, label?: string) {\r\n        let descriptor: GPUBindGroupDescriptor = {\r\n            layout: pipeline.getBindGroupLayout(index),\r\n            entries: entries.map((e, i) => ({ binding: i, resource: e }))\r\n        };\r\n        if (label) descriptor.label = label;\r\n        return this.device.createBindGroup(descriptor);\r\n    }\r\n    getContext(dom: HTMLCanvasElement, config?: GPUContextConfig): GPUCanvasContext {\r\n        let ctxt = dom.getContext('webgpu') as unknown as GPUCanvasContext;\r\n        ctxt.configure({\r\n            device: this.device,\r\n            format: config?.format ?? this.preferredFormat,\r\n            ...config\r\n        });\r\n        return ctxt;\r\n    }\r\n}\r\ninterface ArrayBufferConstructor {\r\n    readonly prototype: ArrayBuffer;\r\n    new(byteLength: number): ArrayBuffer;\r\n    new(array: ArrayLike<number> | ArrayBufferLike): ArrayBuffer;\r\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): ArrayBuffer;\r\n    isView(arg: any): arg is ArrayBufferView;\r\n}\r\ninterface GPUContextConfig {\r\n    format?: GPUTextureFormat;\r\n    alphaMode?: GPUCanvasAlphaMode;\r\n    usage?: GPUTextureUsageFlags;\r\n    viewFormats?: Iterable<GPUTextureFormat>;\r\n    colorSpace?: PredefinedColorSpace;\r\n}","export function toIndexbuffer(srcArr: Float32Array, dstArr: number[], dstIdxArr: number[], stride: number) {\r\n    for (let i = 0, l = srcArr.length; i < l; i += stride) {\r\n        let idx = indexOf(srcArr, i, dstArr, 4);\r\n        if (idx === -1) {\r\n            idx = dstArr.length;\r\n            for (let q = 0; q < stride; q++) {\r\n                dstArr.push(srcArr[i + q]);\r\n            }\r\n        }\r\n        idx >>= 2;\r\n        dstIdxArr.push(idx);\r\n    }\r\n}\r\nexport function indexOf(\r\n    srcArr: Float32Array, srcIdx: number, dstArr: number[], stride: number\r\n) {\r\n    for (let i = 0, j = 0, l = dstArr.length; i < l; i += stride, j++) {\r\n        let same = true;\r\n        for (let q = 0; q < stride; q++) {\r\n            same &&= srcArr[srcIdx + q] === dstArr[i + q];\r\n        }\r\n        if (same) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport function toNonIndex(srcArr: Float32Array, idxArr: Uint32Array, dstArr: Float32Array, stride: number) {\r\n    let ptr = 0;\r\n    for (let i = 0, l = idxArr.length; i < l; i++) {\r\n        let idx = idxArr[i] * stride;\r\n        for (let q = 0; q < stride; q++) {\r\n            dstArr[ptr++] = srcArr[idx + q];\r\n        }\r\n    }\r\n}","import { toIndexbuffer, toNonIndex } from \"../index\";\r\n\r\n/** FaceMesh store traditional 2-face mesh as triangle or quad list\r\n *  This mesh is for constructing complex tetrameshes\r\n *  It is not aimed for rendering purpose\r\n */\r\nexport interface FaceMesh {\r\n    quad?: {\r\n        position: Float32Array;\r\n        normal?: Float32Array;\r\n        uvw?: Float32Array;\r\n        count?: number;\r\n    };\r\n    triangle?: {\r\n        position: Float32Array;\r\n        normal?: Float32Array;\r\n        uvw?: Float32Array;\r\n        count?: number;\r\n    };\r\n}\r\n\r\nexport interface FaceIndexMesh {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    quad?: {\r\n        position: Uint32Array;\r\n        normal?: Uint32Array;\r\n        uvw?: Uint32Array;\r\n        count?: number;\r\n    };\r\n    triangle?: {\r\n        position: Uint32Array;\r\n        normal?: Uint32Array;\r\n        uvw?: Uint32Array;\r\n        count?: number;\r\n    };\r\n}\r\n\r\nexport function toIndexMesh(m: FaceMesh) {\r\n    let position = [];\r\n    let normal = [];\r\n    let uvw = [];\r\n    let posIdx4 = [];\r\n    let normalIdx4 = [];\r\n    let uvwIdx4 = [];\r\n    let posIdx3 = [];\r\n    let normalIdx3 = [];\r\n    let uvwIdx3 = [];\r\n    if (m.quad) {\r\n        toIndexbuffer(m.quad.position, position, posIdx4, 4);\r\n        if (m.quad.normal) toIndexbuffer(m.quad.normal, normal, normalIdx4, 4);\r\n        if (m.quad.uvw) toIndexbuffer(m.quad.uvw, uvw, uvwIdx4, 4);\r\n    }\r\n    if (m.triangle) {\r\n        toIndexbuffer(m.triangle.position, position, posIdx3, 4);\r\n        if (m.triangle.normal) toIndexbuffer(m.triangle.normal, normal, normalIdx3, 4);\r\n        if (m.triangle.uvw) toIndexbuffer(m.triangle.uvw, uvw, uvwIdx3, 4);\r\n    }\r\n    let out: FaceIndexMesh = {\r\n        position: new Float32Array(position)\r\n    };\r\n    if (m.quad) {\r\n        out.quad = {\r\n            position: new Uint32Array(posIdx4)\r\n        }\r\n        if (m.quad.normal) out.quad.normal = new Uint32Array(normalIdx4);\r\n        if (m.quad.uvw) out.quad.uvw = new Uint32Array(uvwIdx4);\r\n    }\r\n    if (m.triangle) {\r\n        out.triangle = {\r\n            position: new Uint32Array(posIdx4)\r\n        }\r\n        if (m.triangle.normal) out.triangle.normal = new Uint32Array(normalIdx4);\r\n        if (m.triangle.uvw) out.triangle.uvw = new Uint32Array(uvwIdx4);\r\n    }\r\n    if (normal.length) out.normal = new Float32Array(normal);\r\n    if (uvw.length) out.uvw = new Float32Array(uvw);\r\n    return out;\r\n}\r\nexport function toNonIndexMesh(m: FaceIndexMesh) {\r\n    let out: FaceMesh = {};\r\n    if (m.quad) {\r\n        let count = m.quad.position.length << 2;\r\n        out.quad = {\r\n            position: new Float32Array(count),\r\n            count: count >> 4\r\n        };\r\n        toNonIndex(m.position, m.quad.position, out.quad.position, 4);\r\n        if (m.normal) {\r\n            out.quad.normal = new Float32Array(count);\r\n            toNonIndex(m.normal, m.quad.normal, out.quad.normal, 4);\r\n        }\r\n        if (m.uvw) {\r\n            out.quad.uvw = new Float32Array(count);\r\n            toNonIndex(m.uvw, m.quad.uvw, out.quad.uvw, 4);\r\n        }\r\n    }\r\n    if (m.triangle) {\r\n        let count = m.triangle.position.length << 2;\r\n        out.triangle = {\r\n            position: new Float32Array(count),\r\n            count: count / 12\r\n        };\r\n        toNonIndex(m.position, m.triangle.position, out.triangle.position, 4);\r\n        if (m.normal) {\r\n            out.triangle.normal = new Float32Array(count);\r\n            toNonIndex(m.normal, m.triangle.normal, out.triangle.normal, 4);\r\n        }\r\n        if (m.uvw) {\r\n            out.triangle.uvw = new Float32Array(count);\r\n            toNonIndex(m.uvw, m.triangle.uvw, out.triangle.uvw, 4);\r\n        }\r\n    }\r\n    return out;\r\n}\r\n","import { Vec2 } from \"../../math/algebra/vec2\";\r\nimport { Vec4 } from \"../../math/algebra/vec4\";\r\nimport { FaceIndexMesh } from \"./facemesh\";\r\nexport function sphere(u, v) {\r\n\r\n}\r\nexport function parametricSurface(\r\n    fn: (inputuvw: Vec2, outputPosition: Vec4, outputNormal: Vec4) => void,\r\n    uSegment: number, vSegment: number\r\n) {\r\n    if (uSegment < 1) uSegment = 1;\r\n    if (vSegment < 1) vSegment = 1;\r\n    let arraySize = vSegment * vSegment << 4;\r\n    uSegment++; vSegment++;\r\n    let uvw_seg = uSegment * uSegment;\r\n    let positions = new Float32Array((uvw_seg) << 2);\r\n    let normals = new Float32Array((uvw_seg) << 2);\r\n    let uvws = new Float32Array((uvw_seg) << 2);\r\n    let position = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let inputuvw = new Vec2;\r\n    let outputVertex = new Vec4;\r\n    let outputNormal = new Vec4;\r\n    let ptr = 0;\r\n    let idxPtr = 0;\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    for (let u_index = 0; u_index < uSegment; u_index++) {\r\n        inputuvw.x = u_index / (uSegment - 1);\r\n        let offset = vSegment * u_index;\r\n        for (let v_index = 0; v_index < vSegment; v_index++, offset++) {\r\n            inputuvw.y = v_index / (vSegment - 1);\r\n            fn(inputuvw, outputVertex, outputNormal);\r\n            positions[ptr++] = outputVertex.x;\r\n            positions[ptr++] = outputVertex.y;\r\n            positions[ptr++] = outputVertex.z;\r\n            positions[ptr++] = outputVertex.w;\r\n            ptr -= 4;\r\n            normals[ptr++] = outputNormal.x;\r\n            normals[ptr++] = outputNormal.y;\r\n            normals[ptr++] = outputNormal.z;\r\n            normals[ptr++] = outputNormal.w;\r\n            ptr -= 4;\r\n            uvws[ptr++] = inputuvw.x;\r\n            uvws[ptr++] = inputuvw.y;\r\n            uvws[ptr++] = 0;\r\n            uvws[ptr++] = 0;\r\n            if (u_index && v_index) {\r\n                // todo: if same -> no push or push to triangle\r\n                pushIdx(offset << 2);\r\n                pushIdx(offset - 1 << 2);\r\n                pushIdx(offset - vSegment << 2);\r\n                pushIdx(offset - vSegment - 1 << 2);\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        quad: { position, normal, uvw }\r\n    }\r\n}\r\n/** m must be a manifold or manifold with border */\r\nexport function findBorder(m: FaceIndexMesh) {\r\n    if (!m.position) console.error(\"findBorder can onnly apply to FaceIndexMesh.\");\r\n    let borders = [];\r\n    for (let i = 0, l = m.quad?.position?.length; i < l!; i += 4) {\r\n        let p = m.quad!.position;\r\n        pushBorder(p[i], p[i + 1]);\r\n        pushBorder(p[i + 1], p[i + 2]);\r\n        pushBorder(p[i + 2], p[i + 3]);\r\n        pushBorder(p[i + 3], p[i]);\r\n    }\r\n    for (let i = 0, l = m.triangle?.position?.length; i < l!; i += 3) {\r\n        let p = m.triangle!.position;\r\n        pushBorder(p[i], p[i + 1]);\r\n        pushBorder(p[i + 1], p[i + 2]);\r\n        pushBorder(p[i + 2], p[i]);\r\n    }\r\n    function pushBorder(a: number, b: number) {\r\n        let count = 0;\r\n        let found = false;\r\n        for (let [j, k] of borders) {\r\n            if (j === b && k === a) {\r\n                found = true;\r\n                break;\r\n            }\r\n            if (j === a && k === b) {\r\n                found = true;\r\n                console.warn(\"findBorder: Non manifold mesh found.\");\r\n                break;\r\n            }\r\n            count++;\r\n        }\r\n        if (found) {\r\n            borders.splice(count, 1);\r\n        } else {\r\n            borders.push([a, b]);\r\n        }\r\n    }\r\n    return borders;\r\n}","import { AffineMat4, Obj4 } from \"../../math/algebra/affine\";\r\nimport { Vec4 } from \"../../math/algebra/vec4\";\r\nimport { _180, _360, _90 } from \"../../math/const\";\r\nimport { toIndexbuffer, toNonIndex } from \"../index\";\r\n\r\n/** Tetramesh store 4D mesh as tetrahedral list\r\n *  Each tetrahedral uses four vertices in the position list\r\n */\r\nexport interface TetraMesh {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    count?: number;\r\n}\r\n/** TetraIndexMesh is not supported for tetraslice rendering\r\n *  It is only used in data storage and mesh construction\r\n */\r\nexport interface TetraIndexMesh {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    positionIndex: Uint32Array;\r\n    normalIndex?: Uint32Array;\r\n    uvwIndex?: Uint32Array;\r\n    count?: number;\r\n}\r\nexport function toIndexMesh(m: TetraMesh) {\r\n    let position = [];\r\n    let normal = [];\r\n    let uvw = [];\r\n    let posIdx = [];\r\n    let normalIdx = [];\r\n    let uvwIdx = [];\r\n    toIndexbuffer(m.position, position, posIdx, 4);\r\n    if (m.normal) toIndexbuffer(m.normal, normal, normalIdx, 4);\r\n    if (m.uvw) toIndexbuffer(m.uvw, uvw, uvwIdx, 4);\r\n\r\n    let out: TetraIndexMesh = {\r\n        position: new Float32Array(position),\r\n        positionIndex: new Uint32Array(posIdx)\r\n    };\r\n    if (m.normal) out.normalIndex = new Uint32Array(normalIdx);\r\n    if (m.uvw) out.uvwIndex = new Uint32Array(uvwIdx);\r\n    if (normal.length) out.normal = new Float32Array(normal);\r\n    if (uvw.length) out.uvw = new Float32Array(uvw);\r\n    return out;\r\n}\r\nexport function toNonIndexMesh(m: TetraIndexMesh) {\r\n    let count = m.position.length << 2;\r\n    let out: TetraMesh = {\r\n        position: new Float32Array(count),\r\n        count: count >> 4\r\n    };\r\n    toNonIndex(m.position, m.positionIndex, out.position, 4);\r\n    if (m.normal) {\r\n        out.normal = new Float32Array(count);\r\n        toNonIndex(m.normal, m.normalIndex, out.normal, 4);\r\n    }\r\n    if (m.uvw) {\r\n        out.uvw = new Float32Array(count);\r\n        toNonIndex(m.uvw, m.uvwIndex, out.uvw, 4);\r\n    }\r\n\r\n    return out;\r\n}\r\nexport function applyAffineMat4(mesh: TetraMesh, am: AffineMat4) {\r\n    let vp = new Vec4();\r\n    for (let i = 0; i < mesh.position.length; i += 4) {\r\n        vp.set(\r\n            mesh.position[i],\r\n            mesh.position[i + 1],\r\n            mesh.position[i + 2],\r\n            mesh.position[i + 3],\r\n        ).mulmatls(am.mat).adds(am.vec).writeBuffer(mesh.position, i);\r\n        if (mesh.normal) {\r\n            vp.set(\r\n                mesh.normal[i],\r\n                mesh.normal[i + 1],\r\n                mesh.normal[i + 2],\r\n                mesh.normal[i + 3],\r\n            ).mulmatls(am.mat).writeBuffer(mesh.position, i);\r\n        }\r\n    }\r\n    return mesh;\r\n}\r\nexport function applyObj4(mesh: TetraMesh, obj: Obj4) {\r\n    let vp = new Vec4();\r\n    let scaleinv: Vec4;\r\n    if (obj.scale && mesh.normal) {\r\n        scaleinv = new Vec4(1 / obj.scale.x, 1 / obj.scale.y, 1 / obj.scale.z, 1 / obj.scale.w);\r\n    }\r\n    for (let i = 0; i < mesh.position.length; i += 4) {\r\n        if (obj.scale) {\r\n            vp.set(\r\n                mesh.position[i] * obj.scale.x,\r\n                mesh.position[i + 1] * obj.scale.y,\r\n                mesh.position[i + 2] * obj.scale.z,\r\n                mesh.position[i + 3] * obj.scale.w,\r\n            ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.position, i);\r\n            if (mesh.normal) {\r\n                vp.set(\r\n                    mesh.normal[i] * scaleinv.x,\r\n                    mesh.normal[i + 1] * scaleinv.y,\r\n                    mesh.normal[i + 2] * scaleinv.z,\r\n                    mesh.normal[i + 3] * scaleinv.w,\r\n                ).rotates(obj.rotation).norms().writeBuffer(mesh.normal, i);\r\n            }\r\n        } else {\r\n            vp.set(\r\n                mesh.position[i],\r\n                mesh.position[i + 1],\r\n                mesh.position[i + 2],\r\n                mesh.position[i + 3],\r\n            ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.position, i);\r\n            if (mesh.normal) {\r\n                vp.set(\r\n                    mesh.normal[i],\r\n                    mesh.normal[i + 1],\r\n                    mesh.normal[i + 2],\r\n                    mesh.normal[i + 3],\r\n                ).rotates(obj.rotation).writeBuffer(mesh.normal, i);\r\n            }\r\n        }\r\n    }\r\n    return mesh;\r\n}\r\nexport function concat(mesh1: TetraMesh, mesh2: TetraMesh): TetraMesh {\r\n    let position = new Float32Array(mesh1.position.length + mesh2.position.length);\r\n    position.set(mesh1.position);\r\n    position.set(mesh2.position, mesh1.position.length);\r\n    let ret: TetraMesh = { position, count: position.length << 4 };\r\n    if (mesh1.normal && mesh2.normal) {\r\n        let normal = new Float32Array(mesh1.normal.length + mesh2.normal.length);\r\n        normal.set(mesh1.normal);\r\n        normal.set(mesh2.normal, mesh1.normal.length);\r\n        ret.normal = normal;\r\n    }\r\n    if (mesh1.uvw && mesh2.uvw) {\r\n        let uvw = new Float32Array(mesh1.uvw.length + mesh2.uvw.length);\r\n        uvw.set(mesh1.uvw);\r\n        uvw.set(mesh2.uvw, mesh1.uvw.length);\r\n        ret.uvw = uvw;\r\n    }\r\n    return ret;\r\n}\r\nexport function concatarr(meshes: TetraMesh[]): TetraMesh {\r\n    let length = 0;\r\n    let hasNormal = true;\r\n    let hasUvw = true;\r\n    for (let i = 0; i < meshes.length; i++) {\r\n        length += meshes[i].position.length;\r\n        hasUvw = hasUvw && (meshes[i].uvw ? true : false);\r\n        hasNormal = hasNormal && (meshes[i].normal ? true : false);\r\n    }\r\n    let position = new Float32Array(length);\r\n    let ret: TetraMesh = { position, count: length << 4 };\r\n    let normal: Float32Array, uvw: Float32Array;\r\n    if (hasNormal) {\r\n        normal = new Float32Array(length);\r\n        ret.normal = normal;\r\n    }\r\n    if (hasUvw) {\r\n        uvw = new Float32Array(length);\r\n        ret.uvw = uvw;\r\n    }\r\n    length = 0;\r\n    for (let i = 0; i < meshes.length; i++) {\r\n        position.set(meshes[i].position, length);\r\n        if (hasNormal) {\r\n            normal.set(meshes[i].normal, length);\r\n        }\r\n        if (hasUvw) {\r\n            uvw.set(meshes[i].uvw, length);\r\n        }\r\n        length += meshes[i].position.length;\r\n    }\r\n    return ret;\r\n}\r\nexport function clone(mesh: TetraMesh): TetraMesh {\r\n    let ret: TetraMesh = {\r\n        position: mesh.position.slice(0),\r\n        count: mesh.count\r\n    }\r\n    if (mesh.uvw) ret.uvw = mesh.uvw.slice(0);\r\n    if (mesh.normal) ret.normal = mesh.normal.slice(0);\r\n    return ret;\r\n}\r\n\r\n","import { Obj4 } from \"../../math/algebra/affine\";\r\nimport { Bivec } from \"../../math/algebra/bivec\";\r\nimport { Mat4 } from \"../../math/algebra/mat4\";\r\nimport { Rotor } from \"../../math/algebra/rotor\";\r\nimport { Vec3 } from \"../../math/algebra/vec3\";\r\nimport { Vec4 } from \"../../math/algebra/vec4\";\r\nimport { _180, _360, _90 } from \"../../math/const\";\r\nimport { Spline } from \"../../math/geometry/spline\";\r\nimport * as face from \"../../mesh/face\";\r\nimport { applyObj4, clone, concatarr, TetraMesh } from \"./tetramesh\";\r\n\r\nexport let cube: TetraMesh = {\r\n    position: new Float32Array([\r\n        1, 0, -1, -1,\r\n        1, 0, 1, 1,\r\n        -1, 0, -1, 1,\r\n        -1, 0, 1, -1,\r\n\r\n        -1, 0, -1, -1,\r\n        1, 0, -1, -1,\r\n        -1, 0, -1, 1,\r\n        -1, 0, 1, -1,\r\n\r\n        1, 0, 1, 1,\r\n        -1, 0, 1, 1,\r\n        -1, 0, -1, 1,\r\n        -1, 0, 1, -1,\r\n\r\n        1, 0, 1, 1,\r\n        1, 0, -1, -1,\r\n        1, 0, 1, -1,\r\n        -1, 0, 1, -1,\r\n\r\n        1, 0, 1, 1,\r\n        1, 0, -1, -1,\r\n        -1, 0, -1, 1,\r\n        1, 0, -1, 1,\r\n    ]),\r\n    normal: new Float32Array([\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n    ]),\r\n    uvw: new Float32Array([\r\n        1, -1, -1, 0,\r\n        1, 1, 1, 0,\r\n        -1, -1, 1, 0,\r\n        -1, 1, -1, 0,\r\n        -1, -1, -1, 0,\r\n        1, -1, -1, 0,\r\n        -1, -1, 1, 0,\r\n        -1, 1, -1, 0,\r\n        1, 1, 1, 0,\r\n        -1, 1, 1, 0,\r\n        -1, -1, 1, 0,\r\n        -1, 1, -1, 0,\r\n        1, 1, 1, 0,\r\n        1, -1, -1, 0,\r\n        1, 1, -1, 0,\r\n        -1, 1, -1, 0,\r\n        1, 1, 1, 0,\r\n        1, -1, -1, 0,\r\n        -1, -1, 1, 0,\r\n        1, -1, 1, 0,\r\n    ]),\r\n    count: 5\r\n}\r\n\r\nexport function tesseract(): TetraMesh {\r\n    let rotor = new Rotor();\r\n    let biv = new Bivec();\r\n    let yface = applyObj4(clone(cube), new Obj4(Vec4.y, rotor.expset(biv.set(0, _90))));\r\n    let meshes = [\r\n        biv.set(_90).exp(),\r\n        biv.set(-_90).exp().mulsl(rotor.expset(biv.set(0, 0, 0, 0, _180))),\r\n        biv.set(0, 0, 0, _90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(0, 0, 0, -_90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(0, 0, 0, 0, _90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(0, 0, 0, 0, -_90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(_180).exp(),\r\n    ].map(r => applyObj4(clone(yface), new Obj4(new Vec4(), r)));\r\n    meshes.push(yface);\r\n    let m = concatarr(meshes);\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 20; j++) {\r\n            m.uvw[i * 80 + j * 4 + 3] = i;\r\n        }\r\n    }\r\n    return m;\r\n}\r\nexport function inverseNormal(mesh: TetraMesh): TetraMesh {\r\n    if (mesh.normal) {\r\n        for (let i = 0, l = mesh.normal.length; i < l; i++) {\r\n            mesh.normal[i] = -mesh.normal[i];\r\n        }\r\n    }\r\n    return mesh;\r\n}\r\nexport let hexadecachoron: TetraMesh = {\r\n    position: new Float32Array([\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        0, 1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        0, 1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n        0, -1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        0, -1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n\r\n        0, 1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        -1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        -1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        0, 1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n        -1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        0, -1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        0, -1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        -1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n    ]),\r\n    normal: new Float32Array([\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n\r\n\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n    ]),\r\n    uvw: new Float32Array([\r\n        0, 0, 0, 0,\r\n        1, 1, 0, 0,\r\n        1, 0, 1, 0,\r\n        0, 1, 1, 0,\r\n        0, 0, 0, 1,\r\n        1, 1, 0, 1,\r\n        1, 0, 1, 1,\r\n        0, 1, 1, 1,\r\n        0, 0, 0, 2,\r\n        1, 1, 0, 2,\r\n        1, 0, 1, 2,\r\n        0, 1, 1, 2,\r\n        0, 0, 0, 3,\r\n        1, 1, 0, 3,\r\n        1, 0, 1, 3,\r\n        0, 1, 1, 3,\r\n        0, 0, 0, 4,\r\n        1, 1, 0, 4,\r\n        1, 0, 1, 4,\r\n        0, 1, 1, 4,\r\n        0, 0, 0, 5,\r\n        1, 1, 0, 5,\r\n        1, 0, 1, 5,\r\n        0, 1, 1, 5,\r\n        0, 0, 0, 6,\r\n        1, 1, 0, 6,\r\n        1, 0, 1, 6,\r\n        0, 1, 1, 6,\r\n        0, 0, 0, 7,\r\n        1, 1, 0, 7,\r\n        1, 0, 1, 7,\r\n        0, 1, 1, 7,\r\n        0, 0, 0, 8,\r\n        1, 1, 0, 8,\r\n        1, 0, 1, 8,\r\n        0, 1, 1, 8,\r\n        0, 0, 0, 9,\r\n        1, 1, 0, 9,\r\n        1, 0, 1, 9,\r\n        0, 1, 1, 9,\r\n        0, 0, 0, 10,\r\n        1, 1, 0, 10,\r\n        1, 0, 1, 10,\r\n        0, 1, 1, 10,\r\n        0, 0, 0, 11,\r\n        1, 1, 0, 11,\r\n        1, 0, 1, 11,\r\n        0, 1, 1, 11,\r\n        0, 0, 0, 12,\r\n        1, 1, 0, 12,\r\n        1, 0, 1, 12,\r\n        0, 1, 1, 12,\r\n        0, 0, 0, 13,\r\n        1, 1, 0, 13,\r\n        1, 0, 1, 13,\r\n        0, 1, 1, 13,\r\n        0, 0, 0, 14,\r\n        1, 1, 0, 14,\r\n        1, 0, 1, 14,\r\n        0, 1, 1, 14,\r\n        0, 0, 0, 15,\r\n        1, 1, 0, 15,\r\n        1, 0, 1, 15,\r\n        0, 1, 1, 15,\r\n    ]),\r\n    count: 16\r\n};\r\nexport function glome(radius: number, xySegment: number, zwSegment: number, latitudeSegment: number) {\r\n    if (xySegment < 3) xySegment = 3;\r\n    if (zwSegment < 3) zwSegment = 3;\r\n    if (latitudeSegment < 1) latitudeSegment = 1;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _360;\r\n        let w = uvw.z * _90;\r\n        let cos = Math.cos(w) * radius;\r\n        let sin = Math.sin(w) * radius;\r\n        pos.set(-Math.cos(u) * cos, Math.sin(u) * cos, Math.cos(v) * sin, Math.sin(v) * sin);\r\n        norm.copy(pos);\r\n    }, xySegment, zwSegment, latitudeSegment);\r\n}\r\n\r\nexport function spheritorus(\r\n    sphereRadius: number, longitudeSegment: number, latitudeSegment: number,\r\n    circleRadius: number, circleSegment: number\r\n) {\r\n    if (longitudeSegment < 3) longitudeSegment = 3;\r\n    if (latitudeSegment < 3) latitudeSegment = 3;\r\n    if (circleSegment < 3) circleSegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _180;\r\n        let w = uvw.z * _360;\r\n        let sv = Math.sin(v);\r\n        let radius = circleRadius + sv * Math.cos(u) * sphereRadius;\r\n        let sw = Math.sin(w) * radius;\r\n        let cw = Math.cos(w) * radius;\r\n        pos.set(\r\n            -cw, sv * Math.sin(u) * sphereRadius, Math.cos(v) * sphereRadius, sw\r\n        );\r\n        norm.set(\r\n            -sv * Math.cos(u) * Math.cos(w),\r\n            sv * Math.sin(u),\r\n            Math.cos(v),\r\n            sv * Math.cos(u) * Math.sin(w),\r\n        );\r\n    }, longitudeSegment, latitudeSegment, circleSegment);\r\n}\r\nexport function torisphere(\r\n    circleRadius: number, circleSegment: number,\r\n    sphereRadius: number, longitudeSegment: number, latitudeSegment: number\r\n) {\r\n    if (longitudeSegment < 3) longitudeSegment = 3;\r\n    if (latitudeSegment < 3) latitudeSegment = 3;\r\n    if (circleSegment < 3) circleSegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = -uvw.x * _360;\r\n        let v = uvw.y * _180;\r\n        let w = uvw.z * _360;\r\n        let sv = Math.sin(v);\r\n        let cw = Math.cos(w);\r\n        let radius = circleRadius * cw + sphereRadius;\r\n        pos.set(\r\n            sv * Math.cos(u) * radius,\r\n            circleRadius * Math.sin(w),\r\n            sv * Math.sin(u) * radius,\r\n            Math.cos(v) * radius,\r\n        );\r\n        norm.set(\r\n            sv * Math.cos(u) * cw,\r\n            Math.sin(w),\r\n            sv * Math.sin(u) * cw,\r\n            Math.cos(v) * cw,\r\n        );\r\n    }, longitudeSegment, latitudeSegment, circleSegment);\r\n}\r\nexport function spherinderSide(radius: number, longitudeSegment: number, latitudeSegment: number, height: number, heightSegment: number = 1) {\r\n    if (longitudeSegment < 3) longitudeSegment = 3;\r\n    if (latitudeSegment < 3) latitudeSegment = 3;\r\n    if (heightSegment < 1) heightSegment = 1;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _180;\r\n        let w = uvw.z - 0.5;\r\n        let su = Math.sin(u);\r\n        let cu = Math.cos(u);\r\n        pos.set(Math.sin(v) * cu * radius, Math.cos(v) * cu * radius, su * radius, w * height);\r\n        norm.set(Math.sin(v) * cu, Math.cos(v) * cu, su);\r\n    }, longitudeSegment, latitudeSegment, heightSegment);\r\n}\r\nexport function tiger(xyRadius: number, xySegment: number, zwRadius: number, zwSegment: number, secondaryRadius: number, secondarySegment: number) {\r\n    if (xySegment < 3) xySegment = 3;\r\n    if (zwSegment < 3) zwSegment = 3;\r\n    if (secondarySegment < 3) secondarySegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _360;\r\n        let w = uvw.z * _360;\r\n        let su = Math.sin(w);\r\n        let cu = Math.cos(w);\r\n\r\n        pos.set(\r\n            (su * secondaryRadius + xyRadius) * Math.sin(u),\r\n            (su * secondaryRadius + xyRadius) * Math.cos(u),\r\n            (cu * secondaryRadius + zwRadius) * Math.sin(v),\r\n            (cu * secondaryRadius + zwRadius) * Math.cos(v),\r\n        );\r\n        norm.set(\r\n            su * Math.sin(u),\r\n            su * Math.cos(u),\r\n            cu * Math.sin(v),\r\n            cu * Math.cos(v),\r\n        );\r\n    }, xySegment, zwSegment, secondarySegment);\r\n}\r\nexport function parametricSurface(\r\n    fn: (inputUVW: Vec3, outputPosition: Vec4, outputNormal: Vec4) => void,\r\n    uSegment: number, vSegment: number, wSegment: number\r\n): TetraMesh {\r\n    if (uSegment < 1) uSegment = 1;\r\n    if (vSegment < 1) vSegment = 1;\r\n    if (wSegment < 1) wSegment = 1;\r\n    let count = uSegment * vSegment * wSegment * 5;\r\n    let arraySize = count << 4;\r\n    uSegment++; vSegment++; wSegment++;\r\n    let vw_seg = vSegment * wSegment;\r\n    let uvw_seg = uSegment * vw_seg;\r\n    let positions = new Float32Array((uvw_seg) << 2);\r\n    let normals = new Float32Array((uvw_seg) << 2);\r\n    let uvws = new Float32Array((uvw_seg) << 2);\r\n    let position = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let inputUVW = new Vec3;\r\n    let idxbuffer = new Uint32Array(8);\r\n    let outputVertex = new Vec4;\r\n    let outputNormal = new Vec4;\r\n    let ptr = 0;\r\n    let idxPtr = 0;\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    function pushTetra(a: number, b: number, c: number, d: number) {\r\n        a = idxbuffer[a];\r\n        b = idxbuffer[b];\r\n        c = idxbuffer[c];\r\n        d = idxbuffer[d];\r\n        function same(offset1: number, offset2: number) {\r\n            return positions[offset1] === positions[offset2] &&\r\n                positions[offset1 + 1] === positions[offset2 + 1] &&\r\n                positions[offset1 + 2] === positions[offset2 + 2] &&\r\n                positions[offset1 + 3] === positions[offset2 + 3];\r\n        }\r\n        if (!(same(a, b) || same(a, c) || same(a, d) || same(b, c) || same(b, d))) {\r\n            pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n        }\r\n    }\r\n    for (let u_index = 0; u_index < uSegment; u_index++) {\r\n        inputUVW.x = u_index / (uSegment - 1);\r\n        let u_offset = vSegment * u_index;\r\n        for (let v_index = 0; v_index < vSegment; v_index++) {\r\n            inputUVW.y = v_index / (vSegment - 1);\r\n            let v_offset = wSegment * (v_index + u_offset);\r\n            for (let w_index = 0; w_index < wSegment; w_index++) {\r\n                inputUVW.z = w_index / (wSegment - 1);\r\n                fn(inputUVW, outputVertex, outputNormal);\r\n                positions[ptr++] = outputVertex.x;\r\n                positions[ptr++] = outputVertex.y;\r\n                positions[ptr++] = outputVertex.z;\r\n                positions[ptr++] = outputVertex.w;\r\n                ptr -= 4;\r\n                normals[ptr++] = outputNormal.x;\r\n                normals[ptr++] = outputNormal.y;\r\n                normals[ptr++] = outputNormal.z;\r\n                normals[ptr++] = outputNormal.w;\r\n                ptr -= 4;\r\n                uvws[ptr++] = inputUVW.x;\r\n                uvws[ptr++] = inputUVW.y;\r\n                uvws[ptr++] = inputUVW.z;\r\n                uvws[ptr++] = 0;\r\n                if (u_index && v_index && w_index) {\r\n                    let offset = w_index + v_offset;\r\n                    idxbuffer[0] = offset << 2;\r\n                    idxbuffer[1] = offset - 1 << 2;\r\n                    idxbuffer[2] = offset - wSegment << 2;\r\n                    idxbuffer[3] = offset - wSegment - 1 << 2;\r\n                    idxbuffer[4] = offset - vw_seg << 2;\r\n                    idxbuffer[5] = offset - vw_seg - 1 << 2;\r\n                    idxbuffer[6] = offset - vw_seg - wSegment << 2;\r\n                    idxbuffer[7] = offset - vw_seg - wSegment - 1 << 2;\r\n                    pushTetra(0, 1, 2, 4);\r\n                    pushTetra(1, 5, 7, 4);\r\n                    pushTetra(1, 2, 7, 3);\r\n                    pushTetra(4, 6, 7, 2);\r\n                    pushTetra(1, 2, 4, 7);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { position, normal, uvw, count };\r\n}\r\nexport function convexhull(points: Vec4[]) {\r\n    // todo: fix a random dead loop bug\r\n    if (points.length < 5) return;\r\n    points.sort((a, b) => Math.random() - 0.5);\r\n    let _vec41 = new Vec4();\r\n    let _vec42 = new Vec4();\r\n    let _vec43 = new Vec4();\r\n    let _vec44 = new Vec4();\r\n    // let _vec45 = new Vec4();\r\n    let _mat4 = new Mat4();\r\n    let determinant = 0;\r\n    let nobreak = true;\r\n    let a = 0, b = 1, c = 2, d = 3, e = 4;\r\n    let epsilon = 1e-10;\r\n    for (a = 0; a < points.length && nobreak; a++) {\r\n        for (b = a + 1; b < points.length && nobreak; b++) {\r\n            for (c = b + 1; c < points.length && nobreak; c++) {\r\n                for (d = c + 1; d < points.length && nobreak; d++) {\r\n                    for (e = d + 1; e < points.length; e++) {\r\n                        determinant = det(a, b, c, d, e);\r\n                        if (Math.abs(determinant) > epsilon) {\r\n                            nobreak = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (determinant === 0) return;\r\n    let temp: Vec4; b--; c--; d--; a--;\r\n    temp = points[0]; points[0] = points[a]; points[a] = temp;\r\n    if (b === 0) b = a; if (c === 0) c = a; if (d === 0) d = a; if (e === 0) e = a;\r\n    temp = points[1]; points[1] = points[b]; points[b] = temp;\r\n    if (c === 1) c = b; if (d === 1) d = b; if (e === 1) e = b;\r\n    temp = points[2]; points[2] = points[c]; points[c] = temp;\r\n    if (d === 2) d = c; if (e === 2) e = c;\r\n    temp = points[3]; points[3] = points[d]; points[d] = temp;\r\n    if (e === 3) e = d;\r\n    temp = points[4]; points[4] = points[e]; points[e] = temp;\r\n    let count = 5; // indices.length === count * 4 always is true\r\n    console.log(determinant);\r\n    console.log(det(0, 1, 2, 3, 4));\r\n    let indices = det(0, 1, 2, 3, 4) > 0 ?\r\n        [1, 2, 3, 4, 2, 0, 3, 4, 0, 1, 3, 4, 1, 0, 2, 4, 0, 1, 2, 3]\r\n        :\r\n        [2, 1, 3, 4, 0, 2, 3, 4, 1, 0, 3, 4, 0, 1, 2, 4, 1, 0, 2, 3];\r\n    function det(a: number, b: number, c: number, d: number, e: number) {\r\n        let p = points[e];\r\n        return _mat4.augVec4set(\r\n            _vec41.subset(p, points[a]),\r\n            _vec42.subset(p, points[b]),\r\n            _vec43.subset(p, points[c]),\r\n            _vec44.subset(p, points[d]),\r\n        ).det();\r\n    }\r\n    for (let cursor = 5; cursor < points.length; cursor++) {\r\n        let newIndices = [];\r\n        // borderformat [v1,v2,v3,flag], v1>v2>v3, \r\n        // flag: 1 orientation +, 0 orientation -, 2 duplicate remove\r\n        let border: number[][] = [];\r\n        function checkBorder(a: number, b: number, c: number) {\r\n            let item = a > b ? b > c ? [a, b, c, 1] : a > c ? [a, c, b, 0] : [c, a, b, 1] :\r\n                a > c ? [b, a, c, 0] : b > c ? [b, c, a, 1] : [c, b, a, 0];\r\n            let found = false;\r\n            for (let i of border) {\r\n                if (i[0] === item[0] && i[1] === item[1] && i[2] === item[2]) {\r\n                    i[3] = 2;\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                border.push(item);\r\n            }\r\n        }\r\n        for (let cell = 0; cell < count; cell++) {\r\n            let a = indices[cell << 2];\r\n            let b = indices[(cell << 2) + 1];\r\n            let c = indices[(cell << 2) + 2];\r\n            let d = indices[(cell << 2) + 3];\r\n            let determinant = det(a, b, c, d, cursor);\r\n            if (determinant < epsilon) {\r\n                checkBorder(b, c, d);\r\n                checkBorder(c, a, d);\r\n                checkBorder(a, b, d);\r\n                checkBorder(b, a, c);\r\n            } else {\r\n                newIndices.push(a, b, c, d);\r\n            }\r\n        }\r\n        for (let b of border) {\r\n            if (b[3] === 2) continue;\r\n            else if (b[3] === 0) newIndices.push(b[0], b[1], b[2], cursor);\r\n            else if (b[3] === 1) newIndices.push(b[0], b[2], b[1], cursor);\r\n        }\r\n        indices = newIndices;\r\n        count = indices.length >> 2;\r\n    }\r\n    let position = new Float32Array(count << 4);\r\n    let countPtr = 0;\r\n    for (let p = 0; p < count; p++) {\r\n        points[indices[(p << 2)]].writeBuffer(position, countPtr); countPtr += 4;\r\n        points[indices[(p << 2) + 1]].writeBuffer(position, countPtr); countPtr += 4;\r\n        points[indices[(p << 2) + 2]].writeBuffer(position, countPtr); countPtr += 4;\r\n        points[indices[(p << 2) + 3]].writeBuffer(position, countPtr); countPtr += 4;\r\n    }\r\n    return {\r\n        position,\r\n        count\r\n    }\r\n}\r\nexport function duocone(xyRadius: number, xySegment: number, zwRadius: number, zwSegment: number) {\r\n    let ps = [];\r\n    for (let i = 0; i < xySegment; i++) {\r\n        let ii = i * _360 / xySegment;\r\n        ps.push(new Vec4(xyRadius * Math.cos(ii), xyRadius * Math.sin(ii)));\r\n    }\r\n    for (let i = 0; i < zwSegment; i++) {\r\n        let ii = i * _360 / zwSegment;\r\n        ps.push(new Vec4(0, 0, zwRadius * Math.cos(ii), zwRadius * Math.sin(ii)));\r\n    }\r\n    return convexhull(ps);\r\n}\r\n\r\nexport function duocylinder(xyRadius: number, xySegment: number, zwRadius: number, zwSegment: number) {\r\n    let ps = [];\r\n    for (let i = 0; i < xySegment; i++) {\r\n        let ii = i * _360 / xySegment;\r\n        for (let j = 0; j < zwSegment; j++) {\r\n            let jj = j * _360 / zwSegment;\r\n            ps.push(new Vec4(\r\n                xyRadius * Math.cos(ii), xyRadius * Math.sin(ii),\r\n                zwRadius * Math.cos(jj), zwRadius * Math.sin(jj)\r\n            ));\r\n        }\r\n    }\r\n    return convexhull(ps);\r\n}\r\nexport function loft(sp: Spline, section: face.FaceMesh, step: number): TetraMesh {\r\n    let { points, rotors, curveLength } = sp.generate(step);\r\n    let quadcount = section.quad ? section.quad.position.length >> 4 : 0;\r\n    let count4 = quadcount * (points.length - 1) * 5;\r\n    let tricount = section.triangle ? section.triangle.position.length / 12 : 0;\r\n    let count3 = tricount * (points.length - 1) * 3;\r\n    let arraySize = count4 + count3 << 4;\r\n    let pslen4 = quadcount * points.length << 4;\r\n    let pslen3 = tricount * points.length * 12;\r\n    let pslen = Math.max(pslen4, pslen3);\r\n    let positions = new Float32Array(pslen);\r\n    let uvws = new Float32Array(pslen);\r\n    let normals = new Float32Array(pslen);\r\n    let position = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let _vec4 = new Vec4(); // cache\r\n    let offset = 0;\r\n    let idxPtr = 0;\r\n    if (section.quad) {\r\n        let pos = section.quad.position;\r\n        let norm = section.quad.normal;\r\n        let uv = section.quad.uvw;\r\n        for (let ptr = 0; ptr < (quadcount << 4); ptr += 16) {\r\n            for (let j = 0; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                let p = points[j];\r\n                for (let i = 0; i < 4; i++, ptr += 4) {\r\n                    _vec4.set(pos[ptr], pos[ptr + 1], pos[ptr + 2], pos[ptr + 3]);\r\n                    _vec4.rotates(r).adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(norm[ptr], norm[ptr + 1], norm[ptr + 2], norm[ptr + 3]);\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[ptr], uv[ptr + 1], uv[ptr + 2], curveLength[j]);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 16;\r\n                if (j) {\r\n                    let doffset = offset - 32;\r\n                    pushTetra(doffset, 0, 1, 3, 4);\r\n                    pushTetra(doffset, 1, 5, 6, 4);\r\n                    pushTetra(doffset, 1, 3, 6, 2);\r\n                    pushTetra(doffset, 4, 7, 6, 3);\r\n                    pushTetra(doffset, 1, 3, 4, 6);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (section.triangle) {\r\n        offset = 0;\r\n        let pos = section.triangle.position;\r\n        let norm = section.triangle.normal;\r\n        let uv = section.triangle.uvw;\r\n        for (let ptr = 0, l = tricount * 12; ptr < l; ptr += 12) {\r\n            for (let j = 0; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                let p = points[j];\r\n                for (let i = 0; i < 3; i++, ptr += 4) {\r\n                    _vec4.set(pos[ptr], pos[ptr + 1], pos[ptr + 2], pos[ptr + 3]);\r\n                    _vec4.rotates(r).adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(norm[ptr], norm[ptr + 1], norm[ptr + 2], norm[ptr + 3]);\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[ptr], uv[ptr + 1], uv[ptr + 2], curveLength[j]);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 12;\r\n                if (j) {\r\n                    let doffset = offset - 24;\r\n                    pushTetra(doffset, 0, 1, 2, 3);\r\n                    pushTetra(doffset, 1, 2, 3, 5);\r\n                    pushTetra(doffset, 3, 4, 5, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function pushTetra(offset: number, a: number, b: number, c: number, d: number) {\r\n        a = offset + (a << 2);\r\n        b = offset + (b << 2);\r\n        c = offset + (c << 2);\r\n        d = offset + (d << 2);\r\n        pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n    }\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    return { position, uvw, normal, count: count3 + count4 };\r\n}\r\nexport function directProduct(shape1: face.FaceIndexMesh, shape2: face.FaceIndexMesh) {\r\n    /** border(A x B) = border(A) x B + A x border(B) */\r\n    let edge1 = face.findBorder(shape1);\r\n    let edge2 = face.findBorder(shape2);\r\n    // A x border(B)\r\n    let quadcount1 = shape1.quad ? shape1.quad.position.length >> 2 : 0;\r\n    let count14 = quadcount1 * edge2.length * 5;\r\n    let tricount1 = shape1.triangle ? shape1.triangle.position.length / 3 : 0;\r\n    let count13 = tricount1 * edge2.length * 3;\r\n    let pslen1 = Math.max(quadcount1 * edge2.length << 5, tricount1 * edge2.length * 24);\r\n\r\n    // border(A) x B \r\n    let quadcount2 = shape2.quad ? shape2.quad.position.length >> 2 : 0;\r\n    let count24 = quadcount2 * edge1.length * 5;\r\n    let tricount2 = shape2.triangle ? shape2.triangle.position.length / 3 : 0;\r\n    let count23 = tricount2 * edge1.length * 3;\r\n    let pslen2 = Math.max(quadcount2 * edge1.length << 5, tricount2 * edge1.length * 24);\r\n\r\n    let arraySize = count14 + count13 + count23 + count24 << 4;\r\n    let pslen = Math.max(pslen1, pslen2);\r\n    let positions = new Float32Array(pslen);\r\n    let uvws = new Float32Array(pslen);\r\n    let normals = new Float32Array(pslen);\r\n    let position = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let _vec4 = new Vec4(); // cache\r\n    let _vec4p = new Vec4(); // cache\r\n    let _vec4q = new Vec4(); // cache\r\n    let _vec4n = new Vec4(); // cache\r\n    let offset = 0;\r\n    let idxPtr = 0;\r\n    if (shape1.quad) {\r\n        let posIdx = shape1.quad.position;\r\n        let uvIdx = shape1.quad.uvw;\r\n        let pos = shape1.position;\r\n        let uv = shape1.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 4) {\r\n            for (let j of edge2) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.z, normal.w] = [-normal.w, normal.z];\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                let doffset = offset - 32;\r\n                pushTetra(doffset, 0, 1, 3, 4);\r\n                pushTetra(doffset, 1, 5, 6, 4);\r\n                pushTetra(doffset, 1, 3, 6, 2);\r\n                pushTetra(doffset, 4, 7, 6, 3);\r\n                pushTetra(doffset, 1, 3, 4, 6);\r\n            }\r\n        }\r\n    }\r\n    offset = 0;\r\n    if (shape1.triangle) {\r\n        let posIdx = shape1.triangle.position;\r\n        let uvIdx = shape1.triangle.uvw;\r\n        let pos = shape1.position;\r\n        let uv = shape1.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 3) {\r\n            for (let j of edge2) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.z, normal.w] = [-normal.w, normal.z];\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                let doffset = offset - 24;\r\n                pushTetra(doffset, 0, 1, 2, 3);\r\n                pushTetra(doffset, 1, 2, 3, 5);\r\n                pushTetra(doffset, 3, 4, 5, 1);\r\n            }\r\n        }\r\n    }\r\n    offset = 0;\r\n    if (shape2.quad) {\r\n        let posIdx = shape2.quad.position;\r\n        let uvIdx = shape2.quad.uvw;\r\n        let pos = shape2.position;\r\n        let uv = shape2.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 4) {\r\n            for (let j of edge1) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.x, normal.y] = [-normal.y, normal.x];\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                let doffset = offset - 32;\r\n                pushTetra(doffset, 0, 1, 3, 4);\r\n                pushTetra(doffset, 1, 5, 6, 4);\r\n                pushTetra(doffset, 1, 3, 6, 2);\r\n                pushTetra(doffset, 4, 7, 6, 3);\r\n                pushTetra(doffset, 1, 3, 4, 6);\r\n            }\r\n        }\r\n    }\r\n    offset = 0;\r\n    if (shape2.triangle) {\r\n        let posIdx = shape2.triangle.position;\r\n        let uvIdx = shape2.triangle.uvw;\r\n        let pos = shape2.position;\r\n        let uv = shape2.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 3) {\r\n            for (let j of edge1) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.x, normal.y] = [-normal.y, normal.x];\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                let doffset = offset - 24;\r\n                pushTetra(doffset, 0, 1, 2, 3);\r\n                pushTetra(doffset, 1, 2, 3, 5);\r\n                pushTetra(doffset, 3, 4, 5, 1);\r\n            }\r\n        }\r\n    }\r\n    function pushTetra(offset: number, a: number, b: number, c: number, d: number) {\r\n        a = offset + (a << 2);\r\n        b = offset + (b << 2);\r\n        c = offset + (c << 2);\r\n        d = offset + (d << 2);\r\n        pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n    }\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    return { position, normal, uvw, count: position.length >> 4 }\r\n}","import { FaceIndexMesh } from \"./face/facemesh\";\r\nimport { TetraIndexMesh } from \"./tetra/tetramesh\";\r\n\r\ninterface IndexMesh extends FaceIndexMesh {\r\n    positionIndex?: Uint32Array;\r\n    normalIndex?: Uint32Array;\r\n    uvwIndex?: Uint32Array;\r\n    count?: number;\r\n}\r\nexport class ObjFile {\r\n    data: string;\r\n    constructor(data: string | TetraIndexMesh | FaceIndexMesh) {\r\n        this.data = this.stringify(data);\r\n    }\r\n    private stringify(data: string | TetraIndexMesh | FaceIndexMesh) {\r\n        if (typeof data === \"string\") return data;\r\n        let out = \"# Tesserxel ObjFile Parser\\n# github.com/wxyhly/tesserxel\\n\";\r\n        out += writeVertexLike(\"v\", data.position);\r\n        if (data.normal) out += writeVertexLike(\"vn\", data.normal);\r\n        if (data.uvw) out += writeVertexLike(\"vt\", data.uvw);\r\n        if ((data as TetraIndexMesh).positionIndex) {\r\n            let m = data as TetraIndexMesh;\r\n            out += writeFaceLike(\"t\", m.positionIndex, m.uvwIndex, m.normalIndex, 4);\r\n            return out;\r\n        }\r\n        let m = data as FaceIndexMesh;\r\n        if (m.triangle) {\r\n            out += writeFaceLike(\"f\", m.triangle.position, m.triangle.uvw, m.triangle.normal, 3);\r\n        }\r\n        if (m.quad) {\r\n            out += writeFaceLike(\"f\", m.quad.position, m.quad.uvw, m.quad.normal, 4);\r\n        }\r\n        return out;\r\n        function writeVertexLike(identifier: string, data: Float32Array) {\r\n            let out = \"\\n\";\r\n            const reg = new RegExp(\" \" + (0).toPrecision(7) + \"$\", \"g\");\r\n            for (let i = 0, l = data.length; i < l; i += 4) {\r\n                let line = identifier;\r\n                for (let q = 0; q < 4; q++) {\r\n                    line += \" \" + data[i + q].toPrecision(7);\r\n                }\r\n                line = line.trim().replace(reg, \"\");\r\n                if (identifier === \"vt\") line = line.replace(reg, \"\");\r\n                out += line + \"\\n\";\r\n            }\r\n            return out;\r\n        }\r\n        function writeFaceLike(identifier: string, v: Uint32Array, vt: Uint32Array, vn: Uint32Array, stride: number) {\r\n            let out = \"\\n\";\r\n            for (let i = 0, l = v.length; i < l; i += stride) {\r\n                let line = identifier;\r\n                for (let q = 0; q < stride; q++) {\r\n                    line += \" \" + (v[i + q] + 1);\r\n                    if (vt) line += \"/\" + (vt[i + q] + 1);\r\n                    if (vn) line += \"/\" + (vn[i + q] + 1);\r\n                    line = line.replace(/\\/+$/, \"\");\r\n                }\r\n                out += line + \"\\n\";\r\n            }\r\n            return out;\r\n        }\r\n    }\r\n    parse() {\r\n        let lines = this.data.split(\"\\n\");\r\n        let v = [];\r\n        let vt = [];\r\n        let vn = [];\r\n        let quad = {\r\n            v: [],\r\n            vt: [],\r\n            vn: [],\r\n        }\r\n        let tetra = {\r\n            v: [],\r\n            vt: [],\r\n            vn: [],\r\n        }\r\n        let triangle = {\r\n            v: [],\r\n            vt: [],\r\n            vn: [],\r\n        }\r\n        for (let i = 0, l = lines.length; i < l; i++) {\r\n            let line = lines[i].trim();\r\n            if (isCommentOrEmpty(line)) continue;\r\n            let splitArr = line.toLowerCase().split(/\\s/g);\r\n            switch (splitArr[0]) {\r\n                case \"o\":\r\n                    // parseObj(splitArr);\r\n                    break;\r\n                case \"v\":\r\n                    parseVertexLike(v, splitArr);\r\n                    break;\r\n                case \"vt\":\r\n                    parseVertexLike(vt, splitArr);\r\n                    break;\r\n                case \"vn\":\r\n                    parseVertexLike(vn, splitArr);\r\n                    break;\r\n                case \"f\":\r\n                    if (splitArr.length === 5) {\r\n                        parseFaceLike(quad, splitArr);\r\n                    } else if (splitArr.length === 4) {\r\n                        parseFaceLike(triangle, splitArr);\r\n                    } else {\r\n                        error(i, \"Unsupported polygonal face: Only triangles and quads are allowed.\");\r\n                    }\r\n                    break;\r\n                case \"t\":\r\n                    if (splitArr.length === 5) {\r\n                        parseFaceLike(tetra, splitArr);\r\n                    } else {\r\n                        error(i, `Vertices of tetrahedron must be 4, found ${splitArr.length - 1} vertices.`);\r\n                    }\r\n            }\r\n        }\r\n\r\n        let out: IndexMesh = tetra.v.length ? {\r\n            position: new Float32Array(v),\r\n            positionIndex: new Uint32Array(tetra.v)\r\n        } : {\r\n            position: new Float32Array(v)\r\n        }\r\n        if (vt.length) out.uvw = new Float32Array(vt);\r\n        if (vn.length) out.normal = new Float32Array(vn);\r\n        if (triangle.v.length) {\r\n            out.triangle = {\r\n                position: new Uint32Array(triangle.v)\r\n            }\r\n            if (triangle.vt.length) out.triangle.uvw = new Uint32Array(triangle.vt);\r\n            if (triangle.vn.length) out.triangle.normal = new Uint32Array(triangle.vn);\r\n        }\r\n        if (quad.v.length) {\r\n            out.quad = {\r\n                position: new Uint32Array(quad.v)\r\n            }\r\n            if (quad.vt.length) out.quad.uvw = new Uint32Array(quad.vt);\r\n            if (quad.vn.length) out.quad.normal = new Uint32Array(quad.vn);\r\n        }\r\n\r\n        if (tetra.v.length) {\r\n            if (tetra.vt.length) out.uvwIndex = new Uint32Array(tetra.vt);\r\n            if (tetra.vn.length) out.normalIndex = new Uint32Array(tetra.vn);\r\n\r\n        }\r\n        return out;\r\n        function parseVertexLike(dst: number[], splitArr: string[]) {\r\n            while (splitArr.length < 5) { splitArr.push(\"0\"); }\r\n            for (let i = 1, l = splitArr.length; i < l; i++) {\r\n                dst.push(Number(splitArr[i]));\r\n            }\r\n        }\r\n        function parseFaceLike(dst: { v: number[], vt: number[], vn: number[] }, splitArr: string[]) {\r\n            for (let i = 1, l = splitArr.length; i < l; i++) {\r\n                let attrs = splitArr[i].split(\"/\");\r\n                dst.v.push(Number(attrs[0]) - 1);\r\n                if (attrs[1]) dst.vt.push(Number(attrs[1]) - 1);\r\n                if (attrs[2]) dst.vn.push(Number(attrs[2]) - 1);\r\n            }\r\n        }\r\n        function isCommentOrEmpty(line: string) {\r\n            return line === \"\" || line[0] === \"#\";\r\n        }\r\n        function error(line: number, msg: string) {\r\n            console.error(\"ObjFileParser: \" + msg + \"\\n at line \" + line + `\"${lines[line]}\"`);\r\n        }\r\n    }\r\n}","import { AffineMat4, Obj4 } from \"../math/algebra/affine\";\r\nimport { Vec3 } from \"../math/algebra/vec3\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { PerspectiveCamera } from \"../math/geometry/camera\";\r\nimport { AABB } from \"../math/geometry/primitive\";\r\nimport { tetra } from \"../mesh/mesh\";\r\nimport { TetraMesh } from \"../mesh/tetra\";\r\nimport { Material } from \"./material\";\r\n\r\nexport class Scene {\r\n    child: Object[] = [];\r\n    backGroundColor: GPUColor;\r\n    add(...obj: Object[]) {\r\n        this.child.push(...obj);\r\n    }\r\n    removeChild(obj: Object) {\r\n        let index = this.child.indexOf(obj);\r\n        if (index !== -1) {\r\n            this.child.splice(index, 1);\r\n        } else {\r\n            console.warn(\"Cannot remove a non-existed child\");\r\n        }\r\n    }\r\n    setBackgroudColor(color: GPUColor) {\r\n        this.backGroundColor = color;\r\n    }\r\n}\r\nexport class Object extends Obj4 {\r\n    child: Object[] = [];\r\n    worldCoord: AffineMat4;\r\n    needsUpdateCoord = true;\r\n    alwaysUpdateCoord = false;\r\n    constructor() {\r\n        super();\r\n        this.worldCoord = new AffineMat4();\r\n    }\r\n    updateCoord() {\r\n        this.needsUpdateCoord = true;\r\n        return this;\r\n    }\r\n    add(...obj: Object[]) {\r\n        this.child.push(...obj);\r\n    }\r\n    removeChild(obj: Object) {\r\n        let index = this.child.indexOf(obj);\r\n        if (index !== -1) {\r\n            this.child.splice(index, 1);\r\n        } else {\r\n            console.warn(\"Cannot remove a non-existed child\");\r\n        }\r\n    }\r\n}\r\nexport class Camera extends Object implements PerspectiveCamera {\r\n    fov: number = 90;\r\n    near: number = 0.1;\r\n    far: number = 100;\r\n    alwaysUpdateCoord = true;\r\n    needsUpdate = true;\r\n}\r\nexport class Mesh extends Object {\r\n    geometry: Geometry;\r\n    material: Material;\r\n    uObjMatBuffer: GPUBuffer;\r\n    bindGroup: GPUBindGroup;\r\n    visible = true;\r\n    constructor(geometry: Geometry, material: Material) {\r\n        super();\r\n        this.geometry = geometry;\r\n        this.material = material;\r\n    }\r\n}\r\nexport class Geometry {\r\n    jsBuffer: TetraMesh;\r\n    gpuBuffer: { [name: string]: GPUBuffer };\r\n    needsUpdate = true;\r\n    dynamic: boolean = false;\r\n    obb = new AABB;\r\n    constructor(data: TetraMesh) {\r\n        this.jsBuffer = data;\r\n    }\r\n    updateOBB() {\r\n        let obb = this.obb;\r\n        let pos = this.jsBuffer.position;\r\n        obb.min.set(Infinity, Infinity, Infinity, Infinity);\r\n        obb.max.set(-Infinity, -Infinity, -Infinity, -Infinity);\r\n        for (let i = 0, l = this.jsBuffer.count << 4; i < l; i += 4) {\r\n            obb.min.x = Math.min(obb.min.x, pos[i]);\r\n            obb.min.y = Math.min(obb.min.y, pos[i + 1]);\r\n            obb.min.z = Math.min(obb.min.z, pos[i + 2]);\r\n            obb.min.w = Math.min(obb.min.w, pos[i + 3]);\r\n            obb.max.x = Math.max(obb.max.x, pos[i]);\r\n            obb.max.y = Math.max(obb.max.y, pos[i + 1]);\r\n            obb.max.z = Math.max(obb.max.z, pos[i + 2]);\r\n            obb.max.w = Math.max(obb.max.w, pos[i + 3]);\r\n        }\r\n    }\r\n}\r\nexport class TesseractGeometry extends Geometry {\r\n    constructor(size?: number | Vec4) {\r\n        super(tetra.tesseract());\r\n        if (size) tetra.applyObj4(this.jsBuffer, new Obj4(null, null,\r\n            size instanceof Vec4 ? size : new Vec4(size, size, size, size)\r\n        ));\r\n    }\r\n}\r\nexport class CubeGeometry extends Geometry {\r\n    constructor(size?: number | Vec3) {\r\n        super(tetra.clone(tetra.cube));\r\n        if (size) tetra.applyObj4(this.jsBuffer, new Obj4(null, null,\r\n            size instanceof Vec3 ? new Vec4(size.x, 1, size.y, size.z) : new Vec4(size, 1, size, size)\r\n        ));\r\n    }\r\n}\r\nexport class GlomeGeometry extends Geometry {\r\n    constructor(size?: number) {\r\n        super(tetra.glome(size ?? 1, 16, 16, 12));\r\n    }\r\n}\r\nexport class SpheritorusGeometry extends Geometry {\r\n    constructor(sphereRadius: number = 0.4, circleRadius: number = 1) {\r\n        super(tetra.spheritorus(sphereRadius, 16, 12, circleRadius, 16));\r\n    }\r\n}\r\nexport class TorisphereGeometry extends Geometry {\r\n    constructor(circleRadius: number = 0.2, sphereRadius: number = 0.8) {\r\n        super(tetra.torisphere(circleRadius, 12, sphereRadius, 16, 12));\r\n    }\r\n}\r\nexport class SpherinderSideGeometry extends Geometry {\r\n    constructor(sphereRadius: number = 0.4, height: number = 1) {\r\n        super(tetra.spherinderSide(sphereRadius, 16, 12, height));\r\n    }\r\n}\r\nexport class TigerGeometry extends Geometry {\r\n    constructor(circleRadius: number = 0.2, radius1: number = 0.8, radius2: number = 0.8) {\r\n        super(tetra.tiger(radius1, 16, radius2, 16, circleRadius, 12));\r\n    }\r\n}\r\nexport class ConvexHullGeometry extends Geometry {\r\n    constructor(points: Vec4[]) {\r\n        super(tetra.convexhull(points));\r\n        console.assert(false, \"todo: need to generate normal\");\r\n    }\r\n}","import { Vec3 } from \"../math/algebra/vec3\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { _DEG2RAD } from \"../math/const\";\r\nimport { Renderer } from \"./renderer\";\r\nimport { Object } from \"./scene\";\r\n\r\ntype LightDensity = { r: number, g: number, b: number } | Vec3 | number[] | number;\r\nexport class Light extends Object {\r\n    density: Vec3;\r\n    constructor(density: LightDensity) {\r\n        super();\r\n        this.density = color2Vec3(density);\r\n    }\r\n}\r\nfunction color2Vec3(density: LightDensity) {\r\n    if (density instanceof Vec3) return density;\r\n    if ((density as { r: number, g: number, b: number }).r) {\r\n        return new Vec3(\r\n            (density as { r: number, g: number, b: number }).r,\r\n            (density as { r: number, g: number, b: number }).g,\r\n            (density as { r: number, g: number, b: number }).b\r\n        );\r\n    }\r\n    if (typeof density === \"number\") {\r\n        return new Vec3(density, density, density);\r\n    }\r\n    if ((density as number[]).length === 3) {\r\n        return new Vec3((density as number[])[0], (density as number[])[1], (density as number[])[2]);\r\n    }\r\n}\r\nexport class AmbientLight extends Light {\r\n    needsUpdateCoord = false;\r\n    constructor(density: LightDensity) {\r\n        super(density);\r\n    }\r\n}\r\nexport class DirectionalLight extends Light {\r\n    worldDirection = new Vec4;\r\n    direction: Vec4;\r\n    constructor(density: LightDensity, direction?: Vec4) {\r\n        super(density ?? 1.0);\r\n        this.direction = direction ?? Vec4.y.clone();\r\n    }\r\n}\r\nexport class SpotLight extends Light {\r\n    worldDirection = new Vec4;\r\n    direction: Vec4;\r\n    angle: number;\r\n    penumbra: number;\r\n    decayPower: number = 3;\r\n    constructor(density: LightDensity, angle: number, penumbra: number, direction?: Vec4) {\r\n        super(density ?? 1.0);\r\n        this.direction = direction ?? Vec4.y.clone();\r\n        this.angle = angle;\r\n        this.penumbra = penumbra;\r\n\r\n    }\r\n}\r\nexport class PointLight extends Light {\r\n    decayPower: number = 3;\r\n    constructor(density: LightDensity) {\r\n        super(density);\r\n    }\r\n}\r\n\r\nconst ambientLightSize = 4 * 4;\r\nconst structPosDirLightSize = 8 * 4;\r\nconst structSpotLightLightSize = 16 * 4;\r\nconst posdirLightsNumber = 8;\r\nconst spotLightsNumber = 4;\r\nconst spotLightOffset = ambientLightSize + posdirLightsNumber * structPosDirLightSize;\r\nconst uWorldLightBufferSize = spotLightOffset + spotLightsNumber * structSpotLightLightSize;\r\nconst lightCode = `\r\nstruct PosDirLight{\r\n    density: vec4<f32>,\r\n    pos_dir: vec4<f32>,\r\n}\r\nstruct SpotLight{\r\n    density: vec4<f32>,\r\n    pos: vec4<f32>,\r\n    dir: vec4<f32>,\r\n    params: vec4<f32>\r\n}\r\nconst blackColor = vec3<f32>(0.02);\r\nstruct WorldLight{\r\n    ambientLightDensity: vec4<f32>,\r\n    posdirLights: array<PosDirLight,${posdirLightsNumber}>,\r\n    spotLights: array<SpotLight,${spotLightsNumber}>,\r\n}\r\nfn acesFilm(x: vec3<f32>)-> vec3<f32> {\r\n    const a: f32 = 2.51;\r\n    const b: f32 = 0.03;\r\n    const c: f32 = 2.43;\r\n    const d: f32 = 0.59;\r\n    const e: f32 = 0.14;\r\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), vec3<f32>(0.0), vec3<f32>(1.0));\r\n}\r\n@group(1) @binding(0) var<uniform> uWorldLight: WorldLight;\r\n`;\r\nexport function _initLightShader() {\r\n    return { posdirLightsNumber, spotLightsNumber, lightCode, uWorldLightBufferSize };\r\n}\r\nexport function _updateWorldLight(r: Renderer) {\r\n    let offset = 0;\r\n    r.jsBuffer.fill(0);\r\n    r.ambientLightDensity.writeBuffer(r.jsBuffer); offset += 4;\r\n    for (let dir of r.directionalLights) {\r\n        dir.density.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n        r.jsBuffer[offset - 1] = -1.0; // marker for directional light ( < -0.5 in shader )\r\n        dir.worldDirection.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n    }\r\n    for (let pt of r.pointLights) {\r\n        pt.density.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n        r.jsBuffer[offset - 1] = Math.abs(pt.decayPower) + 1; // decay power and also marker for point light ( > 0.5 in shader )\r\n        pt.worldCoord.vec.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n    }\r\n    offset = spotLightOffset >> 2;\r\n    for (let spt of r.spotLights) {\r\n        spt.density.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n        r.jsBuffer[offset - 1] = 1.0; // marker for spotLight\r\n        spt.worldCoord.vec.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n        spt.worldDirection.writeBuffer(r.jsBuffer, offset); offset += 4;\r\n        let cosineinv = 1 / (1 - Math.cos(spt.angle * _DEG2RAD * 0.5));\r\n        r.jsBuffer[offset] = cosineinv;\r\n        r.jsBuffer[offset + 1] = 1 - cosineinv;\r\n        r.jsBuffer[offset + 2] = spt.penumbra;\r\n        r.jsBuffer[offset + 3] = Math.abs(spt.decayPower) + 1;\r\n        offset += 4;\r\n    }\r\n    r.gpu.device.queue.writeBuffer(r.uWorldLightBuffer, 0, r.jsBuffer, 0, uWorldLightBufferSize >> 2);\r\n}","import { SliceRenderer, TetraSlicePipeline } from \"../render/slice\";\r\nimport { GPU } from \"../render/gpu\";\r\nimport { AmbientLight, DirectionalLight, PointLight, SpotLight, _initLightShader, _updateWorldLight } from \"./light\";\r\nimport { Camera, Mesh, Object, Scene } from \"./scene\";\r\nimport { Material } from \"./material\";\r\nimport { Vec3 } from \"../math/algebra/vec3\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { Plane } from \"../math/geometry/primitive\";\r\n/** threejs like 4D lib */\r\nexport class Renderer {\r\n    core: SliceRenderer;\r\n    gpu: GPU;\r\n    canvas: HTMLCanvasElement;\r\n    pipelines: { [label: string]: TetraSlicePipeline | \"compiling\" } = {};\r\n    jsBuffer = new Float32Array(1024);\r\n    uCamMatBuffer: GPUBuffer; // contain inv and uninv affineMat\r\n    uWorldLightBuffer: GPUBuffer;\r\n    lightShaderInfomation = _initLightShader();\r\n    private cameraInScene: boolean;\r\n    private safeTetraNumInOnePass: number;\r\n    private tetraNumOccupancyRatio: number = 0.08;\r\n    private maxTetraNumInOnePass: number;\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n        this.core = new SliceRenderer();\r\n    }\r\n    setBackgroudColor(color: GPUColor) {\r\n        this.core.setScreenClearColor(color);\r\n    }\r\n    async init() {\r\n        this.gpu = await new GPU().init();\r\n        if (!this.gpu) {\r\n            console.error(\"No availiable GPU device found. Please check whether WebGPU is enabled on your browser.\");\r\n            return null;\r\n        }\r\n        await this.core.init(this.gpu, this.gpu.getContext(this.canvas));\r\n        this.uCamMatBuffer = this.gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, (4 * 5 * 2) * 4, \"uCamMat\");\r\n        this.uWorldLightBuffer = this.gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, this.lightShaderInfomation.uWorldLightBufferSize, \"uWorldLight\");\r\n        this.core.setSize({ width: this.canvas.width * devicePixelRatio, height: this.canvas.height * devicePixelRatio });\r\n        this.safeTetraNumInOnePass = this.core.getSafeTetraNumInOnePass();\r\n        return this;\r\n    }\r\n    // todo: add computePipeLinePool\r\n    fetchPipelineName(identifier: string): string {\r\n        return identifier;\r\n    }\r\n    fetchPipeline(identifier: string): TetraSlicePipeline | \"compiling\" {\r\n        return this.pipelines[this.fetchPipelineName(identifier)];\r\n    }\r\n    pullPipeline(identifier: string, pipeline: TetraSlicePipeline | \"compiling\") {\r\n        if (this.pipelines[identifier] && this.pipelines[identifier] !== \"compiling\")\r\n            console.error(\"FOUR Renderer: Repetitive material pipeline creation occured.\");\r\n        this.pipelines[identifier] = pipeline;\r\n    }\r\n    updateObject(o: Object) {\r\n        for (let c of o.child) {\r\n            if (c.alwaysUpdateCoord) {\r\n                c.needsUpdateCoord = true;\r\n            }\r\n            if (c.needsUpdateCoord || o.needsUpdateCoord) {\r\n                c.worldCoord.setFromObj4(c).mulsl(o.worldCoord);\r\n\r\n                c.needsUpdateCoord = true;\r\n            }\r\n            this.updateObject(c);\r\n            c.needsUpdateCoord = false;\r\n        }\r\n        if (o instanceof Mesh) {\r\n            this.updateMesh(o);\r\n        } else if (o instanceof AmbientLight) {\r\n            this.ambientLightDensity.adds(o.density);\r\n        } else if (o instanceof PointLight) {\r\n            this.pointLights.push(o);\r\n        } else if (o instanceof SpotLight) {\r\n            if (o.needsUpdateCoord) {\r\n                o.worldDirection.mulmatvset(o.worldCoord.mat, o.direction);\r\n            }\r\n            this.spotLights.push(o);\r\n        } else if (o instanceof DirectionalLight) {\r\n            if (o.needsUpdateCoord) {\r\n                o.worldDirection.mulmatvset(o.worldCoord.mat, o.direction);\r\n            }\r\n            this.directionalLights.push(o);\r\n        } else if (o.needsUpdateCoord && o === this.activeCamera) {\r\n            this.cameraInScene = true;\r\n            o.worldCoord.inv().writeBuffer(this.jsBuffer);\r\n            o.worldCoord.writeBuffer(this.jsBuffer, 20);\r\n            this.gpu.device.queue.writeBuffer(this.uCamMatBuffer, 0, this.jsBuffer, 0, 40);\r\n        }\r\n    }\r\n    // this may fail to add to drawlist if pipeline creation is not finished yet\r\n    addToDrawList(m: Mesh) {\r\n        let pipeline = this.fetchPipeline(m.material.identifier);\r\n        // attention: this is an async function, rendering will be in the future tick\r\n        if (!pipeline) { m.material.bindGroup = null; m.bindGroup = null; m.material.compile(this); return; }\r\n        if (pipeline === \"compiling\") return;\r\n        // if this material can use other's pipeline, it hasn't compiled but also need some initiations\r\n        if (!m.material.compiled) { m.material.init(this); }\r\n        let groupName = m.material.uuid;\r\n        let group = m.material.declUniformLocation ? 1 : 0;\r\n        if (!this.drawList[groupName]) {\r\n            let bindGroup = this.core.createFragmentShaderBindGroup(pipeline, group, [this.uWorldLightBuffer], \"WorldLightGroup\");\r\n            this.drawList[groupName] = {\r\n                pipeline: pipeline, meshes: [],\r\n                bindGroup: { group, binding: bindGroup }, tetraCount: 0\r\n            };\r\n        }\r\n        let list = this.drawList[groupName];\r\n        // while (list.next) {\r\n        //     list = this.drawList[list.next]; //go to the end of chain table\r\n        // }\r\n        // list.tetraCount += m.geometry.jsBuffer.tetraCount;\r\n        list.meshes.push(m);\r\n        // if (list.tetraCount > this.maxTetraNumInOnePass) {\r\n        //     // append a new node to chain, wait for accept new objects next time\r\n        //     groupName = list.next = math.generateUUID();\r\n        //     this.drawList[groupName] = {\r\n        //         pipeline: pipeline, meshes: [],\r\n        //         bindGroup: list.bindGroup, tetraCount: 0\r\n        //     };\r\n        // }\r\n        if (!m.bindGroup) {\r\n            let buffers = [\r\n                ...m.material.fetchBuffer(m.geometry),\r\n                m.uObjMatBuffer,\r\n                this.uCamMatBuffer\r\n            ];\r\n            m.bindGroup = this.core.createVertexShaderBindGroup(pipeline, 1, buffers, m.material.identifier);\r\n        }\r\n        if (!m.material.bindGroup) {\r\n            m.material.createBindGroup(this, pipeline);\r\n        }\r\n        m.material.update(this);\r\n    }\r\n\r\n    async compileMaterials(mats: Iterable<Material> | Scene) {\r\n        let promises = [];\r\n        if (mats instanceof Scene) {\r\n            addMaterialInObject(this, promises, mats.child);\r\n        } else {\r\n            for (let m of mats) {\r\n                promises.push(m.compile(this));\r\n            }\r\n        }\r\n        await Promise.all(promises);\r\n        function addMaterialInObject(self: Renderer, promises: Promise<void>[], child: Object[]) {\r\n            for (let m of child) {\r\n                if (m instanceof Mesh) {\r\n                    let pipeline = self.fetchPipeline(m.material.identifier);\r\n                    if (!pipeline) {\r\n                        m.material.bindGroup = null; m.bindGroup = null;\r\n                        promises.push(m.material.compile(self));\r\n                    }\r\n                    if (!m.material.compiled) { m.material.init(self); }\r\n                }\r\n                addMaterialInObject(self, promises, m.child);\r\n            }\r\n        }\r\n    }\r\n    updateMesh(m: Mesh) {\r\n        if (m.needsUpdateCoord) {\r\n            m.worldCoord.writeBuffer(this.jsBuffer, 0);\r\n            m.worldCoord.mat.inv().ts().writeBuffer(this.jsBuffer, 20);\r\n            if (!m.uObjMatBuffer) {\r\n                m.uObjMatBuffer = this.gpu.createBuffer(\r\n                    GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, (20 + 16) * 4, \"uObjMatBuffer\"\r\n                );\r\n            }\r\n            this.gpu.device.queue.writeBuffer(m.uObjMatBuffer, 0, this.jsBuffer, 0, 20 + 16);\r\n        }\r\n        if (m.geometry.needsUpdate) {\r\n            let g = m.geometry;\r\n            g.needsUpdate = false;\r\n            g.updateOBB();\r\n            if (!g.gpuBuffer) {\r\n                g.gpuBuffer = {};\r\n                let dyn = g.dynamic ? GPUBufferUsage.COPY_DST : 0;\r\n                for (let [label, value] of globalThis.Object.entries(g.jsBuffer)) {\r\n                    if (value instanceof Float32Array) {\r\n                        g.gpuBuffer[label] = this.gpu.createBuffer(\r\n                            GPUBufferUsage.STORAGE | dyn, value, \"AttributeBuffer.\" + label\r\n                        );\r\n                    }\r\n                }\r\n            } else if (g.dynamic) {\r\n                for (let [label, buffer] of globalThis.Object.entries(g.gpuBuffer)) {\r\n                    this.gpu.device.queue.writeBuffer(buffer, 0, g.jsBuffer[label]);\r\n                }\r\n            }\r\n        }\r\n        if (m.visible) this.addToDrawList(m);\r\n    }\r\n    updateScene(scene: Scene) {\r\n        this.core.setWorldClearColor(scene.backGroundColor);\r\n        this.cameraInScene = false;\r\n        this.maxTetraNumInOnePass = this.safeTetraNumInOnePass / this.tetraNumOccupancyRatio;\r\n        for (let c of scene.child) {\r\n            if (c.alwaysUpdateCoord) {\r\n                c.needsUpdateCoord = true;\r\n            }\r\n            if (c.needsUpdateCoord) {\r\n                c.worldCoord.setFromObj4(c);\r\n            }\r\n            this.updateObject(c);\r\n            c.needsUpdateCoord = false;\r\n        }\r\n        if (this.cameraInScene === false) console.error(\"Target camera is not in the scene. Forget to add it?\");\r\n        _updateWorldLight(this);\r\n    }\r\n    ambientLightDensity = new Vec3;\r\n    directionalLights: DirectionalLight[];\r\n    spotLights: SpotLight[];\r\n    pointLights: PointLight[];\r\n\r\n    drawList: DrawList;\r\n    activeCamera: Camera;\r\n    setCamera(camera: Camera) {\r\n        if (camera.needsUpdate) {\r\n            this.core.setCameraProjectMatrix(camera);\r\n            camera.needsUpdate = false;\r\n        }\r\n        this.activeCamera = camera;\r\n    }\r\n    render(scene: Scene, camera: Camera) {\r\n        this.clearState();\r\n        this.setCamera(camera);\r\n        this.updateScene(scene);\r\n        this.core.render(() => {\r\n            for (let { pipeline, meshes, bindGroup } of globalThis.Object.values(this.drawList)) {\r\n                if (!meshes.length) continue; // skip empty (may caused by safe tetranum check)\r\n                let tetraState = false;\r\n                let tetraCount = 0;\r\n                let binding = [\r\n                    ...meshes[0].material.bindGroup.map((bg, binding) => ({ group: binding, binding: bg })),\r\n                    bindGroup\r\n                ];\r\n                for (let mesh of meshes) {\r\n                    if (!this.core.testWithFrustumData(mesh.geometry.obb, this.activeCamera.worldCoord, mesh.worldCoord)) continue;\r\n                    if (tetraState === false) {\r\n                        this.core.beginTetras(pipeline);\r\n                        tetraCount = 0;\r\n                        tetraState = true;\r\n                    }\r\n                    this.core.sliceTetras(mesh.bindGroup, mesh.geometry.jsBuffer.count);\r\n                    tetraCount += mesh.geometry.jsBuffer.count;\r\n                    if (tetraCount > this.maxTetraNumInOnePass) {\r\n                        this.core.drawTetras(binding);\r\n                        tetraState = false;\r\n                        tetraCount = 0;\r\n                    }\r\n                }\r\n                if (tetraState === true) {\r\n                    this.core.drawTetras(binding);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    setSize(size: GPUExtent3DStrict) {\r\n        if ((size as GPUExtent3DDict).height) {\r\n            this.canvas.width = (size as GPUExtent3DDict).width;\r\n            this.canvas.height = (size as GPUExtent3DDict).height;\r\n        } else {\r\n            this.canvas.width = size[0];\r\n            this.canvas.height = size[1];\r\n        }\r\n        this.core.setSize(size);\r\n    }\r\n    private clearState() {\r\n        this.ambientLightDensity.set();\r\n        this.directionalLights = [];\r\n        this.spotLights = [];\r\n        this.pointLights = [];\r\n        this.drawList = {};\r\n    }\r\n}\r\ninterface DrawList {\r\n    [group: string]: {\r\n        pipeline: TetraSlicePipeline,\r\n        meshes: Mesh[],\r\n        bindGroup: { group: number, binding: GPUBindGroup },\r\n        tetraCount: number\r\n        next?: string // if too many objs in drawlist, split into a list table\r\n    }\r\n}","//  tetra vertex shaders\r\nlet commonHeader = `\r\nstruct AffineMat{\r\n    matrix: mat4x4<f32>,\r\n    vector: vec4<f32>,\r\n}\r\nstruct UObjMats{\r\n    pos: AffineMat,\r\n    normal: mat4x4<f32>,\r\n}\r\nstruct fourInputType{\r\n    @location(0) pos: mat4x4<f32>,{fourInputType}\r\n}\r\nstruct fourOutputType{\r\n    @builtin(position) position: mat4x4<f32>,\r\n    {fourOutputType}\r\n}\r\n@group(1) @binding({0}) var<uniform> uObjMat: UObjMats;\r\n@group(1) @binding({1}) var<uniform> uCamMat: AffineMat;\r\nfn apply(afmat: AffineMat, points: mat4x4<f32>) -> mat4x4<f32>{\r\n    let biais = mat4x4<f32>(afmat.vector, afmat.vector, afmat.vector, afmat.vector);\r\n    return afmat.matrix * points + biais;\r\n}\r\nfn normalizeVec4s(vec4s: mat4x4<f32>) -> mat4x4<f32>{\r\n    return mat4x4<f32>(\r\n        normalize(vec4s[0]), normalize(vec4s[1]), normalize(vec4s[2]), normalize(vec4s[3]),\r\n    );\r\n}\r\n@tetra fn main(input : fourInputType, @builtin(instance_index) index: u32) -> fourOutputType{\r\n    let worldPos = apply(uObjMat.pos,input.pos);\r\n    return fourOutputType({fourOutputReturn});\r\n}\r\n`;\r\nconst outputReturn = {\r\n    position: `apply(uCamMat,worldPos)`,\r\n    uvw: `input.uvw`,\r\n    normal: `normalizeVec4s(uObjMat.normal * input.normal)`,\r\n    pos: `worldPos`\r\n};\r\nexport function _generateVertShader(inputs: string[], outputs: string[]) {\r\n    const bindingOffset = inputs.length + 1;\r\n    let header = commonHeader;\r\n    let fourInputType = \"\";\r\n    let fourOutputType = \"\";\r\n    let fourOutputReturn = outputReturn.position;\r\n    for (let i = 0, l = inputs.length; i < l; i++) {\r\n        fourInputType += `\r\n        @location(${i + 1}) ${inputs[i]}: mat4x4<f32>,`;\r\n    }\r\n    if (outputs.length === 1) {\r\n        fourOutputType = `\r\n        @location(0) ${outputs[0]}: mat4x4<f32>,`;\r\n        fourOutputReturn += \",\" + outputReturn[outputs[0]];\r\n    } else if (outputs.length === 2) {\r\n        fourOutputType = `\r\n        @location(0) ${outputs[0]}: mat4x4<f32>,\r\n        @location(1) ${outputs[1]}: mat4x4<f32>`;\r\n        fourOutputReturn += \",\" + outputReturn[outputs[0]] + \",\" + outputReturn[outputs[1]];\r\n    } else if (outputs.length === 3) {\r\n        fourOutputType = `\r\n        @location(0) ${outputs[0]}_${outputs[1]}: array<mat4x4<f32>,2>,\r\n        @location(1) ${outputs[2]}: mat4x4<f32>`;\r\n        fourOutputReturn += \", array<mat4x4<f32>,2>(\" + outputReturn[outputs[0]] + \",\" +\r\n            outputReturn[outputs[1]] + \"),\" + outputReturn[outputs[2]];\r\n    }\r\n    for (let i = 0; i < 32; i++) {\r\n        header = header.replace(`@binding({${i}})`, `@binding(${i + bindingOffset})`);\r\n    }\r\n    return header.replace(\"{fourOutputReturn}\", fourOutputReturn).replace(\"{fourOutputType}\", fourOutputType).replace(\"{fourInputType}\", fourInputType);\r\n}","import { AffineMat4, Obj4 } from \"../math/algebra/affine\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { generateUUID } from \"../math/random\";\r\nimport { TetraSlicePipeline } from \"../render/slice\";\r\nimport { Renderer } from \"./renderer\";\r\nimport { Geometry } from \"./scene\";\r\nimport { _generateVertShader } from \"./vertexshader\";\r\n\r\ntype ColorOutputNode = MaterialNode & { output: \"color\" };\r\ntype Vec4OutputNode = MaterialNode & { output: \"vec4\" };\r\ntype FloatOutputNode = MaterialNode & { output: \"f32\" };\r\ntype TransformOutputNode = MaterialNode & { output: \"affineMat4\" };\r\n\r\n/** An iterative structure for Material */\r\nclass MaterialNode {\r\n    identifier: string;\r\n    input: { [name: string]: MaterialNode } = {};\r\n    output: string;\r\n    static constFractionDigits = 4;\r\n    getCode(r: Renderer, root: Material, outputToken: string): string { return \"\"; }\r\n    getInputCode(r: Renderer, root: Material, token: string) {\r\n        let out: { [name: string]: string } = {};\r\n        let code = \"\";\r\n        for (let [name, node] of globalThis.Object.entries(this.input)) {\r\n            let inputToken = token + \"_\" + name;\r\n            out[name] = inputToken;\r\n            code += node.getCode(r, root, inputToken) + \"\\n\";\r\n        };\r\n        return { token: out, code };\r\n    }\r\n    update(r: Renderer) {\r\n        for (let node of globalThis.Object.values(this.input)) {\r\n            node.update(r);\r\n        }\r\n    }\r\n    constructor(identifier: string) { this.identifier = identifier; }\r\n}\r\n/** Material is the top node of MaterialNode */\r\nexport class Material extends MaterialNode {\r\n    cullMode: GPUCullMode = \"front\";\r\n    compiling = false;\r\n    compiled = false;\r\n    needsUpdate = true;\r\n    output = \"shader\";\r\n    pipeline: TetraSlicePipeline;\r\n    uuid: string;\r\n    bindGroup: GPUBindGroup[];\r\n    bindGroupBuffers: GPUBuffer[] = [];\r\n    fetchBuffers: string[] = [];\r\n    declUniforms: { [name: string]: { location: number, type: string, buffer: GPUBuffer } } = {};\r\n    declUniformLocation = 0;\r\n    declVarys: string[] = [];\r\n    declHeaders: { [name: string]: string };\r\n    createBindGroup(r: Renderer, p: TetraSlicePipeline) {\r\n        this.bindGroup = this.bindGroupBuffers.length ? [r.core.createFragmentShaderBindGroup(p, 0, this.bindGroupBuffers)] : [];\r\n    }\r\n    init(r: Renderer) {\r\n        this.getShaderCode(r); // scan code to get binding infomations\r\n        this.compiling = false;\r\n        this.compiled = true;\r\n    }\r\n    async compile(r: Renderer) {\r\n        this.compiling = true;\r\n        r.pullPipeline(this.identifier, \"compiling\");\r\n        let { vs, fs } = this.getShaderCode(r);\r\n        this.pipeline = await r.core.createTetraSlicePipeline({\r\n            vertex: { code: vs, entryPoint: \"main\" },\r\n            fragment: { code: fs, entryPoint: \"main\" },\r\n            cullMode: this.cullMode\r\n        });\r\n        r.pullPipeline(this.identifier, this.pipeline);\r\n        this.compiling = false;\r\n        this.compiled = true;\r\n    }\r\n    // when a subnode uses vary input, call this function to check attribute buffer and construct input structure\r\n    addVary(a: string) {\r\n        if (!this.declVarys.includes(a)) {\r\n            this.declVarys.push(a);\r\n        }\r\n        if (a == \"pos\") return;\r\n        if (!this.fetchBuffers.includes(a)) {\r\n            this.fetchBuffers.push(a);\r\n        }\r\n    }\r\n    // when a subnode uses header, call this function to check whether headers are already included\r\n    addHeader(key: string, value: string) {\r\n        if (!this.declHeaders[key]) {\r\n            this.declHeaders[key] = value;\r\n        } else if (this.declHeaders[key] !== value) {\r\n            console.warn(`Found multiple definition of header \"${key}\".`);\r\n        }\r\n    }\r\n    // when a subnode uses uniform, call this function to add uniform globally\r\n    addUniform(type: string, u: string, buffer: GPUBuffer) {\r\n        if (!this.declUniforms[u]) {\r\n            this.declUniforms[u] = { location: this.declUniformLocation++, type, buffer };\r\n            this.bindGroupBuffers.push(buffer);\r\n        }\r\n    }\r\n    fetchBuffer(g: Geometry): GPUBuffer[] {\r\n        //sort buffer fetchBuffers\r\n        return [g.gpuBuffer[\"position\"], ...this.fetchBuffers.map(b => g.gpuBuffer[b])];\r\n    }\r\n    getShaderCode(r: Renderer): { vs: string, fs: string } {\r\n        // what we need in jsData except for position buffer\r\n        this.fetchBuffers = [];\r\n        // renderPipeline's uniform variables except for world light (in another group)\r\n        this.declUniforms = {};\r\n        // output of computeShader, also input for fragment shader\r\n        this.declVarys = [];\r\n        this.bindGroupBuffers = [];\r\n        // renderPipeline's uniform bindgroup's location number\r\n        this.declUniformLocation = 0;\r\n        this.declHeaders = {};\r\n        // iteratively generate code\r\n        let code = this.getCode(r, this, \"\");\r\n        // deal no need for vary input\r\n        let fsIn = this.declVarys.length ? 'vary: fourInputType' : \"\";\r\n        let lightCode = r.lightShaderInfomation.lightCode;\r\n        let headers = globalThis.Object.values(this.declHeaders).join(\"\\n\");\r\n        // if no uniform at group0, then bind lights on 0, or 1\r\n        if (this.declUniformLocation === 0) { lightCode = lightCode.replace(\"@group(1)\", \"@group(0)\") }\r\n        let header = headers + lightCode + `\r\n    struct AffineMat{\r\n        matrix: mat4x4<f32>,\r\n        vector: vec4<f32>,\r\n    }\r\n    @fragment fn main(${fsIn}) -> @location(0) vec4<f32> {\r\n        let ambientLightDensity = uWorldLight.ambientLightDensity.xyz;`; // avoid basic material doesn't call this uniform at all\r\n        // if frag shader has input, we need to construct a struct fourInputType\r\n        if (fsIn) {\r\n            let struct = `    struct fourInputType{\\n`;\r\n            for (let i = 0, l = this.declVarys.length; i < l; i++) {\r\n                struct += `        @location(${i}) ${this.declVarys[i]}: vec4<f32>,\\n`;\r\n            }\r\n            struct += \"    }\\n\";\r\n            header = struct + header;\r\n        }\r\n        for (let [u, { location, type }] of globalThis.Object.entries(this.declUniforms)) {\r\n            header = `   @group(0) @binding(${location}) var<uniform> ${u}:${type};\\n` + header;\r\n        }\r\n        // we use the result from getCode to generate needed vertex variables\r\n        return { vs: _generateVertShader(this.fetchBuffers, this.declVarys), fs: header + code + `\\n   }` };\r\n    }\r\n\r\n    constructor(identifiers: string) {\r\n        super(identifiers);\r\n        this.uuid = generateUUID();\r\n    }\r\n    gpuUniformBuffer: { [name: string]: GPUBuffer };\r\n}\r\n/** ConstValue will be hardcoded in shader */\r\nclass ConstValue extends MaterialNode {\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        return `\r\n                const ${outputToken} = ${this.identifier};`;\r\n    }\r\n    constructor(identifier: string) {\r\n        super(identifier);\r\n    }\r\n}\r\nclass ColorConstValue extends ConstValue {\r\n    declare output: \"color\";\r\n    constructor(color: GPUColor) {\r\n        let r: number = (color as GPUColorDict)?.r ?? color[0] ?? 0;\r\n        let g: number = (color as GPUColorDict)?.g ?? color[1] ?? 0;\r\n        let b: number = (color as GPUColorDict)?.b ?? color[2] ?? 0;\r\n        let a: number = (color as GPUColorDict)?.a ?? color[3] ?? 1;\r\n        super(`vec4<f32>(${r.toFixed(MaterialNode.constFractionDigits)},${g.toFixed(MaterialNode.constFractionDigits)},${b.toFixed(MaterialNode.constFractionDigits)},${a.toFixed(MaterialNode.constFractionDigits)})`);\r\n    }\r\n}\r\nclass Vec4ConstValue extends ConstValue {\r\n    declare output: \"vec4\";\r\n    constructor(vec: Vec4) {\r\n        super(`vec4<f32>(${vec.flat().map(n => n.toFixed(MaterialNode.constFractionDigits)).join(\",\")})`);\r\n    }\r\n}\r\nclass FloatConstValue extends ConstValue {\r\n    declare output: \"f32\";\r\n    constructor(f: number) {\r\n        super(f.toFixed(MaterialNode.constFractionDigits));\r\n    }\r\n}\r\nclass TransformConstValue extends ConstValue {\r\n    declare output: \"affineMat4\";\r\n    constructor(v: Obj4) {\r\n        let afmat = v.getAffineMat4();\r\n        let matEntries = afmat.mat.ts().elem.map(n => n.toFixed(MaterialNode.constFractionDigits)).join(\",\");\r\n        let vecEntries = afmat.vec.flat().map(n => n.toFixed(MaterialNode.constFractionDigits)).join(\",\");\r\n        super(`AffineMat(mat4x4<f32>(${matEntries}),vec4<f32>(${vecEntries}))`);\r\n    }\r\n}\r\n\r\n/** the same UniformValue instance will share one uniform buffer */\r\nclass UniformValue extends MaterialNode {\r\n    gpuBuffer: GPUBuffer;\r\n    gpuBufferSize: number;\r\n    jsBufferSize: number;\r\n    type: string;\r\n    needsUpdate = true;\r\n    constructor() {\r\n        super(\"u\" + generateUUID().replace(/\\-/g, \"\").slice(16));\r\n    }\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        if (!this.gpuBuffer) {\r\n            this.createBuffer(r);\r\n        }\r\n        root.addUniform(this.type, this.identifier, this.gpuBuffer);\r\n        return `\r\n                let ${outputToken} = ${this.identifier};`;\r\n    }\r\n    createBuffer(r: Renderer) {\r\n        this.gpuBuffer = r.gpu.createBuffer(GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, this.gpuBufferSize, \"uConstValueBuffer\");\r\n        this.jsBufferSize = this.gpuBufferSize >> 2;\r\n    }\r\n    _update(r: Renderer) { }\r\n    update(r: Renderer) {\r\n        if (!this.needsUpdate) return;\r\n        this._update(r);\r\n        r.gpu.device.queue.writeBuffer(this.gpuBuffer, 0, r.jsBuffer, 0, this.jsBufferSize);\r\n        this.needsUpdate = false;\r\n    }\r\n}\r\nexport class ColorUniformValue extends UniformValue {\r\n    declare output: \"color\";\r\n    type = \"vec4<f32>\";\r\n    gpuBufferSize = 4 * 4;\r\n    value: GPUColor;\r\n    _update(r: Renderer) {\r\n        r.jsBuffer[0] = (this.value as GPUColorDict)?.r ?? this.value[0] ?? 0;\r\n        r.jsBuffer[1] = (this.value as GPUColorDict)?.g ?? this.value[1] ?? 0;\r\n        r.jsBuffer[2] = (this.value as GPUColorDict)?.b ?? this.value[2] ?? 0;\r\n        r.jsBuffer[3] = (this.value as GPUColorDict)?.a ?? this.value[3] ?? 1;\r\n    }\r\n    write(value: GPUColor) {\r\n        this.value = value;\r\n        this.needsUpdate = true;\r\n    }\r\n}\r\nexport class Vec4UniformValue extends UniformValue {\r\n    declare output: \"vec4\";\r\n    type = \"vec4<f32>\";\r\n    gpuBufferSize = 4 * 4;\r\n    value: Vec4;\r\n    _update(r: Renderer) {\r\n        this.value.writeBuffer(r.jsBuffer);\r\n    }\r\n    write(value: Vec4) {\r\n        this.value = value;\r\n        this.needsUpdate = true;\r\n    }\r\n}\r\nexport class FloatUniformValue extends UniformValue {\r\n    declare output: \"f32\";\r\n    type = \"f32\";\r\n    gpuBufferSize = 4;\r\n    value: number;\r\n    _update(r: Renderer) {\r\n        r.jsBuffer[0] = this.value;\r\n    }\r\n    write(value: number) {\r\n        this.value = value;\r\n        this.needsUpdate = true;\r\n    }\r\n}\r\nexport class TransformUniformValue extends UniformValue {\r\n    declare output: \"affineMat4\";\r\n    type = \"AffineMat\";\r\n    gpuBufferSize = 20 * 4;\r\n    value: Obj4;\r\n    private affineMatValue = new AffineMat4();\r\n    _update(r: Renderer) {\r\n        this.affineMatValue.setFromObj4(this.value).writeBuffer(r.jsBuffer);\r\n    }\r\n    write(value: Obj4) {\r\n        this.value = value;\r\n        this.needsUpdate = true;\r\n    }\r\n}\r\n\r\n\r\nexport type Color = GPUColor | ColorOutputNode;\r\n/** A shortcut path for writing a constant color */\r\nfunction makeColorOutput(color: Color) {\r\n    if (!(color instanceof MaterialNode)) color = new ColorConstValue(color as GPUColor);\r\n    return color;\r\n}\r\nexport type Float = number | FloatOutputNode;\r\n/** A shortcut path for writing a constant color */\r\nfunction makeFloatOutput(f: Float) {\r\n    if (!(f instanceof MaterialNode)) f = new FloatConstValue(f as number);\r\n    return f;\r\n}\r\n/** Basic material just return color node's output color  */\r\nexport class BasicMaterial extends Material {\r\n    declare input: {\r\n        color: ColorOutputNode;\r\n    };\r\n    constructor(color: Color) {\r\n        color = makeColorOutput(color);\r\n        super(\"Basic(\" + color.identifier + \")\");\r\n        this.input = { color };\r\n    }\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        let color = this.input.color.getCode(r, root, \"color\");\r\n        return color + `\r\n                return color;`;\r\n    }\r\n}\r\nexport class LambertMaterial extends Material {\r\n    declare input: {\r\n        color: ColorOutputNode;\r\n    };\r\n\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        root.addVary(\"normal\");\r\n        root.addVary(\"pos\");\r\n        let color = this.input.color.getCode(r, root, \"color\");\r\n        return color + `\r\n                var radiance = ambientLightDensity;\r\n                for(var i=0;i<${r.lightShaderInfomation.posdirLightsNumber};i++){\r\n                    var N = vec4<f32>(0.0);\r\n                    if(uWorldLight.posdirLights[i].density.w<-0.5){\r\n                        N = uWorldLight.posdirLights[i].pos_dir;\r\n                    }else if(uWorldLight.posdirLights[i].density.w>0.5){\r\n                        N = uWorldLight.posdirLights[i].pos_dir - vary.pos;\r\n                        N *= pow(length(N),-uWorldLight.posdirLights[i].density.w); // decay by distance\r\n                    }\r\n                    radiance += uWorldLight.posdirLights[i].density.rgb * max(0.0,dot(vary.normal,N));\r\n                }\r\n                for(var i=0;i<${r.lightShaderInfomation.spotLightsNumber};i++){\r\n                    if(uWorldLight.spotLights[i].density.w>0.5){\r\n                        var N = uWorldLight.spotLights[i].pos - vary.pos;\r\n                        let len = length(N);\r\n                        let penumbra = max(0.0,dot(N / len,uWorldLight.spotLights[i].dir)*uWorldLight.spotLights[i].params.x + uWorldLight.spotLights[i].params.y);\r\n                        N *= pow(len,-uWorldLight.spotLights[i].params.w) * pow(penumbra, uWorldLight.spotLights[i].params.z);\r\n                        radiance += uWorldLight.spotLights[i].density.rgb * max(0.0,dot(vary.normal,N));\r\n                    }\r\n                }\r\n                return vec4<f32>(acesFilm((color.rgb + blackColor) * radiance), color.a);`;\r\n    }\r\n    constructor(color: Color) {\r\n        color = makeColorOutput(color);\r\n        super(\"Lambert(\" + color.identifier + \")\");\r\n        this.input = { color };\r\n    }\r\n}\r\n/** Blinn Phong */\r\nexport class PhongMaterial extends Material {\r\n    declare input: {\r\n        color: ColorOutputNode;\r\n        specular: ColorOutputNode;\r\n        shininess: FloatOutputNode;\r\n    };\r\n\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        root.addVary(\"normal\");\r\n        root.addVary(\"pos\");\r\n        root.addUniform(\"array<AffineMat,2>\", \"uCamMat\", r.uCamMatBuffer);\r\n        let { code } = this.getInputCode(r, root, outputToken);\r\n        return code + `\r\n                var radiance = ambientLightDensity;\r\n                var specularRadiance = vec3<f32>(0.0);\r\n                let viewRay = -normalize(vary.pos - uCamMat[1].vector);\r\n                for(var i=0;i<${r.lightShaderInfomation.posdirLightsNumber};i++){\r\n                    var N = vec4<f32>(0.0);\r\n                    var D = 0.0;\r\n                    if(uWorldLight.posdirLights[i].density.w<-0.5){\r\n                        D = 1.0;\r\n                        N = uWorldLight.posdirLights[i].pos_dir;\r\n                    }else\r\n                     if(uWorldLight.posdirLights[i].density.w>0.5){\r\n                        N = uWorldLight.posdirLights[i].pos_dir - vary.pos;\r\n                        let len = length(N);\r\n                        D = pow(len,1.0 - uWorldLight.posdirLights[i].density.w); // decay by distance\r\n                        N /= len;\r\n                    }else{\r\n                        continue;\r\n                    }\r\n                    let halfvec = normalize(N + viewRay);\r\n                    radiance += uWorldLight.posdirLights[i].density.rgb *  D * max(0.0,dot(vary.normal,N));\r\n                    specularRadiance += uWorldLight.posdirLights[i].density.rgb *  D * max(0.0,pow(dot(vary.normal,halfvec),_shininess) ) ;\r\n                }\r\n                for(var i=0;i<${r.lightShaderInfomation.spotLightsNumber};i++){\r\n                    if(uWorldLight.spotLights[i].density.w>0.5){\r\n                        \r\n                        var N = uWorldLight.spotLights[i].pos - vary.pos;\r\n                        let len = length(N);\r\n                        N /= len;\r\n                        let penumbra = max(0.0,dot(N,uWorldLight.spotLights[i].dir)*uWorldLight.spotLights[i].params.x + uWorldLight.spotLights[i].params.y);\r\n                        let D = pow(len,1.0-uWorldLight.spotLights[i].params.w) * pow(penumbra, uWorldLight.spotLights[i].params.z);\r\n                        let halfvec = normalize(N + viewRay);\r\n                        \r\n                        radiance += uWorldLight.spotLights[i].density.rgb *  D * max(0.0,dot(vary.normal,N));\r\n                        specularRadiance += uWorldLight.spotLights[i].density.rgb *  D * max(0.0,pow(dot(vary.normal,halfvec),_shininess) ) ;\r\n                    }\r\n                }\r\n                return vec4<f32>(acesFilm((_color.rgb+blackColor) * radiance + _specular.rgb * specularRadiance), _color.a);`;\r\n    }\r\n    constructor(color: Color, shininess?: Float, specular?: Color) {\r\n        color = makeColorOutput(color);\r\n        specular = makeColorOutput(specular ?? [1, 1, 1]);\r\n        shininess = makeFloatOutput(shininess ?? 20.0);\r\n        super(\"Phong(\" + color.identifier + \",\" + specular.identifier + \",\" + shininess.identifier + \")\");\r\n        this.input = { color, shininess, specular };\r\n    }\r\n}\r\nexport class CheckerTexture extends MaterialNode {\r\n    declare output: \"color\";\r\n    declare input: {\r\n        color1: ColorOutputNode;\r\n        color2: ColorOutputNode;\r\n        uvw: Vec4OutputNode;\r\n    }\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        // Tell root material that CheckerTexture needs deal dependency of vary input uvw\r\n        let { token, code } = this.getInputCode(r, root, outputToken);\r\n        return code + `\r\n                let ${outputToken}_checker = fract(${token.uvw}+vec4<f32>(0.001)) - vec4<f32>(0.5);\r\n                let ${outputToken} = mix(${token.color1},${token.color2},step( ${outputToken}_checker.x * ${outputToken}_checker.y * ${outputToken}_checker.z * ${outputToken}_checker.w, 0.0));\r\n                `;\r\n    }\r\n    constructor(color1: Color, color2: Color, uvw?: Vec4OutputNode) {\r\n        color1 = makeColorOutput(color1);\r\n        color2 = makeColorOutput(color2);\r\n        uvw ??= new UVWVec4Input();\r\n        super(`Checker(${color1.identifier},${color2.identifier},${uvw.identifier})`);\r\n        this.input = { color1, color2, uvw };\r\n    }\r\n}\r\nexport class GridTexture extends MaterialNode {\r\n    declare output: \"color\";\r\n    declare input: {\r\n        color1: ColorOutputNode;\r\n        color2: ColorOutputNode;\r\n        gridWidth: Vec4OutputNode;\r\n        uvw: Vec4OutputNode;\r\n    }\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        // Tell root material that CheckerTexture needs deal dependency of vary input uvw\r\n        let { token, code } = this.getInputCode(r, root, outputToken);\r\n        return code + `\r\n                let ${outputToken}_grid = step(${token.gridWidth}, fract(${token.uvw}));\r\n                let ${outputToken} = mix(${token.color1},${token.color2},${outputToken}_grid.x*${outputToken}_grid.y*${outputToken}_grid.z);\r\n                `;\r\n    }\r\n    constructor(color1: Color, color2: Color, gridWidth: number | Vec4 | Vec4OutputNode, uvw?: Vec4OutputNode) {\r\n        color1 = makeColorOutput(color1);\r\n        color2 = makeColorOutput(color2);\r\n        gridWidth = !(gridWidth instanceof MaterialNode) ? new Vec4ConstValue(\r\n            (gridWidth instanceof Vec4) ? gridWidth : new Vec4(gridWidth, gridWidth, gridWidth, gridWidth)\r\n        ) : gridWidth;\r\n        uvw ??= new UVWVec4Input();\r\n        super(`Grid(${color1.identifier},${color2.identifier}),${gridWidth.identifier},${uvw.identifier}`);\r\n        this.input = { color1, color2, gridWidth, uvw };\r\n    }\r\n}\r\nexport class UVWVec4Input extends MaterialNode {\r\n    declare output: \"vec4\";\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        root.addVary(\"uvw\");\r\n        return `\r\n                let ${outputToken} = vary.uvw;`;\r\n    }\r\n    constructor() {\r\n        super(\"vary.uvw\");\r\n    }\r\n}\r\nexport class Vec4TransformNode extends MaterialNode {\r\n    declare output: \"vec4\";\r\n    declare input: {\r\n        vec4: Vec4OutputNode;\r\n        transform: TransformOutputNode;\r\n    }\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        let input = this.getInputCode(r, root, outputToken);\r\n        let affine = input.token.transform;\r\n        return input.code + `\r\n                let ${outputToken} = ${affine}.matrix * ${input.token.vec4} + ${affine}.vector;`;\r\n    }\r\n    constructor(vec4: Vec4OutputNode, transform: Obj4 | TransformOutputNode) {\r\n        transform = (!(transform instanceof MaterialNode)) ? new TransformConstValue(transform) : transform;\r\n        super(\"vec4tr(\" + vec4.identifier + \",\" + transform.identifier + \")\");\r\n        this.input = { vec4, transform };\r\n    }\r\n}\r\n/** simplex 3D noise */\r\nexport const NoiseWGSLHeader = `\r\n        fn mod289v3(x:vec3<f32>)->vec3<f32> {\r\n            return x - floor(x * (1.0 / 289.0)) * 289.0; \r\n        }\r\n        fn mod289v4(x:vec4<f32>)->vec4<f32> {\r\n            return x - floor(x * (1.0 / 289.0)) * 289.0; \r\n        }\r\n        fn mod289f(x:f32)->f32 {\r\n            return x - floor(x * (1.0 / 289.0)) * 289.0; \r\n        }\r\n        fn permutev4(x:vec4<f32>)->vec4<f32> {\r\n            return mod289v4(((x * 34.0) + 1.0) * x);\r\n        }\r\n        fn permutef(x:f32)-> f32 {\r\n            return mod289f(((x * 34.0) + 1.0) * x);\r\n        }\r\n        fn taylorInvSqrtv4(r:vec4<f32>)->vec4<f32> {\r\n            return vec4(1.79284291400159) - 0.85373472095314 * r;\r\n        }\r\n        fn taylorInvSqrtf(r:f32)->f32{\r\n            return 1.79284291400159 - 0.85373472095314 * r;\r\n        }\r\n        \r\n        fn snoise(v1:vec3<f32>)->f32{\r\n            let v = v1 + vec3(0.00001,0.00002,0.00003);\r\n            const C = vec2(1.0/6.0, 1.0/3.0);\r\n            const D = vec4(0.0, 0.5, 1.0, 2.0);\r\n\r\n            // First corner\r\n            var i  = floor(v + dot(v, vec3(C.y)) );\r\n            let x0 =   v - i + dot(i, vec3(C.x)) ;\r\n\r\n            // Other corners\r\n            let g = step(x0.yzx, x0.xyz);\r\n            let l = 1.0 - g;\r\n            let i1 = min( g.xyz, l.zxy );\r\n            let i2 = max( g.xyz, l.zxy );\r\n\r\n            let x1 = x0 - i1 + vec3(C.x);\r\n            let x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y\r\n            let x3 = x0 - vec3(D.y);      // -1.0+3.0*C.x = -0.5 = -D.y\r\n\r\n            // Permutations\r\n            i = mod289v3(i);\r\n            let p = permutev4( permutev4( permutev4(\r\n                        vec4(i.z) + vec4(0.0, i1.z, i2.z, 1.0 ))\r\n                    + vec4(i.y) + vec4(0.0, i1.y, i2.y, 1.0 ))\r\n                    + vec4(i.x) + vec4(0.0, i1.x, i2.x, 1.0 ));\r\n\r\n            // Gradients: 7x7 points over a square, mapped onto an octahedron.\r\n            // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\r\n            const n_ = 0.142857142857; // 1.0/7.0\r\n            let  ns = n_ * D.wyz - D.xzx;\r\n\r\n            let j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\r\n\r\n            let x_ = floor(j * ns.z);\r\n            let y_ = floor(j - 7.0 * x_ );    // mod(j,N)\r\n\r\n            let x = x_ *ns.x + vec4(ns.y);\r\n            let y = y_ *ns.x + vec4(ns.y);\r\n            let h = 1.0 - abs(x) - abs(y);\r\n\r\n            let b0 = vec4( x.xy, y.xy );\r\n            let b1 = vec4( x.zw, y.zw );\r\n\r\n            //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\r\n            //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\r\n            let s0 = floor(b0)*2.0 + 1.0;\r\n            let s1 = floor(b1)*2.0 + 1.0;\r\n            let sh = -step(h, vec4(0.0));\r\n\r\n            let a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\r\n            let a1 = b1.xzyw + s1.xzyw*sh.zzww ;\r\n\r\n            var p0 = vec3(a0.xy,h.x);\r\n            var p1 = vec3(a0.zw,h.y);\r\n            var p2 = vec3(a1.xy,h.z);\r\n            var p3 = vec3(a1.zw,h.w);\r\n\r\n            //Normalise gradients\r\n            let norm = taylorInvSqrtv4(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n            p0 *= norm.x;\r\n            p1 *= norm.y;\r\n            p2 *= norm.z;\r\n            p3 *= norm.w;\r\n\r\n            // Mix final noise value\r\n            var m = max(vec4(0.6) - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));\r\n            m = m * m;\r\n            return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\r\n        }\r\n        `;\r\n\r\nexport class NoiseTexture extends MaterialNode {\r\n    declare output: \"f32\";\r\n    declare input: {\r\n        uvw: Vec4OutputNode;\r\n    }\r\n    getCode(r: Renderer, root: Material, outputToken: string) {\r\n        // Tell root material that CheckerTexture needs deal dependency of vary input uvw\r\n        root.addHeader(\"NoiseWGSLHeader\", NoiseWGSLHeader);\r\n        let { token, code } = this.getInputCode(r, root, outputToken);\r\n        return code + `\r\n                let ${outputToken} = snoise(${token.uvw});\r\n                `;\r\n    }\r\n    constructor(uvw?: Vec4OutputNode) {\r\n        uvw ??= new UVWVec4Input();\r\n        super(`Noise(${uvw.identifier})`);\r\n        this.input = { uvw };\r\n    }\r\n}","import { Obj4 } from \"../math/algebra/affine\";\r\nimport { Bivec } from \"../math/algebra/bivec\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { AABB } from \"../math/geometry/primitive\";\r\nimport { Material } from \"./engine\";\r\n\r\n        export type RigidType = \"still\" | \"passive\" | \"active\";\r\n        interface SimpleRigidDescriptor {\r\n            /** mass set to 0 to specify non-active rigid */\r\n            mass: number | null;\r\n            /** RigidGeometry instance cannot be shared between Rigid instances */\r\n            geometry: RigidGeometry;\r\n            material: Material;\r\n            type?: RigidType;\r\n            /** for tracing debug */\r\n            label?: string;\r\n        };\r\n        /** Subrigids should not be added into scene repetively.\r\n         * Subrigids's positions cannot be modified after union created\r\n         */\r\n        type UnionRigidDescriptor = Rigid[];\r\n        /** all properities hold by class Rigid should not be modified\r\n         *  exceptions are position/rotation and (angular)velocity.\r\n         *  pass RigidDescriptor into constructor instead.\r\n         *  */\r\n        export class Rigid extends Obj4 {\r\n            // Rigid extends Obj4, it has position and rotation, but no scale\r\n            declare scale: undefined;\r\n            material: Material;\r\n            // Caution: Two Rigids cannot share the same RigidGeometry instance\r\n            geometry: RigidGeometry;\r\n            type: RigidType;\r\n            mass: number|undefined;\r\n            invMass: number;\r\n            // inertia is a 6x6 Matrix for angularVelocity -> angularMomentum\r\n            // this is diagonalbMatrix under principal axes coordinates\r\n            inertia:Bivec|undefined = new Bivec();\r\n            invInertia:Bivec|undefined = new Bivec();\r\n            inertiaIsotroy: boolean; // whether using scalar inertia\r\n            // only apply to active type object\r\n            sleep: boolean = false;\r\n            // for tracing debug\r\n            label?: string;\r\n\r\n            velocity: Vec4 = new Vec4();\r\n            angularVelocity: Bivec = new Bivec();\r\n            force: Vec4 = new Vec4();\r\n            torque: Bivec = new Bivec();\r\n            acceleration: Vec4 = new Vec4();\r\n            angularAcceleration: Bivec = new Bivec();\r\n            constructor(param: SimpleRigidDescriptor | UnionRigidDescriptor) {\r\n                super();\r\n                if ((param as UnionRigidDescriptor).length) {\r\n                    this.geometry = new rigid.Union(param as UnionRigidDescriptor);\r\n                } else {\r\n                    let option = param as SimpleRigidDescriptor;\r\n                    this.geometry = option.geometry;\r\n                    this.mass = isFinite(option.mass as number) ? option.mass! : 0;\r\n                    this.type = option.type ?? \"active\";\r\n                    this.invMass = this.mass > 0 && (this.type === \"active\") ? 1 / this.mass : 0;\r\n                    this.material = option.material;\r\n                    this.label = option.label;\r\n                }\r\n                this.geometry.initialize(this);\r\n            }\r\n\r\n            getlinearVelocity(out: Vec4, point: Vec4) {\r\n                if (this.type === \"still\") return out.set();\r\n                let relPosition = out.subset(point, this.position);\r\n                return out.dotbset(relPosition, this.angularVelocity).adds(this.velocity);\r\n            }\r\n        }\r\n        /** internal type for union rigid geometry */\r\n        export interface SubRigid extends Rigid {\r\n            localCoord?: Obj4;\r\n            parent?: Rigid;\r\n        }\r\n        export abstract class RigidGeometry {\r\n            rigid: Rigid;\r\n            obb: AABB;\r\n            aabb: AABB;\r\n            boundingGlome: number;\r\n            initialize(rigid: Rigid) {\r\n                this.rigid = rigid;\r\n                this.initializeMassInertia(rigid);\r\n                if (!rigid.mass && rigid.type === \"active\") rigid.type = \"still\";\r\n                if (rigid.inertia) {\r\n                    rigid.invInertia!.xy = 1 / rigid.inertia.xy;\r\n                    if (!rigid.inertiaIsotroy) {\r\n                        rigid.invInertia!.xz = 1 / rigid.inertia.xz;\r\n                        rigid.invInertia!.yz = 1 / rigid.inertia.yz;\r\n                        rigid.invInertia!.xw = 1 / rigid.inertia.xw;\r\n                        rigid.invInertia!.yw = 1 / rigid.inertia.yw;\r\n                        rigid.invInertia!.zw = 1 / rigid.inertia.zw;\r\n                    } else {\r\n                        rigid.invInertia!.xz = rigid.invInertia!.xy;\r\n                        rigid.invInertia!.yz = rigid.invInertia!.xy;\r\n                        rigid.invInertia!.xw = rigid.invInertia!.xy;\r\n                        rigid.invInertia!.yw = rigid.invInertia!.xy;\r\n                        rigid.invInertia!.zw = rigid.invInertia!.xy;\r\n                        rigid.inertia.xz = rigid.inertia.xy;\r\n                        rigid.inertia.yz = rigid.inertia.xy;\r\n                        rigid.inertia.xw = rigid.inertia.xy;\r\n                        rigid.inertia.yw = rigid.inertia.xy;\r\n                        rigid.inertia.zw = rigid.inertia.xy;\r\n                    }\r\n                }\r\n            };\r\n            abstract initializeMassInertia(rigid: Rigid): void;\r\n        }\r\n        export namespace rigid {\r\n            export class Union extends RigidGeometry {\r\n                components: SubRigid[];\r\n                constructor(components: Rigid[]) { super(); this.components = components; }\r\n                // todo: union gen\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    // set union rigid's position at mass center of rigids\r\n                    rigid.position.set();\r\n                    rigid.mass = 0;\r\n                    for (let r of this.components) {\r\n                        if (r.mass === undefined) console.error(\"Union Rigid Geometry cannot contain a still rigid.\");\r\n                        rigid.position.addmulfs(r.position, r.mass!);\r\n                        rigid.mass += r.mass!;\r\n                    }\r\n                    rigid.invMass = 1 / rigid.mass;\r\n                    rigid.position.mulfs(rigid.invMass);\r\n                    // update rigids position to relative frame\r\n                    for (let r of this.components) {\r\n                        r.localCoord = new Obj4().copyObj4(r);\r\n                        r.localCoord.position.subs(rigid.position);\r\n                        r.parent = rigid;\r\n                    }\r\n                    // todo\r\n                    // let inertia = new Matrix(6,6);\r\n                    rigid.inertia!.xy = 1;\r\n                    rigid.inertiaIsotroy = true;\r\n                    rigid.type = \"active\";\r\n                };\r\n                updateCoord() {\r\n                    for (let r of this.components) {\r\n                        r.position.copy(r.localCoord!.position).rotates(this.rigid.rotation).adds(this.rigid.position);\r\n                        r.rotation.copy(r.localCoord!.rotation).mulsl(this.rigid.rotation);\r\n                    }\r\n                }\r\n            }\r\n            export class Glome extends RigidGeometry {\r\n                radius: number = 1;\r\n                radiusSqr: number = 1;\r\n                constructor(radius: number) {\r\n                    super();\r\n                    this.radius = radius;\r\n                    this.boundingGlome = radius;\r\n                    this.radiusSqr = radius * radius;\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    rigid.inertiaIsotroy = true;\r\n                    rigid.inertia!.xy = rigid.mass! * this.radiusSqr * 0.25;\r\n                }\r\n            }\r\n            export class Convex extends RigidGeometry {\r\n                points: Vec4[];\r\n                _cachePoints: Vec4[];\r\n                constructor(points: Vec4[]) {\r\n                    super();\r\n                    this.points = points;\r\n                    this.obb = AABB.fromPoints(points);\r\n                    this.boundingGlome = 0;\r\n                    for (let i of points) {\r\n                        this.boundingGlome = Math.max(this.boundingGlome, i.normsqr());\r\n                    }\r\n                    this.boundingGlome = Math.sqrt(this.boundingGlome);\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    // todo inertia calc\r\n                }\r\n            }\r\n            export class Tesseractoid extends Convex {\r\n                size: Vec4;\r\n                constructor(size: Vec4 | number) {\r\n                    let s = typeof size === \"number\" ? new Vec4(size, size, size, size) : size;\r\n                    super([\r\n                        new Vec4(s.x, s.y, s.z, s.w),\r\n                        new Vec4(-s.x, s.y, s.z, s.w),\r\n                        new Vec4(s.x, -s.y, s.z, s.w),\r\n                        new Vec4(-s.x, -s.y, s.z, s.w),\r\n                        new Vec4(s.x, s.y, -s.z, s.w),\r\n                        new Vec4(-s.x, s.y, -s.z, s.w),\r\n                        new Vec4(s.x, -s.y, -s.z, s.w),\r\n                        new Vec4(-s.x, -s.y, -s.z, s.w),\r\n                        new Vec4(s.x, s.y, s.z, -s.w),\r\n                        new Vec4(-s.x, s.y, s.z, -s.w),\r\n                        new Vec4(s.x, -s.y, s.z, -s.w),\r\n                        new Vec4(-s.x, -s.y, s.z, -s.w),\r\n                        new Vec4(s.x, s.y, -s.z, -s.w),\r\n                        new Vec4(-s.x, s.y, -s.z, -s.w),\r\n                        new Vec4(s.x, -s.y, -s.z, -s.w),\r\n                        new Vec4(-s.x, -s.y, -s.z, -s.w),\r\n                    ]);\r\n                    this.size = s;\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    let mins = Math.min(this.size.x, this.size.y, this.size.z, this.size.w);\r\n                    let maxs = Math.max(this.size.x, this.size.y, this.size.z, this.size.w);\r\n                    let isoratio = mins / maxs;\r\n                    rigid.inertiaIsotroy = isoratio > 0.95;\r\n                    if (rigid.inertiaIsotroy) {\r\n                        rigid.inertia!.xy = rigid.mass! * (mins + maxs) * (mins + maxs) * 0.2;\r\n                    } else {\r\n                        let x = this.size.x * this.size.x;\r\n                        let y = this.size.y * this.size.y;\r\n                        let z = this.size.z * this.size.z;\r\n                        let w = this.size.w * this.size.w;\r\n                        rigid.inertia!.set(x + y, x + z, x + w, y + z, y + w, z + w).mulfs(rigid.mass! * 0.2);\r\n                    }\r\n                }\r\n            }\r\n            /** equation: dot(normal,positon) == offset\r\n             *  => when offset > 0, plane is shifted to normal direction\r\n             *  from origin by distance = offset\r\n             */\r\n            export class Plane extends RigidGeometry {\r\n                normal: Vec4;\r\n                offset: number;\r\n                constructor(normal?: Vec4, offset?: number) {\r\n                    super();\r\n                    this.normal = normal ?? Vec4.y.clone();\r\n                    this.offset = offset ?? 0;\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    if (rigid.mass) console.warn(\"Infinitive Plane cannot have a finitive mass.\");\r\n                    rigid.mass = undefined;\r\n                    rigid.invMass = 0;\r\n                    rigid.inertia = undefined;\r\n                    rigid.invInertia = undefined;\r\n                }\r\n            }\r\n            /** default orientation: XW */\r\n            export class Spheritorus extends RigidGeometry {\r\n                majorRadius: number;\r\n                minorRadius: number;\r\n                /** majorRadius: cirle's radius, minorRadius: sphere's radius */\r\n                constructor(majorRadius: number, minorRadius: number) {\r\n                    super();\r\n                    this.majorRadius = majorRadius;\r\n                    this.minorRadius = minorRadius;\r\n                    this.obb = new AABB(\r\n                        new Vec4(\r\n                            -majorRadius - minorRadius, -minorRadius, -minorRadius, -majorRadius - minorRadius\r\n                        ),\r\n                        new Vec4(\r\n                            majorRadius + minorRadius, minorRadius, minorRadius, majorRadius + minorRadius\r\n                        ),\r\n                    );\r\n                    this.boundingGlome = majorRadius + minorRadius;\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    rigid.inertiaIsotroy = false;\r\n                    let maj = this.majorRadius * this.majorRadius;\r\n                    let min = this.minorRadius * this.minorRadius;\r\n                    let half = maj + 5 * min;\r\n                    let parallel = 2 * maj + 6 * min;\r\n                    let perp = 4 * min;\r\n                    rigid.inertia!.set(half, half, parallel, perp, half, half).mulfs(rigid.mass! * 0.1);\r\n                }\r\n            }\r\n            /** default orientation: XZW */\r\n            export class Torisphere extends RigidGeometry {\r\n                majorRadius: number;\r\n                minorRadius: number;\r\n                /** majorRadius: sphere's radius, minorRadius: cirle's radius */\r\n                constructor(majorRadius: number, minorRadius: number) {\r\n                    super();\r\n                    this.majorRadius = majorRadius;\r\n                    this.minorRadius = minorRadius;\r\n                    this.obb = new AABB(\r\n                        new Vec4(\r\n                            -majorRadius - minorRadius, -minorRadius, -majorRadius - minorRadius, -majorRadius - minorRadius\r\n                        ),\r\n                        new Vec4(\r\n                            majorRadius + minorRadius, minorRadius, majorRadius + minorRadius, majorRadius + minorRadius\r\n                        ),\r\n                    );\r\n                    this.boundingGlome = majorRadius + minorRadius;\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    rigid.inertiaIsotroy = false;\r\n                    let maj = this.majorRadius * this.majorRadius;\r\n                    let min = this.minorRadius * this.minorRadius;\r\n                    let half = 2 * maj + 5 * min;\r\n                    let parallel = 3 * maj + 6 * min;\r\n                    rigid.inertia!.set(half, parallel, parallel, half, half, parallel).mulfs(rigid.mass! * 0.1);\r\n                }\r\n            }\r\n            /** default orientation: 1:XY, 2:ZW */\r\n            export class Tiger extends RigidGeometry {\r\n                majorRadius1: number;\r\n                majorRadius2: number;\r\n                minorRadius: number;\r\n                /** majorRadius: sphere's radius, minorRadius: cirle's radius */\r\n                constructor(majorRadius1: number, majorRadius2: number, minorRadius: number) {\r\n                    super();\r\n                    this.majorRadius1 = majorRadius1;\r\n                    this.majorRadius2 = majorRadius2;\r\n                    this.minorRadius = minorRadius;\r\n                    this.obb = new AABB(\r\n                        new Vec4(-majorRadius1 - minorRadius, -majorRadius1 - minorRadius, -majorRadius2 - minorRadius, -majorRadius2 - minorRadius),\r\n                        new Vec4(majorRadius1 + minorRadius, majorRadius1 + minorRadius, majorRadius2 + minorRadius, majorRadius2 + minorRadius),\r\n                    );\r\n\r\n                    this.boundingGlome = Math.max(majorRadius1, majorRadius2) + minorRadius;\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    rigid.inertiaIsotroy = false;\r\n                    let maj1 = this.majorRadius1 * this.majorRadius1;\r\n                    let maj2 = this.majorRadius2 * this.majorRadius2;\r\n                    let min = this.minorRadius * this.minorRadius;\r\n                    let half = maj1 + maj2 + min * 6;\r\n                    rigid.inertia!.set(2 * maj1 + min * 5, half, half, half, half, 2 * maj2 + min * 5).mulfs(rigid.mass! * 0.5);\r\n                }\r\n            }\r\n            // todo\r\n            export class ThickHexahedronGrid extends RigidGeometry {\r\n                grid1: Vec4[][][];\r\n                grid2: Vec4[][][];\r\n                convex: Convex[];\r\n                constructor(\r\n                    grid1: Vec4[][][], grid2: Vec4[][][],\r\n                ) {\r\n                    super();\r\n                    this.grid1 = grid1;\r\n                    this.grid2 = grid2;\r\n                    this.convex = [];\r\n                    for (let w = 0, lw = grid1.length - 1; w < lw; w++) {\r\n                        let grd1w = grid1[w];\r\n                        let grd2w = grid2[w];\r\n                        let grd1w1 = grid1[w + 1];\r\n                        let grd2w1 = grid2[w + 1];\r\n                        for (let z = 0, lz = grid1[0].length - 1; z < lz; z++) {\r\n                            let grd1wz = grd1w[z];\r\n                            let grd2wz = grd2w[z];\r\n                            let grd1wz1 = grd1w[z + 1];\r\n                            let grd2wz1 = grd2w[z + 1];\r\n                            let grd1w1z = grd1w1[z];\r\n                            let grd2w1z = grd2w1[z];\r\n                            let grd1w1z1 = grd1w1[z + 1];\r\n                            let grd2w1z1 = grd2w1[z + 1];\r\n                            for (let x = 0, lx = grid1[0][0].length - 1; x < lx; x++) {\r\n                                let c = [\r\n                                    grd1wz[x],\r\n                                    grd1wz[x + 1],\r\n                                    grd1wz1[x],\r\n                                    grd1wz1[x + 1],\r\n                                    grd1w1z[x],\r\n                                    grd1w1z[x + 1],\r\n                                    grd1w1z1[x],\r\n                                    grd1w1z1[x + 1],\r\n                                    grd2wz[x],\r\n                                    grd2wz[x + 1],\r\n                                    grd2wz1[x],\r\n                                    grd2wz1[x + 1],\r\n                                    grd2w1z[x],\r\n                                    grd2w1z[x + 1],\r\n                                    grd2w1z1[x],\r\n                                    grd2w1z1[x + 1],\r\n                                ];\r\n                                let sum = new Vec4();\r\n                                c.reduceRight((a,b)=>{return sum.addset(a, b)}).divfs(16);\r\n                                this.convex.push(new Convex(c.map(c=>c.sub(sum))));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                initializeMassInertia(rigid: Rigid) {\r\n                    if (rigid.mass) console.warn(\"HeightField doesnt support a finitive mass.\");\r\n                    rigid.mass = undefined;\r\n                    rigid.invMass = 0;\r\n                    rigid.inertia = undefined;\r\n                    rigid.invInertia = undefined;\r\n                }\r\n            }\r\n        }","import { math } from \"../tesserxel\";\r\nimport { World } from \"./engine\";\r\nimport { Rigid, rigid } from \"./rigid\";\r\n\r\nexport interface BroadPhaseConstructor {\r\n    new(): BroadPhase;\r\n};\r\nexport type BroadPhaseList = [Rigid, Rigid][];\r\nexport abstract class BroadPhase {\r\n    checkList: BroadPhaseList = [];\r\n    protected clearCheckList() {\r\n        this.checkList = [];\r\n    }\r\n    abstract run(world: World): void;\r\n}\r\nexport class BoundingGlomeBroadPhase extends BroadPhase {\r\n    checkBoundingGlome(ri: Rigid, rj: Rigid) {\r\n        let gi = ri.geometry instanceof rigid.Glome;\r\n        let gj = rj.geometry instanceof rigid.Glome;\r\n        let pi = ri.geometry instanceof rigid.Plane;\r\n        let pj = rj.geometry instanceof rigid.Plane;\r\n        let directDetect = (gi || pi) && (gj || pj);\r\n        let radi = ri.geometry.boundingGlome;\r\n        let radj = rj.geometry.boundingGlome;\r\n        if (!directDetect && radi && radj) {\r\n            let r = radi + radj;\r\n            if (ri.position.distanceSqrTo(rj.position) > r * r) {\r\n                return false;\r\n            }\r\n        } else if (pi && radj) {\r\n            let d = radj - (rj.position.dot((ri.geometry as rigid.Plane).normal) - (ri.geometry as rigid.Plane).offset)\r\n            if (d < 0) return false;\r\n        } else if (pj && radi) {\r\n            let d = radi - (ri.position.dot((rj.geometry as rigid.Plane).normal) - (rj.geometry as rigid.Plane).offset)\r\n            if (d < 0) return false;\r\n        }\r\n        return true;\r\n    }\r\n    run(world: World) {\r\n        this.clearCheckList();\r\n        for (let i = 0; i < world.rigids.length; i++) {\r\n            for (let j = i + 1; j < world.rigids.length; j++) {\r\n                let ri = world.rigids[i], rj = world.rigids[j];\r\n                if (!ri.mass && !rj.mass) continue;\r\n                if (!this.checkBoundingGlome(ri, rj)) continue;\r\n                let iU = ri.geometry instanceof rigid.Union;\r\n                let jU = rj.geometry instanceof rigid.Union;\r\n                if (!iU && !jU) {\r\n                    this.checkList.push([ri, rj]);\r\n                } else if (iU && !jU) {\r\n                    for (let r of (ri.geometry as rigid.Union).components) {\r\n\r\n                        if (!this.checkBoundingGlome(r, rj)) continue;\r\n                        this.checkList.push([r, rj]);\r\n                    }\r\n                } else if (!iU && jU) {\r\n                    for (let r of (rj.geometry as rigid.Union).components) {\r\n                        if (!this.checkBoundingGlome(r, ri)) continue;\r\n                        this.checkList.push([r, ri]);\r\n                    }\r\n                } else {\r\n                    for (let r1 of (ri.geometry as rigid.Union).components) {\r\n                        for (let r2 of (rj.geometry as rigid.Union).components) {\r\n                            if (!this.checkBoundingGlome(r1, r2)) continue;\r\n                            this.checkList.push([r1, r2]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\ntype BoundingGlomeTreeNode = {\r\n    position: math.Vec4;\r\n    radius: number;\r\n    surcell: number;\r\n    child1: BoundingGlomeTreeNode | Rigid;\r\n    child2?: BoundingGlomeTreeNode | Rigid;\r\n    parent?: BoundingGlomeTreeNode;\r\n    rigidIndex?: number;\r\n};\r\nexport class BoundingGlomeTreeBroadPhase extends BroadPhase {\r\n    tree: BoundingGlomeTreeNode;\r\n    exclude: Rigid[];\r\n    include: Rigid[];\r\n    buildTree(world: World) {\r\n        this.tree = undefined;\r\n        this.exclude = [];\r\n        this.include = [];\r\n        let rigidIndex = -1;\r\n        for (let i = 0; i < world.rigids.length; i++) {\r\n            let ri = world.rigids[i];\r\n            if (ri.geometry instanceof rigid.Plane) {\r\n                this.exclude.push(ri);\r\n            } else {\r\n                this.include.push(ri);\r\n                rigidIndex++;\r\n                let riRadius = ri.geometry.boundingGlome;\r\n                let newRigidNode: BoundingGlomeTreeNode = {\r\n                    radius: riRadius, position: ri.position.clone(),\r\n                    surcell: riRadius * riRadius,\r\n                    child1: ri, rigidIndex\r\n                };\r\n                if (!this.tree) {\r\n                    // create initial tree: node->rigid[0]\r\n                    this.tree = newRigidNode;\r\n                } else {\r\n                    let node = this.tree;\r\n                    let nodeNeedUpdate = true;\r\n                    let done = false;\r\n                    while (!done) {\r\n                        if (node.child1 instanceof Rigid) {\r\n                            // insert a new leaf node for rigid\r\n                            let radius = node.child1.geometry.boundingGlome;\r\n                            let surcell = nodeNeedUpdate ? node.surcell : radius * radius;\r\n                            let wrapNode: BoundingGlomeTreeNode = {\r\n                                radius, position: node.child1.position.clone(), surcell,\r\n                                child1: node.child1, parent: node, rigidIndex: node.rigidIndex\r\n                            };\r\n                            node.child1 = wrapNode;\r\n                            node.child2 = newRigidNode;\r\n                            newRigidNode.parent = node;\r\n                            node.rigidIndex = undefined;\r\n                            done = true;\r\n                        }\r\n                        if (nodeNeedUpdate) {\r\n                            // update node's bounding glome\r\n                            let distance = node.position.distanceTo(newRigidNode.position);\r\n                            let newRadius = (distance + riRadius + node.radius) * 0.5;\r\n                            if (newRadius <= Math.min(riRadius, node.radius)) {\r\n                                if (newRadius <= riRadius) {\r\n                                    node.position.copy(ri.position);\r\n                                    node.radius = riRadius;\r\n                                    node.surcell = newRigidNode.surcell;\r\n                                }\r\n                            } else {\r\n                                node.position.subs(ri.position).mulfs((newRadius - riRadius) / distance).adds(ri.position);\r\n                                node.radius = newRadius;\r\n                                node.surcell = node.radius * node.radius;\r\n                            }\r\n                        }\r\n                        if (!done && node.child2) {\r\n                            let distance1 = ri.position.distanceTo(node.child1.position);\r\n                            let d1 = distance1 + riRadius + node.child1.radius;\r\n                            let surcell1 = d1 * d1 * 0.25;\r\n                            let distance2 = ri.position.distanceTo(node.child2.position);\r\n                            let d2 = distance2 + riRadius + (node.child2 as BoundingGlomeTreeNode).radius;\r\n                            let surcell2 = d2 * d2 * 0.25;\r\n                            let surcell = Math.min(surcell1, surcell2);\r\n                            let radius: number, distance: number;\r\n                            if (surcell1 - node.child1.surcell < surcell2 - (node.child2 as BoundingGlomeTreeNode).surcell) {\r\n                                node = node.child1;\r\n                                radius = d1 * 0.5;\r\n                                distance = distance1;\r\n                            } else {\r\n                                node = node.child2 as BoundingGlomeTreeNode;\r\n                                radius = d2 * 0.5;\r\n                                distance = distance2;\r\n                            }\r\n                            node.position.subs(ri.position).mulfs((radius - riRadius) / distance).adds(ri.position);\r\n                            node.radius = radius;\r\n                            node.surcell = surcell;\r\n                            nodeNeedUpdate = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    run(world: World) { // todo: union\r\n        this.clearCheckList();\r\n        this.buildTree(world);\r\n        for (let includeIdx = 0; includeIdx < this.include.length; includeIdx++) {\r\n            const stack = [this.tree];\r\n            const i = this.include[includeIdx];\r\n            while (stack.length) {\r\n                const node = stack.pop();\r\n                if (node.child1 instanceof Rigid) {\r\n                    if (node.rigidIndex <= includeIdx) {\r\n                        continue;\r\n                    }\r\n                }\r\n                let r = i.geometry.boundingGlome + node.radius;\r\n                if (i.position.distanceSqrTo(node.position) < r * r) {\r\n                    if (node.child2) {\r\n                        stack.push(node.child1 as BoundingGlomeTreeNode, node.child2 as BoundingGlomeTreeNode);\r\n                    } else {\r\n                        this.checkList.push([i, node.child1 as Rigid]);\r\n                    }\r\n                }\r\n            }\r\n            for (let e of this.exclude) {\r\n                this.checkList.push([i, e]);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\nexport class NaiveBroadPhase extends BroadPhase {\r\n    run(world: World) {\r\n        this.clearCheckList();\r\n        for (let i = 0; i < world.rigids.length; i++) {\r\n            for (let j = i + 1; j < world.rigids.length; j++) {\r\n                let ri = world.rigids[i], rj = world.rigids[j];\r\n                if (!ri.mass && !rj.mass) continue;\r\n                let iU = ri.geometry instanceof rigid.Union;\r\n                let jU = rj.geometry instanceof rigid.Union;\r\n                if (!iU && !jU) {\r\n                    this.checkList.push([ri, rj]);\r\n                } else if (iU && !jU) {\r\n                    for (let r of (ri.geometry as rigid.Union).components) {\r\n                        this.checkList.push([r, rj]);\r\n                    }\r\n                } else if (!iU && jU) {\r\n                    for (let r of (rj.geometry as rigid.Union).components) {\r\n                        this.checkList.push([r, ri]);\r\n                    }\r\n                } else {\r\n                    for (let r1 of (ri.geometry as rigid.Union).components) {\r\n                        for (let r2 of (rj.geometry as rigid.Union).components) {\r\n                            this.checkList.push([r1, r2]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class IgnoreAllBroadPhase extends BroadPhase {\r\n    run(world: World) {\r\n        this.clearCheckList();\r\n    }\r\n}","export class Matrix {\r\n    elem: Float32Array;\r\n    row: number;\r\n    col: number;\r\n    length: number;\r\n    constructor(r: number, c?: number) {\r\n        c = c ?? r;\r\n        this.row = r; this.col = c;\r\n        this.length = r * c;\r\n        this.elem = new Float32Array(this.length);\r\n    }\r\n    static id(r: number) {\r\n        let m = new Matrix(r);\r\n        let rplus1 = r + 1;\r\n        for (let i = 0, l = m.length; i < l; i += rplus1) {\r\n            m.elem[i] = 1.0;\r\n        }\r\n        return m;\r\n    }\r\n    set(...args: number[]) {\r\n        this.elem.set(args); return this;\r\n    }\r\n    copy(src: Matrix) {\r\n        this.elem.set(src.elem); return this;\r\n    }\r\n    // setsubmat( // todo\r\n    //     src: Matrix, srcRow: number, srcCol: number, srcRowCount: number, srcColCount: number,\r\n    //     dstRow: number, dstCol: number\r\n    // ) {\r\n    //     this.elem.set(m.elem); return this;\r\n    // }\r\n    clone(m: Matrix) {\r\n        return new Matrix(this.row, this.col).copy(this);\r\n    }\r\n\r\n    adds(m: Matrix) {\r\n        for (let i = 0, l = m.length; i < l; i++) {\r\n            this.elem[i] += m.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    subs(m: Matrix) {\r\n        for (let i = 0, l = m.length; i < l; i++) {\r\n            this.elem[i] -= m.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    mulfs(k: number) {\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    divfs(k: number) {\r\n        k = 1 / k;\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    at(r: number, c: number) {\r\n        return this.elem[r + this.row * c];\r\n    }\r\n    setAt(value: number, r: number, c: number) {\r\n        this.elem[r + this.row * c] = value; return this;\r\n    }\r\n    static subMatrix(startRow: number, startCol: number, rowCount: number, colCout: number) {\r\n        let m = new Matrix(rowCount, colCout);\r\n    }\r\n}","import { Bivec, bivecPool } from \"../math/algebra/bivec\";\r\nimport { Mat4, mat4Pool } from \"../math/algebra/mat4\";\r\nimport { Matrix } from \"../math/algebra/matrix\";\r\nimport { Rotor } from \"../math/algebra/rotor\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4\";\r\nimport { mulBivec, World } from \"./engine\";\r\nimport { Rigid } from \"./rigid\";\r\n\r\nexport interface ForceAccumulatorConstructor {\r\n    new(): ForceAccumulator;\r\n};\r\nexport abstract class ForceAccumulator {\r\n    abstract run(world: World, dt: number): void;\r\n    private _biv1 = new Bivec;\r\n    private _biv2 = new Bivec;\r\n    private readonly _bivec0 = new Bivec;\r\n    getState(world: World) {\r\n        // clear\r\n        for (let o of world.rigids) {\r\n            if (!o.invMass) continue;\r\n            o.force.set();\r\n            o.torque.set();\r\n        }\r\n        // apply force\r\n        for (let f of world.forces) {\r\n            f.apply(world.time);\r\n        }\r\n        for (let o of world.rigids) {\r\n            if (!o.invMass) continue;\r\n            o.acceleration.copy(world.gravity);\r\n            if (o.force.norm1() > 0) {\r\n                o.acceleration.addmulfs(o.force, o.invMass);\r\n            }\r\n            if (o.inertiaIsotroy) {\r\n                if (o.torque.norm1() > 0) o.angularAcceleration.set().addmulfs(o.torque, o.invInertia!.xy);\r\n            } else {\r\n                // Euler equation of motion\r\n                let localT = (o.torque.norm1() > 0) ? this._biv2.rotateset(o.torque, o.rotation) : this._bivec0;\r\n                let localW = this._biv1.rotateset(o.angularVelocity, o.rotation);\r\n                let localL = mulBivec(o.angularAcceleration, localW, o.inertia!);\r\n                mulBivec(o.angularAcceleration, localL.crossrs(localW).adds(localT), o.invInertia!);\r\n                o.angularAcceleration.rotatesconj(o.rotation);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport namespace force_accumulator {\r\n    export class Euler2 extends ForceAccumulator {\r\n        private _bivec = new Bivec;\r\n        private _rotor = new Rotor;\r\n        run(world: World, dt: number) {\r\n            for (let o of world.rigids) {\r\n                if (!o.invMass) continue;\r\n                o.rotation.norms();\r\n            }\r\n            this.getState(world);\r\n            world.time += dt;\r\n            let dtsqrhalf = dt * dt / 2;\r\n            for (let o of world.rigids) {\r\n                if (o.sleep || !o.position) continue;\r\n                // x1 = x0 + v0 t + a0 t^2/2\r\n                // v1 = v0 + a0 t/2\r\n                o.position.addmulfs(o.velocity, dt).addmulfs(o.acceleration, dtsqrhalf);\r\n                o.velocity.addmulfs(o.acceleration, dt);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(this._rotor.expset(\r\n                    this._bivec.copy(o.angularVelocity).mulfs(dt).addmulfs(o.angularAcceleration, dtsqrhalf)\r\n                ));\r\n                o.angularVelocity.addmulfs(o.angularAcceleration, dt);\r\n            }\r\n        }\r\n    }\r\n    export class Predict3 extends ForceAccumulator {\r\n        private _bivec1 = new Bivec;\r\n        private _bivec2 = new Bivec;\r\n        private _rotor = new Rotor;\r\n        private _vec = new Vec4;\r\n        run(world: World, dt: number) {\r\n            for (let o of world.rigids) {\r\n                if (!o.invMass) continue;\r\n                o.rotation.norms();\r\n            }\r\n            let prevStates = world.rigids.map(obj => ({\r\n                acceleration: obj.acceleration.clone(),\r\n                angularAcceleration: obj.angularAcceleration.clone(),\r\n            }));\r\n            this.getState(world);\r\n            world.time += dt;\r\n            let dthalf = dt * 0.5;\r\n            let dtsqrdiv6 = dt * dthalf / 3;\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                let prevO = prevStates[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                // if we know a1, then:\r\n                // x1 = x0 + v0 t + (2/3 a0 + 1/3 a1) t^2/2\r\n                // v1 = v0 + (a0 + a1) t/2\r\n                // predict a1 = 2a0 - a{-1}, got:\r\n                // x1 = x0 + v0 t + (4/3 a0 - 1/3 a{-1}) t^2/2\r\n                // v1 = v0 + (3/2 a0 - 1/2 a{-1}) t\r\n                o.position.addmulfs(o.velocity, dt).addmulfs(\r\n                    this._vec.copy(prevO.acceleration).addmulfs(o.acceleration, -4), -dtsqrdiv6\r\n                );\r\n                o.velocity.addmulfs(prevO.acceleration.addmulfs(o.acceleration, -3), -dthalf);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(this._rotor.expset(\r\n                    this._bivec1.copy(o.angularVelocity).mulfs(dt).addmulfs(\r\n                        this._bivec2.copy(prevO.angularAcceleration).addmulfs(o.angularAcceleration, -4), -dtsqrdiv6\r\n                    )\r\n                ));\r\n                o.angularVelocity.addmulfs(prevO.angularAcceleration.addmulfs(o.angularAcceleration, -3), -dthalf);\r\n            }\r\n        }\r\n    }\r\n    interface State {\r\n        position: Vec4;\r\n        rotation: Rotor;\r\n        velocity: Vec4;\r\n        angularVelocity: Bivec;\r\n        acceleration: Vec4;\r\n        angularAcceleration: Bivec;\r\n    }\r\n    export class RK4 extends ForceAccumulator {\r\n        private _bivec1 = new Bivec;\r\n        private _rotor = new Rotor;\r\n        run(world: World, dt: number) {\r\n            for (let o of world.rigids) {\r\n                if (!o.invMass) continue;\r\n                o.rotation.norms();\r\n            }\r\n            let dthalf = dt * 0.5;\r\n            let dtdiv6 = dt / 6;\r\n            let self = this;\r\n            function storeState(states: State[][]) {\r\n                self.getState(world);\r\n                states.push(world.rigids.map(obj => ({\r\n                    position: obj.position?.clone(),\r\n                    rotation: obj.rotation?.clone(),\r\n                    velocity: obj.velocity.clone(),\r\n                    angularVelocity: obj.angularVelocity.clone(),\r\n                    acceleration: obj.acceleration.clone(),\r\n                    angularAcceleration: obj.angularAcceleration.clone(),\r\n                })));\r\n            }\r\n            function loadState(states: State[][], index: number) {\r\n                let state = states[index];\r\n                for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                    let o = world.rigids[idx];\r\n                    let s = state[idx];\r\n                    o.position?.copy(s?.position);\r\n                    o.rotation?.copy(s?.rotation);\r\n                    o.velocity.copy(s.velocity);\r\n                    o.angularVelocity.copy(s.angularVelocity);\r\n                    o.acceleration.copy(s.acceleration);\r\n                    o.angularAcceleration.copy(s.angularAcceleration);\r\n                }\r\n            }\r\n            let states: State[][] = [];\r\n            storeState(states); // 0: k1 = f(yn, tn)\r\n            for (let o of world.rigids) {\r\n                if (o.sleep || !o.position) continue;\r\n                o.position.addmulfs(o.velocity, dthalf);\r\n                o.velocity.addmulfs(o.acceleration, dthalf);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(\r\n                    this._rotor.expset(this._bivec1.copy(o.angularVelocity).mulfs(dthalf))\r\n                );\r\n                o.angularVelocity.addmulfs(o.angularAcceleration, dthalf);\r\n            }\r\n            world.time += dthalf;\r\n            storeState(states); // 1: k2 = f(yn + h/2 k1, tn + h/2)\r\n            loadState(states, 0);\r\n            let state = states[1];\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                let s = state[idx];\r\n                o.position.addmulfs(s.velocity, dthalf);\r\n                o.velocity.addmulfs(s.acceleration, dthalf);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(\r\n                    this._rotor.expset(this._bivec1.copy(s.angularVelocity).mulfs(dthalf))\r\n                );\r\n                o.angularVelocity.addmulfs(s.angularAcceleration, dthalf);\r\n            }\r\n            storeState(states); // 2: k3 = f(yn + h/2 k2, tn + h/2)\r\n            loadState(states, 0);\r\n            state = states[2];\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                let s = state[idx];\r\n                o.position.addmulfs(s.velocity, dt);\r\n                o.velocity.addmulfs(s.acceleration, dt);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(\r\n                    this._rotor.expset(this._bivec1.copy(s.angularVelocity).mulfs(dt))\r\n                );\r\n                o.angularVelocity.addmulfs(s.angularAcceleration, dt);\r\n            }\r\n            world.time += dthalf;\r\n            storeState(states); // 3: k4 = f(yn + h k3, tn + h)\r\n            loadState(states, 0);\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                let k1 = states[0][idx];\r\n                let k2 = states[1][idx];\r\n                let k3 = states[2][idx];\r\n                let k4 = states[3][idx];\r\n                o.position.addmulfs(\r\n                    k1.velocity.adds(k4.velocity).addmulfs(\r\n                        k2.velocity.adds(k3.velocity), 2\r\n                    ), dtdiv6\r\n                );\r\n                o.velocity.addmulfs(\r\n                    k1.acceleration.adds(k4.acceleration).addmulfs(\r\n                        k2.acceleration.adds(k3.acceleration), 2\r\n                    ), dtdiv6\r\n                );\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(this._rotor.expset(\r\n                    k1.angularVelocity.adds(k4.angularVelocity).addmulfs(\r\n                        k2.angularVelocity.adds(k3.angularVelocity), 2\r\n                    ).mulfs(dtdiv6)\r\n                ));\r\n                o.angularVelocity.addmulfs(\r\n                    k1.angularAcceleration.adds(k4.angularAcceleration).addmulfs(\r\n                        k2.angularAcceleration.adds(k3.angularAcceleration), 2\r\n                    ), dtdiv6\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\nexport abstract class Force {\r\n    abstract apply(time: number): void;\r\n}\r\n// export namespace force {\r\n/** apply a spring force between object a and b\r\n *  pointA and pointB are in local coordinates,\r\n *  refering connect point of spring's two ends.\r\n *  b can be null for attaching spring to a fixed point in the world.\r\n *  f = k dx - damp * dv */\r\nexport class Spring extends Force {\r\n    a: Rigid;\r\n    pointA: Vec4;\r\n    b: Rigid | null;\r\n    pointB: Vec4;\r\n    k: number;\r\n    damp: number;\r\n    length: number;\r\n    private _vec4f = new Vec4();\r\n    private _vec4a = new Vec4();\r\n    private _vec4b = new Vec4();\r\n    private _bivec = new Bivec();\r\n    constructor(\r\n        a: Rigid, b: Rigid | null,\r\n        pointA: Vec4, pointB: Vec4,\r\n        k: number, length: number = 0, damp: number = 0) {\r\n        super();\r\n        this.a = a; this.b = b; this.k = k; this.damp = damp;\r\n        this.pointA = pointA; this.pointB = pointB;\r\n        this.length = length;\r\n    }\r\n    apply(time: number) {\r\n        const pa = this.a.position;\r\n        const pb = this.b?.position;\r\n        this._vec4a.copy(this.pointA).rotates(this.a.rotation).adds(pa);\r\n        this._vec4b.copy(this.pointB);\r\n        if (this.b) this._vec4b.rotates(this.b.rotation).adds(pb!);\r\n        let k = this.k;\r\n        this._vec4f.subset(this._vec4b, this._vec4a);\r\n        if (this.length > 0) {\r\n            let len = this._vec4f.norm();\r\n            k *= (len - this.length) / len;\r\n        }\r\n        //_vec4 is force from a to b\r\n        this._vec4f.mulfs(k);\r\n        // add force\r\n        this.a.force.adds(this._vec4f);\r\n        if (this.b) this.b.force.subs(this._vec4f);\r\n        // add torque\r\n        this.a.torque.adds(this._bivec.wedgevvset(this._vec4f, this._vec4a.subs(pa)));\r\n        if (this.b) this.b.torque.subs(this._bivec.wedgevvset(this._vec4f, this._vec4b.subs(pb!)));\r\n    }\r\n}\r\nexport class Damping extends Force {\r\n    objects: Rigid[] = [];\r\n    linearFactor: number;\r\n    // assume angular damp matrix(6x6) has the same eigen vector with inertia matrix\r\n    // this is diagonalized angular damp matrix\r\n    angularFactor: Bivec;\r\n    // todo isotopy simplification\r\n\r\n    private _bivec = new Bivec();\r\n    apply(time: number) {\r\n        for (let o of this.objects) {\r\n            o.force.addmulfs(o.velocity, -this.linearFactor);\r\n            o.torque.subs(mulBivec(this._bivec,\r\n                this._bivec.copy(o.angularVelocity).rotatesconj(o.rotation), this.angularFactor\r\n            ).rotates(o.rotation));\r\n        }\r\n    }\r\n    constructor(linearFactor: number, angularFactor: number | Bivec) {\r\n        super();\r\n        this.linearFactor = linearFactor;\r\n        this.angularFactor = angularFactor instanceof Bivec ? angularFactor : new Bivec(\r\n            angularFactor, angularFactor, angularFactor, angularFactor, angularFactor, angularFactor\r\n        );\r\n    }\r\n    add(...objects: Rigid[]) {\r\n        for (let o of objects) {\r\n            this.objects.push(o);\r\n        }\r\n    }\r\n}\r\nexport type ElectricCharge = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, charge: number };\r\nexport type ElectricDipole = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, moment: Vec4, worldMoment?: Vec4 };\r\nexport type MagneticDipole = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, moment: Bivec, worldMoment?: Bivec };\r\nexport type CurrentElement = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, current: Vec4 };\r\nexport type CurrentCircuit = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, current: Vec4, radius: number };\r\nexport class MaxWell extends Force {\r\n    electricCharge: ElectricCharge[] = [];\r\n    electricDipole: ElectricDipole[] = [];\r\n    magneticDipole: MagneticDipole[] = [];\r\n    currentElement: CurrentElement[] = [];\r\n    currentCircuit: CurrentCircuit[] = [];\r\n    permittivity = 8.854187817e-12;\r\n    permeability = Math.PI * 4e-7;\r\n    constantElectricField = new Vec4;\r\n    /** magnetic field direction is defined by positive charge's velocity wedge it's lorentz force */\r\n    constantMagneticField = new Bivec;\r\n    private _vecE = new Vec4;\r\n    private _vecdE = new Mat4().set();\r\n    private _vecB = new Bivec;\r\n    private _vecdB = new Matrix(4, 6);\r\n    private _vecP = new Vec4;\r\n    addElectricCharge(s: ElectricCharge) {\r\n        this.electricCharge.push(s);\r\n    }\r\n    addElectricDipole(s: ElectricDipole) {\r\n        this.electricDipole.push(s);\r\n    }\r\n    addMagneticDipole(s: MagneticDipole) {\r\n        this.magneticDipole.push(s);\r\n    }\r\n    getEAt(p: Vec4, dE: boolean, ignore: Rigid | Vec4 | undefined) {\r\n        let electricField = this._vecE.copy(this.constantElectricField);\r\n        this._vecdE.set();\r\n        for (let s of this.electricCharge) {\r\n            if (ignore === s.position || ignore === s?.rigid) continue;\r\n            this.addEOfElectricCharge(electricField, dE ? this._vecdE : undefined, p, s);\r\n        }\r\n        for (let s of this.electricDipole) {\r\n            if (ignore === s.position || ignore === s?.rigid) continue;\r\n            this.addEOfElectricDipole(electricField, dE ? this._vecdE : undefined, p, s);\r\n        }\r\n        return this._vecE;\r\n    }\r\n    getBAt(p: Vec4, dB: boolean, ignore: Rigid | Vec4 | undefined) {\r\n        let magneticField = this._vecB.copy(this.constantMagneticField);\r\n        this._vecdB.elem.fill(0);\r\n        for (let s of this.magneticDipole) {\r\n            if (ignore === s.position || ignore === s?.rigid) continue;\r\n            this.addBOfMagneticDipole(magneticField, dB ? this._vecdB : undefined, p, s);\r\n        }\r\n        return magneticField;\r\n    }\r\n    apply(time: number): void {\r\n        for (let q of this.electricCharge) {\r\n            q.worldPos ??= new Vec4;\r\n            if (q.rigid)\r\n                q.worldPos.copy(q.position).rotates(q.rigid.rotation).adds(q.rigid.position);\r\n            else\r\n                q.worldPos.copy(q.position);\r\n        }\r\n        for (let q of this.electricDipole) {\r\n            q.worldPos ??= new Vec4;\r\n            q.worldMoment ??= new Vec4;\r\n            if (q.rigid) {\r\n                q.worldPos.copy(q.position).rotates(q.rigid.rotation).adds(q.rigid.position);\r\n                q.worldMoment.copy(q.moment).rotates(q.rigid.rotation);\r\n            } else {\r\n                q.worldMoment.copy(q.moment);\r\n            }\r\n        }\r\n        for (let q of this.magneticDipole) {\r\n            q.worldPos ??= new Vec4;\r\n            q.worldMoment ??= new Bivec;\r\n            if (q.rigid) {\r\n                q.worldPos.copy(q.position).rotates(q.rigid.rotation).adds(q.rigid.position);\r\n                q.worldMoment.copy(q.moment).rotates(q.rigid.rotation);\r\n            } else {\r\n                q.worldMoment.copy(q.moment);\r\n            }\r\n        }\r\n        // outter loop: test point, inner loop: source point\r\n\r\n        let force = this._vecP;\r\n        for (let q of this.electricCharge) {\r\n            if (!q.rigid || !q.rigid.mass) continue;\r\n            this.getEAt(q.worldPos!, false, q.rigid ?? q.position);\r\n            this.getBAt(q.worldPos!, false, undefined);\r\n            let zeroB = (this._vecB.norm1() === 0);\r\n            let zeroTorque = q.position.norm1() === 0;\r\n            if (zeroB && zeroTorque) {\r\n                q.rigid.force.addmulfs(this._vecE, q.charge);\r\n                continue;\r\n            }\r\n            if (!zeroB) {\r\n                if (zeroTorque) {\r\n                    force.copy(q.rigid.velocity);\r\n                } else {\r\n                    q.rigid.getlinearVelocity(force, q.worldPos!);\r\n                }\r\n                // F = q(E+B.v)\r\n                force.dotbsr(this._vecB).adds(this._vecE).mulfs(q.charge);\r\n            } else {\r\n                force.copy(this._vecE).mulfs(q.charge);\r\n            }\r\n            q.rigid.force.adds(force);\r\n            q.rigid.torque.adds(this._vecB.wedgevvset(\r\n                this._vecE.subset(q.worldPos!, q.rigid.position), force\r\n            ));\r\n        }\r\n        let v4 = force;\r\n        let biv = bivecPool.pop();\r\n        for (let q of this.electricDipole) {\r\n            if (!q.rigid || !q.rigid.mass) continue;\r\n            this.getEAt(q.worldPos!, true, q.rigid ?? q.position);\r\n            let zeroTorque = q.position.norm1() === 0;\r\n            v4.mulmatvset(this._vecdE, q.worldMoment!);\r\n            biv.wedgevvset(this._vecE, q.worldMoment!);\r\n            q.rigid.torque.adds(biv);\r\n            q.rigid.force.adds(v4);\r\n            if (zeroTorque) continue;\r\n            q.rigid.torque.adds(this._vecB.wedgevvset(\r\n                this._vecE.subset(q.worldPos!, q.rigid.position), v4\r\n            ));\r\n        }\r\n\r\n        for (let q of this.magneticDipole) {\r\n            if (!q.rigid || !q.rigid.mass) continue;\r\n            this.getBAt(q.worldPos!, true, q.rigid ?? q.position);\r\n            let zeroTorque = q.position.norm1() === 0;\r\n\r\n            let db = this._vecdB.elem;\r\n            v4.dotbset(Vec4.x, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[0], db[4], db[8], db[12], db[16], db[20]));\r\n            q.rigid.force.adds(v4);\r\n            v4.dotbset(Vec4.y, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[1], db[5], db[9], db[13], db[17], db[21]));\r\n            q.rigid.force.adds(v4);\r\n            v4.dotbset(Vec4.z, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[2], db[6], db[10], db[14], db[18], db[22]));\r\n            q.rigid.force.adds(v4);\r\n            v4.dotbset(Vec4.w, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[3], db[7], db[11], db[15], db[19], db[23]));\r\n            q.rigid.force.adds(v4);\r\n\r\n            biv.crossset(q.worldMoment!, this._vecB);\r\n            q.rigid.torque.adds(biv);\r\n            if (zeroTorque) continue;\r\n            q.rigid.torque.adds(this._vecB.wedgevvset(\r\n                this._vecE.subset(q.worldPos!, q.rigid.position), v4\r\n            ));\r\n        }\r\n        biv.pushPool();\r\n    }\r\n    private addEOfElectricCharge(vecE: Vec4, dE: Mat4 | undefined, p: Vec4, s: ElectricCharge) {\r\n\r\n        let r = vec4Pool.pop().subset(p, s.worldPos!);\r\n        let r2 = 1 / r.normsqr();\r\n        let qr4 = s.charge * r2 * r2;\r\n        vecE.addmulfs(r, qr4);\r\n        if (!dE) { r.pushPool(); return; }\r\n        let qr6_neg4 = -4 * qr4 * r2;\r\n        let qrr = r.mulfs(qr6_neg4);\r\n        let xy = qrr.x * r.y, xz = qrr.x * r.z, xt = qrr.x * r.w, yz = qrr.y * r.z, yt = qrr.y * r.w, zt = qrr.z * r.w;\r\n        let mat = mat4Pool.pop();\r\n        dE.adds(mat.set(\r\n            qr4 + qrr.x * r.x, xy, xz, xt,\r\n            xy, qr4 + qrr.y * r.y, yz, yt,\r\n            xz, yz, qr4 + qrr.z * r.z, zt,\r\n            xt, yt, zt, qr4 + qrr.w * r.w\r\n        ));\r\n        mat.pushPool();\r\n        r.pushPool();\r\n    }\r\n    private addBOfMagneticDipole(vecB: Bivec, dB: Matrix | undefined, pos: Vec4, s: MagneticDipole) {\r\n        let k = vec4Pool.pop().subset(pos, s.worldPos!);\r\n        let q = s.worldMoment!.dual();\r\n        let x = k.x, y = k.y, z = k.z, w = k.w;\r\n        let xx = x * x, yy = y * y, zz = z * z, ww = w * w;\r\n        let kxy = q.xy, kxz = q.xz, kxw = q.xw, kyz = q.yz, kyw = q.yw, kzw = q.zw;\r\n        let kyx = -q.xy, kzx = -q.xz, kwx = -q.xw, kzy = -q.yz, kwy = -q.yw, kwz = -q.zw;\r\n        let r2 = xx + yy + zz + ww;\r\n        let kxy2 = kzw * (-xx - yy + zz + ww);\r\n        let kxz2 = kyw * (-xx + yy - zz + ww);\r\n        let kxw2 = kyz * (-xx + yy + zz - ww);\r\n        let kyz2 = kxw * (xx - yy - zz + ww);\r\n        let kyw2 = kxz * (xx - yy + zz - ww);\r\n        let kzw2 = kxy * (xx + yy - zz - ww);\r\n\r\n        let rr = 1 / r2;\r\n        let rr2 = rr * rr;\r\n        let rr34 = 4 * rr2 * rr;\r\n        let rr4 = rr34 * rr;\r\n        let xy = x * y,\r\n            xz = x * z,\r\n            xw = x * w,\r\n            yz = y * z,\r\n            yw = y * w,\r\n            zw = z * w;\r\n\r\n        vecB.xy += rr34 * ((-kxz * xw - kyz * yw + kxw * xz + kyw * yz) + 0.5 * kxy2);\r\n        vecB.xz += -rr34 * ((-kxy * xw - kzy * zw + kxw * xy + kzw * yz) + 0.5 * kxz2);\r\n        vecB.xw += -rr34 * ((-kxz * xy - kwz * yw + kxy * xz + kwy * zw) - 0.5 * kxw2);\r\n        vecB.yz += rr34 * ((kxy * yw - kzx * zw + kyw * xy + kzw * xz) + 0.5 * kyz2);\r\n        vecB.yw += -rr34 * ((kxy * yz - kwx * zw + kyz * xy - kzw * xw) + 0.5 * kyw2);\r\n        vecB.zw += rr34 * ((kxz * yz - kwx * yw - kyz * xz - kyw * xw) + 0.5 * kzw2);\r\n        if (!dB) return;\r\n        let r2m6xx = r2 - 6 * xx;\r\n        let r2m6yy = r2 - 6 * yy;\r\n        let r2m6zz = r2 - 6 * zz;\r\n        let r2m6ww = r2 - 6 * ww;\r\n        x *= rr4; y *= rr4; z *= rr4; w *= rr4;\r\n        xy *= 6; xz *= 6; xw *= 6; yz *= 6; yw *= 6; zw *= 6;\r\n        let kxy_x = kxy * x, kxz_x = kxz * x, kxw_x = kxw * x, kyz_x = kyz * x, kyw_x = kyw * x, kzw_x = kzw * x;\r\n        let kxy_y = kxy * y, kxz_y = kxz * y, kxw_y = kxw * y, kyz_y = kyz * y, kyw_y = kyw * y, kzw_y = kzw * y;\r\n        let kxy_z = kxy * z, kxz_z = kxz * z, kxw_z = kxw * z, kyz_z = kyz * z, kyw_z = kyw * z, kzw_z = kzw * z;\r\n        let kxy_w = kxy * w, kxz_w = kxz * w, kxw_w = kxw * w, kyz_w = kyz * w, kyw_w = kyw * w, kzw_w = kzw * w;\r\n\r\n        dB!.adds(new Matrix(4, 6).set(\r\n            (xy * (kyz_w - kyw_z) + 2 * kzw_x * (xx + yy - 2 * (zz + ww)) + (kxw_z - kxz_w) * (r2m6xx)),\r\n            (xy * (kxz_w - kxw_z) + 2 * kzw_y * (xx + yy - 2 * (zz + ww)) + (kyw_z - kyz_w) * (r2m6yy)),\r\n            (zw * (kxz_x + kyz_y) - 2 * kzw_z * (zz + ww - 2 * (xx + yy)) + (kxw_x + kyw_y) * (r2m6zz)),\r\n            - (zw * (kxw_x + kyw_y) + 2 * kzw_w * (zz + ww - 2 * (xx + yy)) + (kxz_x + kyz_y) * (r2m6ww)),\r\n\r\n            - (xz * (-kyz_w - kzw_y) + 2 * kyw_x * (xx + zz - 2 * (yy + ww)) + (kxw_y - kxy_w) * (r2m6xx)),\r\n            - (yw * (kxy_x - kyz_z) - 2 * kyw_y * (yy + ww - 2 * (xx + zz)) + (kxw_x + kzw_z) * (r2m6yy)),\r\n            - (xz * (kxy_w - kxw_y) + 2 * kyw_z * (xx + zz - 2 * (yy + ww)) + (kzw_y + kyz_w) * (r2m6zz)),\r\n            (yw * (kxw_x + kzw_z) + 2 * kyw_w * (yy + ww - 2 * (xx + zz)) + (kxy_x - kyz_z) * (r2m6ww)),\r\n\r\n            - (xw * (-kzw_y + kyw_z) - 2 * kyz_x * (xx + ww - 2 * (zz + yy)) + (kxy_z - kxz_y) * (r2m6xx)),\r\n            (yz * (kxy_x - kyw_w) - 2 * kyz_y * (zz + yy - 2 * (xx + ww)) + (kxz_x - kzw_w) * (r2m6yy)),\r\n            -(yz * (kxz_x - kzw_w) + 2 * kyz_z * (zz + yy - 2 * (xx + ww)) + (kxy_x - kyw_w) * (r2m6zz)),\r\n            - (xw * (kxz_y - kxy_z) - 2 * kyz_w * (xx + ww - 2 * (zz + yy)) + (-kyw_z + kzw_y) * (r2m6ww)),\r\n\r\n            (xw * (-kxy_y - kxz_z) - 2 * kxw_x * (xx + ww - 2 * (yy + zz)) + (kyw_y + kzw_z) * (r2m6xx)),\r\n            (yz * (-kxz_w - kzw_x) + 2 * kxw_y * (yy + zz - 2 * (xx + ww)) + (kyw_x + kxy_w) * (r2m6yy)),\r\n            (yz * (-kxy_w - kyw_x) + 2 * kxw_z * (yy + zz - 2 * (xx + ww)) + (kzw_x + kxz_w) * (r2m6zz)),\r\n            - (xw * (kyw_y + kzw_z) + 2 * kxw_w * (xx + ww - 2 * (yy + zz)) + (-kxy_y - kxz_z) * (r2m6ww)),\r\n\r\n            - (xz * (-kxy_y - kxw_w) - 2 * kxz_x * (xx + zz - 2 * (yy + ww)) + (kyz_y - kzw_w) * (r2m6xx)),\r\n            - (yw * (-kxw_z + kzw_x) + 2 * kxz_y * (yy + ww - 2 * (xx + zz)) + (kyz_x + kxy_z) * (r2m6yy)),\r\n            (xz * (kyz_y - kzw_w) + 2 * kxz_z * (xx + zz - 2 * (yy + ww)) + (-kxy_y - kxw_w) * (r2m6zz)),\r\n            - (yw * (-kxy_z - kyz_x) + 2 * kxz_w * (yy + ww - 2 * (xx + zz)) + (-kzw_x + kxw_z) * (r2m6ww)),\r\n\r\n            (xy * (-kxz_z - kxw_w) - 2 * kxy_x * (xx + yy - 2 * (zz + ww)) + (-kyz_z - kyw_w) * (r2m6xx)),\r\n            - (xy * (-kyz_z - kyw_w) + 2 * kxy_y * (xx + yy - 2 * (zz + ww)) + (-kxz_z - kxw_w) * (r2m6yy)),\r\n            (zw * (-kxw_y + kyw_x) + 2 * kxy_z * (zz + ww - 2 * (xx + yy)) + (-kyz_x + kxz_y) * (r2m6zz)),\r\n            (zw * (-kxz_y + kyz_x) + 2 * kxy_w * (zz + ww - 2 * (xx + yy)) + (-kyw_x + kxw_y) * (r2m6ww))\r\n        ));\r\n    }\r\n    private addEOfElectricDipole(vecE: Vec4, dE: Mat4 | undefined, pos: Vec4, s: ElectricDipole) {\r\n        let r = vec4Pool.pop().subset(pos, s.worldPos!);\r\n        let p = s.worldMoment!;\r\n        // u =  r.s / (r.r)^2\r\n        let pxx = p.x * r.x, pyy = p.y * r.y, pzz = p.z * r.z, pww = p.w * r.w;\r\n        let p2 = pxx + pyy + pzz + pww;\r\n        let rxx = r.x * r.x, ryy = r.y * r.y, rzz = r.z * r.z, rww = r.w * r.w;\r\n        let r2 = rxx + ryy + rzz + rww;\r\n        let r2inv = 1 / r2;\r\n        let r4 = r2inv * r2inv;\r\n        let p2_r2_4 = 4 * p2 * r2inv;\r\n        vecE.x += r4 * (p.x - p2_r2_4 * r.x);\r\n        vecE.y += r4 * (p.y - p2_r2_4 * r.y);\r\n        vecE.z += r4 * (p.z - p2_r2_4 * r.z);\r\n        vecE.w += r4 * (p.w - p2_r2_4 * r.w);\r\n\r\n        if (!dE) return; // if no need for calc dE\r\n        let r8_neg4 = -4 * r4 * r4;\r\n        let p2_6 = p2 * 6;\r\n\r\n        let xy = r8_neg4 * ((p.x * r.y + p.y * r.x) * r2 - p2_6 * r.x * r.y),\r\n            xz = r8_neg4 * ((p.x * r.z + p.z * r.x) * r2 - p2_6 * r.x * r.z),\r\n            xw = r8_neg4 * ((p.x * r.w + p.w * r.x) * r2 - p2_6 * r.x * r.w),\r\n            yz = r8_neg4 * ((p.y * r.z + p.z * r.y) * r2 - p2_6 * r.y * r.z),\r\n            yw = r8_neg4 * ((p.y * r.w + p.w * r.y) * r2 - p2_6 * r.y * r.w),\r\n            zw = r8_neg4 * ((p.z * r.w + p.w * r.z) * r2 - p2_6 * r.z * r.w);\r\n        let mat = mat4Pool.pop();\r\n        dE.adds(mat.set(\r\n            (p2 * (r2 - 6 * rxx) + 2 * pxx * r2) * r8_neg4, xy, xz, xw,\r\n            xy, (p2 * (r2 - 6 * ryy) + 2 * pyy * r2) * r8_neg4, yz, yw,\r\n            xz, yz, (p2 * (r2 - 6 * rzz) + 2 * pzz * r2) * r8_neg4, zw,\r\n            xw, yw, zw, (p2 * (r2 - 6 * rww) + 2 * pww * r2) * r8_neg4\r\n        ).negs());\r\n        mat.pushPool();\r\n        r.pushPool();\r\n\r\n    }\r\n}","import { bivecPool } from \"../math/algebra/bivec\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4\";\r\n\r\n// Convex Collision Detection algorithms (GJK Distance + EPA)\r\n        const maxEpaStep = 16;\r\n        const maxGjkStep = 32;\r\n        type Convex = Vec4[];\r\n        function support(c: Convex, dir: Vec4) {\r\n            let support = -Infinity;\r\n            let point: Vec4;\r\n            for (let p of c) {\r\n                let value = p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point = p;\r\n                }\r\n            }\r\n            return point!;\r\n        }\r\n        function supportNeg(c: Convex, dir: Vec4) {\r\n            let support = -Infinity;\r\n            let point: Vec4;\r\n            for (let p of c) {\r\n                let value = -p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point = p;\r\n                }\r\n            }\r\n            return point!;\r\n        }\r\n        function supportDiff(c1: Convex, c2: Convex, dir: Vec4) {\r\n            if (!dir) {\r\n                console.error(\"Convex Collision Detector: Undefined support direction\");\r\n            }\r\n            let support = -Infinity;\r\n            let point1: Vec4;\r\n            let point2: Vec4;\r\n            for (let p of c1) {\r\n                let value = p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point1 = p;\r\n                }\r\n            }\r\n            support = -Infinity;\r\n            for (let p of c2) {\r\n                let value = -p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point2 = p;\r\n                }\r\n            }\r\n            return [point1!, point2!];\r\n        }\r\n        function supportDiffTest(c1: Convex, c2: Convex, dir: Vec4) {\r\n            let support1 = -Infinity;\r\n            let point1: Vec4;\r\n            let point2: Vec4;\r\n            for (let p of c1) {\r\n                let value = p.dot(dir);\r\n                if (value > support1) {\r\n                    support1 = value;\r\n                    point1 = p;\r\n                }\r\n            }\r\n            let support2 = -Infinity;\r\n            for (let p of c2) {\r\n                let value = -p.dot(dir);\r\n                if (value > support2) {\r\n                    support2 = value;\r\n                    point2 = p;\r\n                }\r\n            }\r\n            if (support1 + support2 < 0) return [];\r\n            return [point1!, point2!];\r\n        }\r\n        // /** get closest point on line segment ab */\r\n        // function closestToOrigin2(a: Vec4, b: Vec4) {\r\n        //     let adb = a.dot(b);\r\n        //     let la = b.normsqr() - adb; if (la < 0) return b;\r\n        //     let lb = a.normsqr() - adb; if (lb < 0) return a;\r\n        //     return vec4Pool.pop().set().addmulfs(a, la).addmulfs(b, lb).divfs(la + lb);\r\n        // }\r\n        // /** get line ab's normal pointing to origin, 20 muls */\r\n        // function normalToOrigin2(out: Vec4, a: Vec4, b: Vec4) {\r\n        //     let adb = a.dot(b);\r\n        //     let la = b.normsqr() - adb;\r\n        //     let lb = a.normsqr() - adb;\r\n        //     return out.set().addmulfs(a, -la).addmulfs(b, -lb);\r\n        // }\r\n        // /** get plane abc's normal point to origin, 36 muls */\r\n        // function normalToOrigin3(out: Vec4, a: Vec4, b: Vec4, c: Vec4) {\r\n        //     let vec = vec4Pool.pop();\r\n        //     let biv = bivecPool.pop().wedgevvset(\r\n        //         out.subset(b, a), vec.subset(c, a)\r\n        //     );\r\n        //     vec.pushPool();\r\n        //     out.wedgevbset(a, biv).wedgevbset(out, biv);\r\n        //     biv.pushPool();\r\n        //     return out;\r\n        // }\r\n        function getClosestPointOrNormal2(a: Vec4, b: Vec4) {\r\n            let adb = a.dot(b);\r\n            let la = b.normsqr() - adb; if (la < 0) return b;\r\n            let lb = a.normsqr() - adb; if (lb < 0) return a;\r\n            return vec4Pool.pop().set().addmulfs(a, -la).addmulfs(b, -lb);\r\n        }\r\n        function getClosestPointOrNormal3(a: Vec4, b: Vec4, c: Vec4) {\r\n            let ca = vec4Pool.pop().subset(a, c);\r\n            let cb = vec4Pool.pop().subset(b, c);\r\n            if (c.dot(ca) > 0 && c.dot(cb) > 0) {\r\n                vec4Pool.push(ca, cb);\r\n                return [c];\r\n            }\r\n            let biv = bivecPool.pop().wedgevvset(ca, cb);\r\n            if (ca.dotbset(ca, biv).dot(c) > 0) {\r\n                vec4Pool.push(ca, cb);\r\n                return [a, c];\r\n            }\r\n            // cb's sign is not consisted with ca's because of biv = ca x cb\r\n            if (cb.dotbset(cb, biv).dot(c) < 0) {\r\n                vec4Pool.push(ca, cb);\r\n                return [b, c];\r\n            }\r\n            let out = ca;\r\n            out.wedgevbset(a, biv).wedgevbset(out, biv);\r\n            biv.pushPool();\r\n            vec4Pool.push(cb);\r\n            return out;\r\n        }\r\n        function getClosestPointOrNormal4(a: Vec4, b: Vec4, c: Vec4, d: Vec4) {\r\n            let da = vec4Pool.pop().subset(a, d);\r\n            let db = vec4Pool.pop().subset(b, d);\r\n            let dc = vec4Pool.pop().subset(c, d);\r\n            // vertex\r\n            if (d.dot(da) > 0 && d.dot(db) > 0 && d.dot(dc) > 0) {\r\n                vec4Pool.push(da, db, dc);\r\n                return [d];\r\n            }\r\n            // edge\r\n            let dab = bivecPool.pop().wedgevvset(da, db);\r\n            let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n            let dca = bivecPool.pop().wedgevvset(dc, da);\r\n            let temp = vec4Pool.pop();\r\n            if (temp.dotbset(da, dab).dot(d) > 0 && temp.dotbset(da, dca).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [a, d];\r\n            }\r\n            if (temp.dotbset(db, dbc).dot(d) > 0 && temp.dotbset(db, dab).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [b, d];\r\n            }\r\n            if (temp.dotbset(dc, dca).dot(d) > 0 && temp.dotbset(dc, dbc).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [c, d];\r\n            }\r\n            // face\r\n            // dabc is normal vector\r\n            let dabc = vec4Pool.pop().wedgevbset(da, dbc);\r\n            if (temp.wedgevbset(dabc, dab).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, dabc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [a, b, d];\r\n            }\r\n            if (temp.wedgevbset(dabc, dbc).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, dabc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [b, c, d];\r\n            }\r\n            if (temp.wedgevbset(dabc, dca).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, dabc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [a, c, d];\r\n            }\r\n            // new direction is already normal dabc\r\n            // but need to point to origin:\r\n            // dabc.mulfs(-a.dot(dabc));\r\n            // we do it outside of this fn\r\n            // because we need this important orientation information\r\n            // to construct corrected ordered 5-simplex\r\n            vec4Pool.push(da, db, dc, temp);\r\n            bivecPool.push(dab, dbc, dca);\r\n            return dabc;\r\n        }\r\n        function getClosestPoint5(a: Vec4, b: Vec4, c: Vec4, d: Vec4, e: Vec4, reverseOrder: boolean) {\r\n            // about reverseOrder:\r\n            // if reverseOrder == false\r\n            // da^db^dc (dabc) is pointing to outside\r\n            // else dabc is pointing to e (inside)\r\n\r\n            let ea = vec4Pool.pop().subset(a, e);\r\n            let eb = vec4Pool.pop().subset(b, e);\r\n            let ec = vec4Pool.pop().subset(c, e);\r\n            let ed = vec4Pool.pop().subset(d, e);\r\n            // vertex\r\n            if (e.dot(ea) > 0 && e.dot(eb) > 0 && e.dot(ec) > 0 && e.dot(ed) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed);\r\n                return [e];\r\n            }\r\n            // edge\r\n            let eab = bivecPool.pop().wedgevvset(ea, eb);\r\n            let ebc = bivecPool.pop().wedgevvset(eb, ec);\r\n            let eac = bivecPool.pop().wedgevvset(ea, ec);\r\n            let ead = bivecPool.pop().wedgevvset(ea, ed);\r\n            let ebd = bivecPool.pop().wedgevvset(eb, ed);\r\n            let ecd = bivecPool.pop().wedgevvset(ec, ed);\r\n            let temp = vec4Pool.pop();\r\n            if (temp.dotbset(ea, eab).dot(e) > 0 && temp.dotbset(ea, eac).dot(e) > 0 && temp.dotbset(ea, ead).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, e];\r\n            }\r\n            if (temp.dotbset(eb, eab).dot(e) < 0 && temp.dotbset(eb, ebc).dot(e) > 0 && temp.dotbset(eb, ebd).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [b, e];\r\n            }\r\n            if (temp.dotbset(ec, eac).dot(e) < 0 && temp.dotbset(ec, ebc).dot(e) < 0 && temp.dotbset(ec, ecd).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [c, e];\r\n            }\r\n            if (temp.dotbset(ed, ead).dot(e) < 0 && temp.dotbset(ed, ebd).dot(e) < 0 && temp.dotbset(ed, ecd).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [d, e];\r\n            }\r\n            // face\r\n            // normal vectors for 4 cells, be careful with directions\r\n            //  dabc\r\n            let eabc = vec4Pool.pop().wedgevbset(ea, ebc); // -\r\n            let eabd = vec4Pool.pop().wedgevbset(ea, ebd); // +\r\n            let eacd = vec4Pool.pop().wedgevbset(ea, ecd); // -\r\n            let ebcd = vec4Pool.pop().wedgevbset(eb, ecd); // +\r\n            if (temp.wedgevbset(eabc, eab).dot(e) < 0 && temp.wedgevbset(eabd, eab).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, b, e];\r\n            }\r\n            if (temp.wedgevbset(eabc, eac).dot(e) > 0 && temp.wedgevbset(eacd, eac).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, c, e];\r\n            }\r\n            if (temp.wedgevbset(eabd, ead).dot(e) > 0 && temp.wedgevbset(eacd, ead).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, d, e];\r\n            }\r\n            if (temp.wedgevbset(eabc, ebc).dot(e) < 0 && temp.wedgevbset(ebcd, ebc).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [b, c, e];\r\n            }\r\n            if (temp.wedgevbset(eabd, ebd).dot(e) < 0 && temp.wedgevbset(ebcd, ebd).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [b, d, e];\r\n            }\r\n            if (temp.wedgevbset(eacd, ecd).dot(e) < 0 && temp.wedgevbset(ebcd, ecd).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [c, d, e];\r\n            }\r\n            vec4Pool.push(ea, eb, ec, ed, temp);\r\n            bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n            // cell\r\n            // turn all face normals outside\r\n            if (reverseOrder) {\r\n                eabd.negs(); ebcd.negs();\r\n            } else {\r\n                eabc.negs(); eacd.negs();\r\n            }\r\n            if (eabc.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [a, b, c, e];\r\n            }\r\n            if (eabd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [a, b, d, e];\r\n            }\r\n            if (eacd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [a, c, d, e];\r\n            }\r\n            if (ebcd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [b, c, d, e];\r\n            }\r\n            // otherwise origin is inside, return data for epa algorithm\r\n            return { reverseOrder, normals: [ebcd, eacd, eabd, eabc] };\r\n        }\r\n        export function gjkOutDistance(convex: Convex, initSimplex?: Vec4[]): {\r\n            simplex?: Vec4[];\r\n            reverseOrder?: boolean;\r\n            normals?: Vec4[];\r\n            normal?: Vec4;\r\n            distance?: number;\r\n        } {\r\n            if (!initSimplex) {\r\n                initSimplex = [convex[0]];\r\n            }\r\n            // datas for states\r\n            let steps = 0;\r\n            let s = initSimplex;\r\n            let reverseOrder5: boolean; // only used when s.length == 5 (store 5-simplex orientation)\r\n            // temp vars:\r\n            let p: Vec4;\r\n            let pn: Vec4 | Vec4[] | { normals: Vec4[], reverseOrder: boolean };\r\n            // let steps = [];\r\n            while (steps++ < maxGjkStep) {\r\n                // steps.push(s.length);\r\n                switch (s.length) {\r\n                    case 1:\r\n                        // steps.push(s[0].norm());//dbg\r\n                        p = supportNeg(convex, s[0]);\r\n                        if (p === s[0]) {\r\n                            return {\r\n                                simplex: s,\r\n                                normal: vec4Pool.pop().copy(s[0]).negs(),\r\n                                distance: s[0].norm()\r\n                            };\r\n                        }\r\n                        s.push(p); //keep s[0] older\r\n                        break;\r\n                    case 2:\r\n                        pn = getClosestPointOrNormal2(s[0], s[1]);\r\n                        // ignore far point and go on with single point\r\n                        if (pn === s[1]) { s[0] = s[1]; s.pop(); continue; }\r\n                        // degenerated case: exact contact simplex\r\n                        if (pn.norm1() === 0) { return {}; }\r\n                        // steps.push(-pn.clone().norms().dot(s[0]));//dbg\r\n                        p = support(convex, pn);\r\n                        // simplex can't move on, terminate\r\n                        if (p === s[0] || p === s[1]) { return { simplex: s, normal: pn.norms(), distance: -s[0].dot(pn) }; }\r\n                        pn.pushPool();\r\n                        s.push(p);\r\n                        break;\r\n                    case 3:\r\n                        pn = getClosestPointOrNormal3(s[0], s[1], s[2]);\r\n                        if ((pn as Vec4[]).length) {\r\n                            // ignore far points and go on with fewer points\r\n                            s = pn as Vec4[]; continue;\r\n                        }\r\n                        // degenerated case: exact contact simplex\r\n                        if ((pn as Vec4).norm1() === 0) { return {}; }\r\n\r\n                        // steps.push(-(pn as Vec4).clone().norms().dot(s[0]));//dbg\r\n                        p = support(convex, pn as Vec4);\r\n                        // simplex can't move on, terminate\r\n                        if (p === s[0] || p === s[1] || p === s[2]) {\r\n                            return { simplex: s, normal: (pn as Vec4).norms(), distance: -s[0].dot((pn as Vec4)) };\r\n                        }\r\n                        (pn as Vec4).pushPool();\r\n                        s.push(p);\r\n                        break;\r\n                    case 4:\r\n                        pn = getClosestPointOrNormal4(s[0], s[1], s[2], s[3]);\r\n                        if ((pn as Vec4[]).length) {\r\n                            // ignore far points and go on with fewer points\r\n                            s = pn as Vec4[]; continue;\r\n                        }\r\n                        let normal = pn as Vec4;\r\n                        let dotFactor = -normal.dot(s[0]);\r\n                        reverseOrder5 = dotFactor > 0; // if true, normal obtained by da^db^dc towards origin\r\n                        normal.mulfs(dotFactor); // use mul to detect nomal or dotFactor is zero\r\n                        // degenerated case: exact contact simplex\r\n                        if (normal.norm1() === 0) { return {} }\r\n\r\n                        // steps.push(-(pn as Vec4).clone().norms().dot(s[0]));//dbg\r\n                        p = support(convex, normal);\r\n                        // simplex can't move on, terminate\r\n                        if (p === s[0] || p === s[1] || p === s[2] || p === s[3]) { return { simplex: s, normal: normal.norms(), distance: -normal.dot(s[0]) }; }\r\n                        normal.pushPool();\r\n                        s.push(p);\r\n                        break;\r\n                    case 5:\r\n                        // we won't go to 5th dimension, so no normal to find anymore\r\n                        pn = getClosestPoint5(s[0], s[1], s[2], s[3], s[4], reverseOrder5!);\r\n                        if ((pn as Vec4[]).length) {\r\n                            // ignore far points and go on with fewer points\r\n                            s = pn as Vec4[]; continue;\r\n                        } else {\r\n                            // interior of simplex, stop\r\n                            let info = pn as {\r\n                                reverseOrder: boolean;\r\n                                normals: Vec4[];\r\n                            };\r\n                            let out = { simplex: s, reverseOrder: info.reverseOrder, normals: info.normals };\r\n                            return out;\r\n                        }\r\n\r\n                    default: console.assert(false, \"simplex points error\");\r\n                }\r\n            }\r\n            console.warn(\"Physics engin's GJK algorithm has been interupped by too many steps.\"); return {};\r\n        }\r\n        /** test convex1 - convex2 to origin */\r\n        export function gjkDiffTest(convex1: Convex, convex2: Convex, initSimplex1?: Vec4[], initSimplex2?: Vec4[]): {\r\n            simplex1?: Vec4[];\r\n            simplex2?: Vec4[];\r\n            normals?: Vec4[];\r\n            reverseOrder?: boolean;\r\n        } {\r\n            if (!initSimplex1) {\r\n                initSimplex1 = [convex1[0]];\r\n            }\r\n            if (!initSimplex2) {\r\n                initSimplex2 = [convex2[0]];\r\n            }\r\n            // datas for states\r\n            let s1 = initSimplex1;\r\n            let s2 = initSimplex2;\r\n            let reverseOrder5: boolean;\r\n            // temp vars:\r\n            let p1: Vec4;\r\n            let p2: Vec4;\r\n            let normal: Vec4;\r\n            let _vec4 = vec4Pool.pop();\r\n            // while (true) {\r\n            // switch (s1.length) {\r\n            // case 1:\r\n            [p1, p2] = supportDiffTest(convex1, convex2, _vec4.subset(s2[0], s1[0]));\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0])) {\r\n                return {};\r\n            }\r\n            s1.push(p1); s2.push(p2);\r\n            //     break;\r\n            // case 2:\r\n            normal = getDiffNormal2(s1[0], s1[1], s2[0], s2[1]);\r\n            if (normal.norm1() === 0) { return {}; }\r\n            [p1, p2] = supportDiffTest(convex1, convex2, normal);\r\n            // simplex can't move on, terminate\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1])) { return {}; }\r\n            normal.pushPool();\r\n            s1.push(p1); s2.push(p2);\r\n            //     break;\r\n            // case 3:\r\n            normal = getDiffNormal3(s1[0], s1[1], s1[2], s2[0], s2[1], s2[2]);\r\n            if (normal.norm1() === 0) { return {}; }\r\n            [p1, p2] = supportDiffTest(convex1, convex2, normal);\r\n            // simplex can't move on, terminate\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1]) || (p1 === s1[2] && p2 === s2[2])) {\r\n                return {};\r\n            }\r\n            normal.pushPool();\r\n            s1.push(p1); s2.push(p2);\r\n            //     break;\r\n            // case 4:\r\n            normal = getDiffNormal4(s1[0], s1[1], s1[2], s1[3], s2[0], s2[1], s2[2], s2[3]);\r\n            let originDir = vec4Pool.pop().subset(s1[0], s2[0]);\r\n            let dotFactor = -normal.dot(originDir); originDir.pushPool();\r\n            normal.mulfs(dotFactor); // use mul to detect nomal or dotFactor is zero\r\n            if (normal.norm1() === 0) { return {}; }\r\n            reverseOrder5 = dotFactor > 0;\r\n            [p1, p2] = supportDiffTest(convex1, convex2, normal);\r\n            // simplex can't move on, terminate\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1]) || (p1 === s1[2] && p2 === s2[2]) || (p1 === s1[3] && p2 === s2[3])) {\r\n                return {};\r\n            }\r\n            normal.pushPool();\r\n            s1.push(p1); s2.push(p2);\r\n            while (true) {\r\n                let res = getDiffNormal5(\r\n                    s1[0], s1[1], s1[2], s1[3], s1[4],\r\n                    s2[0], s2[1], s2[2], s2[3], s2[4], reverseOrder5\r\n                );\r\n                if (!res.normal) {\r\n                    // interior, pass data to epadiff\r\n                    return { simplex1: s1, simplex2: s2, normals: res.normals, reverseOrder: res.reverseOrder };\r\n                }\r\n                reverseOrder5 = res.reverseOrder;\r\n                [p1, p2] = supportDiffTest(convex1, convex2, res.normal);\r\n                // simplex can't move on, terminate\r\n                if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1]) || (p1 === s1[2] && p2 === s2[2]) || (p1 === s1[3] && p2 === s2[3]) || (p1 === s1[4] && p2 === s2[4])) {\r\n                    return {};\r\n                }\r\n                s1 = res.simplex1; s1.push(p1);\r\n                s2 = res.simplex2; s2.push(p2);\r\n            }\r\n        }\r\n        function getDiffNormal2(a1: Vec4, b1: Vec4, a2: Vec4, b2: Vec4) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let adb = a.dot(b);\r\n            let la = b.normsqr() - adb;\r\n            let lb = a.normsqr() - adb;\r\n            let out = vec4Pool.pop().set().addmulfs(a, -la).addmulfs(b, -lb);\r\n            vec4Pool.push(a, b);\r\n            return out;\r\n        }\r\n        function getDiffNormal3(\r\n            a1: Vec4, b1: Vec4, c1: Vec4,\r\n            a2: Vec4, b2: Vec4, c2: Vec4\r\n        ) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let c = vec4Pool.pop().subset(c1, c2);\r\n            let ca = vec4Pool.pop().subset(a, c);\r\n            let cb = vec4Pool.pop().subset(b, c);\r\n\r\n            let biv = bivecPool.pop().wedgevvset(ca, cb);\r\n            let out = ca;\r\n            out.wedgevbset(a, biv).wedgevbset(out, biv);\r\n            vec4Pool.push(a, b, c, cb); biv.pushPool();\r\n            return out;\r\n        }\r\n        function getDiffNormal4(\r\n            a1: Vec4, b1: Vec4, c1: Vec4, d1: Vec4,\r\n            a2: Vec4, b2: Vec4, c2: Vec4, d2: Vec4\r\n        ) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let c = vec4Pool.pop().subset(c1, c2);\r\n            let d = vec4Pool.pop().subset(d1, d2);\r\n            let da = vec4Pool.pop().subset(a, d);\r\n            let db = vec4Pool.pop().subset(b, d);\r\n            let dc = vec4Pool.pop().subset(c, d);\r\n\r\n            let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n            let dabc = vec4Pool.pop().wedgevbset(da, dbc);\r\n            dbc.pushPool();\r\n            vec4Pool.push(a, b, c, d, da, db, dc);\r\n            return dabc;\r\n        }\r\n        function getDiffNormal5(\r\n            a1: Vec4, b1: Vec4, c1: Vec4, d1: Vec4, e1: Vec4,\r\n            a2: Vec4, b2: Vec4, c2: Vec4, d2: Vec4, e2: Vec4,\r\n            reverseOrder: boolean\r\n        ) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let c = vec4Pool.pop().subset(c1, c2);\r\n            let d = vec4Pool.pop().subset(d1, d2);\r\n            let e = vec4Pool.pop().subset(e1, e2);\r\n            let ea = vec4Pool.pop().subset(a, e);\r\n            let eb = vec4Pool.pop().subset(b, e);\r\n            let ec = vec4Pool.pop().subset(c, e);\r\n            let ed = vec4Pool.pop().subset(d, e);\r\n\r\n            let ebc = bivecPool.pop().wedgevvset(eb, ec);\r\n            let ebd = bivecPool.pop().wedgevvset(eb, ed);\r\n            let ecd = bivecPool.pop().wedgevvset(ec, ed);\r\n\r\n            let eabc = vec4Pool.pop().wedgevbset(ea, ebc); // -\r\n            let eabd = vec4Pool.pop().wedgevbset(ea, ebd); // +\r\n            let eacd = vec4Pool.pop().wedgevbset(ea, ecd); // -\r\n            let ebcd = vec4Pool.pop().wedgevbset(eb, ecd); // +\r\n            if (reverseOrder) {\r\n                eabd.negs(); ebcd.negs();\r\n            } else {\r\n                eabc.negs(); eacd.negs();\r\n            }\r\n            if (eabc.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [a1, b1, c1, e1], simplex2: [a2, b2, c2, e2], normal: eabc, reverseOrder: reverseOrder };\r\n            }\r\n            if (eabd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [a1, b1, d1, e1], simplex2: [a2, b2, d2, e2], normal: eabd, reverseOrder: !reverseOrder };\r\n            }\r\n            if (eacd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [a1, c1, d1, e1], simplex2: [a2, c2, d2, e2], normal: eacd, reverseOrder: reverseOrder };\r\n            }\r\n            if (ebcd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [b1, c1, d1, e1], simplex2: [b2, c2, d2, e2], normal: ebcd, reverseOrder: !reverseOrder };\r\n            }\r\n            bivecPool.push(ebc, ebd, ecd);\r\n            vec4Pool.push(a, b, c, d, e, ea, eb, ec, ed);\r\n            // otherwise origin is inside, return data for epa algorithm\r\n            return { reverseOrder, normals: [ebcd, eacd, eabd, eabc] };\r\n        }\r\n        /** expanding polytope algorithm */\r\n        export function epa(convex: Convex, initCondition: {\r\n            simplex: Vec4[],\r\n            reverseOrder: boolean,\r\n            normals: Vec4[] // normal must towards outside (away from origin)\r\n        }) {\r\n            let simplex = initCondition.simplex;\r\n            let normals = initCondition.normals;\r\n            if (initCondition.reverseOrder) {\r\n                let temp = simplex[0]; simplex[0] = simplex[1]; simplex[1] = temp;\r\n                let temp2 = normals[0]; normals[0] = normals[1]; normals[1] = temp2;\r\n            }\r\n            if (normals.length === 4) {\r\n                let da = vec4Pool.pop().subset(simplex[0], simplex[3]);\r\n                let db = vec4Pool.pop().subset(simplex[1], simplex[3]);\r\n                let dc = vec4Pool.pop().subset(simplex[2], simplex[3]);\r\n\r\n                let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n                normals.push(vec4Pool.pop().wedgevbset(da, dbc));\r\n                dbc.pushPool();\r\n                vec4Pool.push(da, db, dc);\r\n            }\r\n            // tetrahedral cell list\r\n            let cs = [\r\n                [simplex[1], simplex[2], simplex[4], simplex[3]],\r\n                [simplex[2], simplex[0], simplex[4], simplex[3]],\r\n                [simplex[0], simplex[1], simplex[4], simplex[3]],\r\n                [simplex[0], simplex[2], simplex[4], simplex[1]],\r\n                [simplex[0], simplex[1], simplex[3], simplex[2]],\r\n            ]\r\n            // normal list\r\n            let ns = normals;\r\n            // distance list\r\n            let ds:number[] = [];\r\n            let mind = Infinity;\r\n            let minid: number;\r\n            for (let i = 0; i < 5; i++) {\r\n                ns[i].norms();\r\n                let val = ns[i].dot(cs[i][0]);\r\n                ds.push(val);\r\n                console.assert(val > 0, \"wrong init orientation\");\r\n                if (val < mind) {\r\n                    minid = i;\r\n                    mind = val;\r\n                }\r\n            }\r\n            let pa = vec4Pool.pop();\r\n            let pb = vec4Pool.pop();\r\n            let pc = vec4Pool.pop();\r\n            let pab = bivecPool.pop();\r\n\r\n            let steps = 0;\r\n            while (steps++ < maxEpaStep) {\r\n                let cell = cs[minid!];\r\n                let p = support(convex, ns[minid!]);\r\n                console.log(`Step: ${steps} Distance:${mind}`);\r\n                if (p === cell[0] || p === cell[1] || p === cell[2] || p === cell[3]) {\r\n                    // can't move on, found\r\n                    // vec4Pool.push(pa, pb, pc, pd);\r\n                    // bivecPool.push(pab, pac, pbc);\r\n                    for (let n of ns) {\r\n                        if (n !== ns[minid!]) n.pushPool();\r\n                    }\r\n                    vec4Pool.push(pa, pb, pc);\r\n                    bivecPool.push(pab);\r\n                    return { simplex: cell, distance: -mind, normal: ns[minid!] }\r\n                }\r\n\r\n                mind = Infinity;\r\n                // construct new convexhull after adding point p\r\n\r\n                let newcs: Vec4[][] = [];\r\n                let newns: Vec4[] = [];\r\n                let newds: number[] = [];\r\n                // borderformat [v1,v2,v3], v1,v2,v3's order is for orientation\r\n                // mark v1 null if duplicate need to remove, \r\n                let border: [Vec4|undefined, Vec4|undefined, Vec4|undefined][] = [];\r\n                function checkBorder(a: Vec4, b: Vec4, c: Vec4) {\r\n                    for (let i of border) {\r\n                        // if (i[0] === a) {\r\n                        //     if (i[1] === b) {\r\n                        //         if (i[2] === c) {\r\n                        //             // console.assert(false);\r\n                        //         }\r\n                        //     } else if (i[1] === c) {\r\n                        //         if (i[2] === b) {\r\n                        //             i[0] = null; return;\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n                        if (\r\n                            (i[0] === a && i[1] === c && i[2] === b) ||\r\n                            (i[0] === b && i[1] === a && i[2] === c) ||\r\n                            (i[0] === c && i[1] === b && i[2] === a)\r\n                        ) {\r\n                            i[0] = undefined; return;\r\n                        }\r\n                    }\r\n                    border.push([a, b, c]);\r\n                }\r\n                for (let idx = 0, csl = cs.length; idx < csl; idx++) {\r\n                    let cell = cs[idx];\r\n                    let a = cell[0];\r\n                    let b = cell[1];\r\n                    let c = cell[2];\r\n                    let d = cell[3];\r\n                    let determinant = ns[idx].dot(pa.subset(p, a));\r\n                    if (determinant > 0) {\r\n                        checkBorder(d, b, c); // +\r\n                        checkBorder(d, c, a); // -\r\n                        checkBorder(d, a, b); // +\r\n                        checkBorder(c, b, a); // -\r\n                    } else {\r\n                        newcs.push(cell);\r\n                        newns.push(ns[idx]);\r\n                        newds.push(ds[idx]);\r\n                        if (ds[idx] < mind) {\r\n                            mind = ds[idx]; minid = newns.length - 1;\r\n                        }\r\n                    }\r\n                }\r\n                for (let b of border) {\r\n                    if (!b[0]) continue;\r\n                    pa.subset(p, b[0]);\r\n                    pb.subset(p, b[1]!);\r\n                    pc.subset(p, b[2]!);\r\n                    pab.wedgevvset(pa, pb);\r\n                    newcs.push([p, b[0], b[1]!, b[2]!]);\r\n                    let n = vec4Pool.pop().wedgevbset(pc, pab).negs().norms();\r\n                    let d = n.dot(p);\r\n                    console.assert(d >= 0, \"new normal needs negs\");\r\n                    if (d < mind) {\r\n                        mind = d; minid = newds.length;\r\n                    }\r\n                    newns.push(n);\r\n                    newds.push(d);\r\n                }\r\n                ns = newns;\r\n                cs = newcs;\r\n                ds = newds;\r\n            }\r\n            console.warn(\"Physics engin's GJK-EPA algorithm has been interupped by too many steps.\"); return {};\r\n        }\r\n\r\n        /** expanding polytope algorithm for minkovsky difference */\r\n        export function epaDiff(convex1: Convex, convex2: Convex, initCondition: {\r\n            simplex1: Vec4[],\r\n            simplex2: Vec4[],\r\n            reverseOrder: boolean,\r\n            normals: Vec4[] // normal must towards outside (away from origin)\r\n        }) {\r\n            let s1 = initCondition.simplex1;\r\n            let s2 = initCondition.simplex2;\r\n            let normals = initCondition.normals;\r\n            if (initCondition.reverseOrder) {\r\n                let temp = s1[0]; s1[0] = s1[1]; s1[1] = temp;\r\n                temp = s2[0]; s2[0] = s2[1]; s2[1] = temp;\r\n                let temp2 = normals[0]; normals[0] = normals[1]; normals[1] = temp2;\r\n            }\r\n            if (normals.length === 4) {\r\n                let da = vec4Pool.pop().subset(s1[0], s1[3]).subs(s2[0]).adds(s2[3]);\r\n                let db = vec4Pool.pop().subset(s1[1], s1[3]).subs(s2[1]).adds(s2[3]);\r\n                let dc = vec4Pool.pop().subset(s1[2], s1[3]).subs(s2[2]).adds(s2[3]);\r\n\r\n                let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n                normals.push(vec4Pool.pop().wedgevbset(da, dbc));\r\n                dbc.pushPool();\r\n                vec4Pool.push(da, db, dc);\r\n            }\r\n            // tetrahedral cell list\r\n            let cs1 = [\r\n                [s1[1], s1[2], s1[4], s1[3]],\r\n                [s1[2], s1[0], s1[4], s1[3]],\r\n                [s1[0], s1[1], s1[4], s1[3]],\r\n                [s1[0], s1[2], s1[4], s1[1]],\r\n                [s1[0], s1[1], s1[3], s1[2]],\r\n            ]\r\n            let cs2 = [\r\n                [s2[1], s2[2], s2[4], s2[3]],\r\n                [s2[2], s2[0], s2[4], s2[3]],\r\n                [s2[0], s2[1], s2[4], s2[3]],\r\n                [s2[0], s2[2], s2[4], s2[1]],\r\n                [s2[0], s2[1], s2[3], s2[2]],\r\n            ]\r\n            // normal list\r\n            let ns = normals;\r\n            // distance list\r\n            let ds:number[] = [];\r\n            let mind = Infinity;\r\n            let minid: number;\r\n\r\n            let pa = vec4Pool.pop();\r\n            let pb = vec4Pool.pop();\r\n            let pc = vec4Pool.pop();\r\n            let p12 = vec4Pool.pop();\r\n            let pab = bivecPool.pop();\r\n            for (let i = 0; i < 5; i++) {\r\n                ns[i].norms();\r\n                let val = ns[i].dot(pa.subset(cs1[i][0], cs2[i][0]));\r\n                ds.push(val);\r\n                console.assert(val > 0, \"wrong init orientation\");\r\n                if (val < mind) {\r\n                    minid = i;\r\n                    mind = val;\r\n                }\r\n            }\r\n\r\n            let steps = 0;\r\n            while (steps++ < maxEpaStep) {\r\n                let cell1 = cs1[minid!];\r\n                let cell2 = cs2[minid!];\r\n                let [p1, p2] = supportDiff(convex1, convex2, ns[minid!]);\r\n                p12.subset(p1, p2);\r\n                if (ns[minid!].dot(p12) <= mind ||\r\n                    (p1 === cell1[0] && p2 === cell2[0]) ||\r\n                    (p1 === cell1[1] && p2 === cell2[1]) ||\r\n                    (p1 === cell1[2] && p2 === cell2[2]) ||\r\n                    (p1 === cell1[3] && p2 === cell2[3])\r\n                ) {\r\n                    // can't move on, found\r\n                    for (let n of ns) {\r\n                        if (n !== ns[minid!]) n.pushPool();\r\n                    }\r\n                    vec4Pool.push(pa, pb, pc);\r\n                    bivecPool.push(pab);\r\n\r\n                    // console.log(`Step: ${steps}`);\r\n                    return { simplex1: cell1, simplex2: cell2, distance: -mind, normal: ns[minid!] }\r\n                }\r\n\r\n                mind = Infinity;\r\n                // construct new convexhull after adding point p\r\n\r\n                let newcs1: Vec4[][] = [];\r\n                let newcs2: Vec4[][] = [];\r\n                let newns: Vec4[] = [];\r\n                let newds: number[] = [];\r\n                // borderformat [a1,a2,a3, b1,b2,b3], order is for orientation\r\n                // a, b are convex A's points a - convex B's points b\r\n                // mark a1 null if duplicate need to remove, \r\n                let border: [Vec4|undefined, Vec4|undefined, Vec4|undefined, Vec4|undefined, Vec4|undefined, Vec4|undefined][] = [];\r\n                function checkBorder(\r\n                    a1: Vec4, b1: Vec4, c1: Vec4,\r\n                    a2: Vec4, b2: Vec4, c2: Vec4\r\n                ) {\r\n                    for (let i of border) {\r\n                        if (\r\n                            (i[0] === a1 && i[3] === a2 && i[1] === c1 && i[4] === c2 && i[5] === b2 && i[2] === b1) ||\r\n                            (i[0] === b1 && i[3] === b2 && i[1] === a1 && i[4] === a2 && i[5] === c2 && i[2] === c1) ||\r\n                            (i[0] === c1 && i[3] === c2 && i[1] === b1 && i[4] === b2 && i[5] === a2 && i[2] === a1)\r\n                        ) {\r\n                            i[0] = undefined; return;\r\n                        }\r\n                    }\r\n                    border.push([a1, b1, c1, a2, b2, c2]);\r\n                }\r\n                for (let idx = 0, csl = cs1.length; idx < csl; idx++) {\r\n                    let cell1 = cs1[idx];\r\n                    let cell2 = cs2[idx];\r\n                    let a1 = cell1[0]; let a2 = cell2[0];\r\n                    let b1 = cell1[1]; let b2 = cell2[1];\r\n                    let c1 = cell1[2]; let c2 = cell2[2];\r\n                    let d1 = cell1[3]; let d2 = cell2[3];\r\n                    let determinant = ns[idx].dot(pa.subset(p12, a1).adds(a2));\r\n                    if (determinant > 0) {\r\n                        checkBorder(d1, b1, c1, d2, b2, c2); // +\r\n                        checkBorder(d1, c1, a1, d2, c2, a2); // -\r\n                        checkBorder(d1, a1, b1, d2, a2, b2); // +\r\n                        checkBorder(c1, b1, a1, c2, b2, a2); // -\r\n                    } else {\r\n                        newcs1.push(cell1);\r\n                        newcs2.push(cell2);\r\n                        newns.push(ns[idx]);\r\n                        newds.push(ds[idx]);\r\n                        if (ds[idx] < mind) {\r\n                            mind = ds[idx]; minid = newns.length - 1;\r\n                        }\r\n                    }\r\n                }\r\n                for (let b of border) {\r\n                    if (!b[0]) continue;\r\n                    pa.subset(p12, b[0]).adds(b[3]!);\r\n                    pb.subset(p12, b[1]!).adds(b[4]!);\r\n                    pc.subset(p12, b[2]!).adds(b[5]!);\r\n                    pab.wedgevvset(pa, pb);\r\n                    newcs1.push([p1, b[0], b[1]!, b[2]!]);\r\n                    newcs2.push([p2, b[3]!, b[4]!, b[5]!]);\r\n                    let n = vec4Pool.pop().wedgevbset(pc, pab).negs().norms();\r\n                    let d = n.dot(p12);\r\n                    if (d < 0) return;\r\n                    // console.assert(d >= 0, \"new normal needs negs\");\r\n                    if (d < mind) {\r\n                        mind = d; minid = newds.length;\r\n                    }\r\n                    newns.push(n);\r\n                    newds.push(d);\r\n                }\r\n                ns = newns;\r\n                cs1 = newcs1;\r\n                cs2 = newcs2;\r\n                ds = newds;\r\n            }\r\n            // console.warn(\"Physics engin's GJK-EPA algorithm has been interupped by too many steps.\"); return {};\r\n        }","import { Rotor } from \"../math/algebra/rotor\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4\";\r\nimport { _COS30, _TAN30 } from \"../math/const\";\r\nimport { BroadPhaseList } from \"./broadPhase\";\r\nimport { epaDiff, gjkDiffTest, gjkOutDistance } from \"./gjk\";\r\nimport { rigid, Rigid } from \"./rigid\";\r\n\r\nexport interface Collision {\r\n    point: Vec4;\r\n    depth: number;\r\n    /** normal is defined from a to b */\r\n    normal: Vec4;\r\n    a: Rigid;\r\n    b?: Rigid;\r\n}\r\n// cache\r\nlet _vec4 = new Vec4;\r\nlet _r = new Rotor;\r\nexport class NarrowPhase {\r\n    collisionList: Collision[] = [];\r\n    /** max iteration for sdf methods in detectCollision */\r\n    maxIteration = 5;\r\n    clearCollisionList() {\r\n        this.collisionList = [];\r\n    }\r\n    run(list: BroadPhaseList) {\r\n        this.clearCollisionList();\r\n        for (let [a, b] of list) {\r\n            this.detectCollision(a, b);\r\n        }\r\n    }\r\n    detectCollision(rigidA: Rigid, rigidB: Rigid) {\r\n        let a = rigidA.geometry, b = rigidB.geometry;\r\n        if (a instanceof rigid.Glome) {\r\n            if (b instanceof rigid.Glome) return this.detectGlomeGlome(a, b);\r\n            if (b instanceof rigid.Plane) return this.detectGlomePlane(a, b);\r\n            if (b instanceof rigid.Convex) return this.detectConvexGlome(b, a);\r\n            if (b instanceof rigid.Spheritorus) return this.detectSpheritorusGlome(b, a);\r\n            if (b instanceof rigid.Torisphere) return this.detectTorisphereGlome(b, a);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerGlome(b, a);\r\n        }\r\n        if (a instanceof rigid.Plane) {\r\n            if (b instanceof rigid.Glome) return this.detectGlomePlane(b, a);\r\n            if (b instanceof rigid.Convex) return this.detectConvexPlane(b, a);\r\n            if (b instanceof rigid.Spheritorus) return this.detectSpheritorusPlane(b, a);\r\n            if (b instanceof rigid.Torisphere) return this.detectTorispherePlane(b, a);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerPlane(b, a);\r\n        }\r\n        if (a instanceof rigid.Convex) {\r\n            if (b instanceof rigid.Plane) return this.detectConvexPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectConvexGlome(a, b);\r\n            if (b instanceof rigid.Convex) {\r\n                // (arg1,arg2) convert arg2 to arg1's coord\r\n                if (b.points.length > a.points.length)\r\n                    return this.detectConvexConvex(b, a);\r\n                return this.detectConvexConvex(a, b);\r\n            }\r\n        }\r\n        if (a instanceof rigid.Spheritorus) {\r\n            if (b instanceof rigid.Spheritorus) return this.detectSpheritorusSpheritorus(a, b);\r\n            if (b instanceof rigid.Torisphere) return this.detectTorisphereSpheritorus(b, a);\r\n            if (b instanceof rigid.Plane) return this.detectSpheritorusPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectSpheritorusGlome(a, b);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerSpheritorus(b, a);\r\n        }\r\n        if (a instanceof rigid.Torisphere) {\r\n            if (b instanceof rigid.Torisphere) return this.detectTorisphereTorisphere(a, b);\r\n            if (b instanceof rigid.Spheritorus) return this.detectTorisphereSpheritorus(a, b);\r\n            if (b instanceof rigid.Plane) return this.detectTorispherePlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectTorisphereGlome(a, b);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerTorisphere(b, a);\r\n\r\n        }\r\n        if (a instanceof rigid.Tiger) {\r\n            if (b instanceof rigid.Tiger) return this.detectTigerTiger(a, b);\r\n            if (b instanceof rigid.Spheritorus) return this.detectTigerSpheritorus(a, b);\r\n            if (b instanceof rigid.Torisphere) return this.detectTigerTorisphere(a, b);\r\n            if (b instanceof rigid.Plane) return this.detectTigerPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectTigerGlome(a, b);\r\n        }\r\n    }\r\n    private detectGlomeGlome(a: rigid.Glome, b: rigid.Glome) {\r\n        _vec4.subset(b.rigid.position, a.rigid.position);\r\n        let d = _vec4.norm();\r\n        let depth = a.radius + b.radius - d;\r\n        if (depth < 0) return null;\r\n        // todo: check whether clone can be removed\r\n        let normal = _vec4.divfs(d).clone();\r\n        let point = a.rigid.position.clone().adds(b.rigid.position).mulfs(0.5);\r\n        this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectGlomePlane(a: rigid.Glome, b: rigid.Plane) {\r\n        let depth = a.radius - (a.rigid.position.dot(b.normal) - b.offset);\r\n        if (depth < 0) return null;\r\n        let point = a.rigid.position.clone().addmulfs(b.normal, depth * 0.5 - a.radius);\r\n        this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectConvexPlane(a: rigid.Convex, b: rigid.Plane) {\r\n        // convert plane to convex's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        for (let v of a.points) {\r\n            let depth = -(v.dot(normal) + offset);\r\n            if (depth < 0) continue;\r\n            let point = v.clone().rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth / 2);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n    private detectConvexGlome(a: rigid.Convex, b: rigid.Glome) {\r\n        _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        if (a._cachePoints) {\r\n            for (let p = 0, l = a.points.length; p < l; p++) {\r\n                a._cachePoints[p].subset(a.points[p], _vec4);\r\n            }\r\n        } else {\r\n            a._cachePoints = a.points.map(p => vec4Pool.pop().subset(p, _vec4));\r\n        }\r\n        let result = gjkOutDistance(a._cachePoints);\r\n        if (result.normal && result.distance) {\r\n\r\n            let depth = b.radius - result.distance;\r\n            if (depth < 0) return;\r\n            result.normal.rotates(a.rigid.rotation);\r\n            let point = vec4Pool.pop().copy(b.rigid.position).addmulfs(result.normal, -(b.radius + result.distance) * 0.5)\r\n            this.collisionList.push({ point, normal: result.normal, depth, a: a.rigid, b: b.rigid });\r\n        }\r\n        // todo: EPA\r\n    }\r\n    private detectConvexConvex(a: rigid.Convex, b: rigid.Convex) {\r\n        // calculate in a's frame\r\n        _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        if (!isFinite(_vec4.norm1() + _r.l.norm() + _r.r.norm())) {\r\n            console.assert(isFinite(_vec4.norm1() + _r.l.norm() + _r.r.norm()), \"oxoor\");\r\n        }\r\n        if (b._cachePoints) {\r\n            for (let p = 0, l = b.points.length; p < l; p++) {\r\n                b._cachePoints[p].copy(b.points[p]).rotates(_r).adds(_vec4);\r\n            }\r\n        } else {\r\n            b._cachePoints = b.points.map(\r\n                p => vec4Pool.pop().copy(p).rotates(_r).adds(_vec4)\r\n            );\r\n        }\r\n        // gjk intersection test\r\n        let inter = gjkDiffTest(a.points, b._cachePoints);\r\n        if (!inter.normals) return;\r\n        // epa collision generation\r\n        let result = epaDiff(a.points, b._cachePoints, inter as {\r\n            simplex1: Vec4[];\r\n            simplex2: Vec4[];\r\n            reverseOrder: boolean;\r\n            normals: Vec4[];\r\n        });\r\n        if (result?.normal) {\r\n            let depth = - result.distance;\r\n            let [a1, b1, c1, d1] = result.simplex1;\r\n            let [a2, b2, c2, d2] = result.simplex2;\r\n            let point = vec4Pool.pop();\r\n            if (a1 === b1 && a1 === c1 && a1 === d1) {\r\n                // vertex - ?\r\n                point.copy(a1).addmulfs(result.normal, result.distance * 0.5);\r\n            } else if (a2 === b2 && a2 === c2 && a2 === d2) {\r\n                // ? - vertex\r\n                point.copy(a2).addmulfs(result.normal, -result.distance * 0.5);\r\n            } else {\r\n                let A: Vec4[] = [], B: Vec4[] = [];\r\n                for (let i of result.simplex1) if (A.indexOf(i) === -1) A.push(i);\r\n                for (let i of result.simplex2) if (B.indexOf(i) === -1) B.push(i);\r\n                if ((A.length === 2 && B.length === 3) || (B.length === 2 && A.length === 3)) {\r\n                    // edge - face || face - edge\r\n                    let deltaD = result.distance * 0.5;\r\n                    if (B.length === 2) {\r\n                        let temp = A; A = B; B = temp;\r\n                        deltaD = -deltaD;\r\n                    }\r\n                    let p1a = _vec4.subset(B[0], A[0]);\r\n                    let p1p2 = vec4Pool.pop().subset(A[1], A[0]);\r\n                    let ab = vec4Pool.pop().subset(B[1], B[0]);\r\n                    let ac = vec4Pool.pop().subset(B[2], B[0]);\r\n                    let _a1 = p1p2.dot(p1a), _b1 = p1p2.dot(ab), _c1 = p1p2.dot(ac), _d1 = p1p2.dot(p1p2);\r\n                    let _a2 = ab.dot(p1a), _b2 = ab.dot(ab), _c2 = ab.dot(ac), _d2 = _b1;\r\n                    let _a3 = ac.dot(p1a), _b3 = _c2, _c3 = ac.dot(ac), _d3 = _c1;\r\n\r\n                    let det = (_b3 * _c2 - _b2 * _c3) * _d1 + (- _b3 * _c1 + _b1 * _c3) * _d2 + (_b2 * _c1 - _b1 * _c2) * _d3;\r\n                    if (det === 0) return;\r\n                    let detInv = 1 / det;\r\n                    let s = ((_a3 * _b2 - _a2 * _b3) * _c1 + (- _a3 * _b1 + _a1 * _b3) * _c2 + (_a2 * _b1 - _a1 * _b2) * _c3) * detInv;\r\n\r\n                    point.copy(A[0]).addmulfs(p1p2, s).addmulfs(result.normal, deltaD);\r\n                }\r\n            }\r\n            // if (!isFinite(point.norm1() + result.normal.norm1() + depth)) { console.warn(\"wrong convex collision numeric result\"); return; }\r\n            this.collisionList.push({\r\n                point: point.rotates(a.rigid.rotation).adds(a.rigid.position),\r\n                normal: result.normal.rotates(a.rigid.rotation),\r\n                depth, a: a.rigid, b: b.rigid\r\n            });\r\n        }\r\n    }\r\n    private detectSpheritorusPlane(a: rigid.Spheritorus, b: rigid.Plane) {\r\n        // convert plane to st's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len = Math.hypot(normal.x, normal.w);\r\n        let depth = a.minorRadius - offset + len * a.majorRadius;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (normal.x === 0 && normal.w === 0) {\r\n            // deal perpendicular case: reduce contact to bottom center point\r\n            let point = a.rigid.position.clone().addmulfs(b.normal, (a.minorRadius + offset) * 0.5);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            // point on circle\r\n            let point = new Vec4(normal.x, 0, 0, normal.w).mulfs(-a.majorRadius / len);\r\n            // then to world coord and add normal\r\n            point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n    private detectSpheritorusGlome(a: rigid.Spheritorus, b: rigid.Glome) {\r\n        // convert glome to st's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let xw = p.x * p.x + p.w * p.w;\r\n        let yz = p.y * p.y + p.z * p.z;\r\n        let sqrtxw = Math.sqrt(xw);\r\n        let distance = Math.sqrt(a.majorRadius * a.majorRadius + xw + yz - 2 * sqrtxw * a.majorRadius);\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (xw === 0) {\r\n            // deal perpendicular case: reduce contact to center point\r\n            let k = 1.0 - (b.radius - depth * 0.5) / distance;\r\n            let point = new Vec4(0, k * p.y, k * p.z).rotates(a.rigid.rotation);\r\n            let normal = point.clone().norms();\r\n            point.adds(a.rigid.position);\r\n            this.collisionList.push({ point, normal, depth: depth / Math.sqrt(yz) * distance, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            let k = a.majorRadius / sqrtxw;\r\n            let point = new Vec4(p.x * k, 0, 0, p.w * k).rotates(a.rigid.rotation);\r\n            let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n            point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n            this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n\r\n    private detectSpheritorusSpheritorus(a: rigid.Spheritorus, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            let needContinue = false;\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k = a.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) { needContinue = true; break; }\r\n                // project to a\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) { needContinue = true; break; }\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) { break; }\r\n            }\r\n            if (needContinue) continue;\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            // console.log(converge);\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n        vec4Pool.push(...initialPB);\r\n    }\r\n\r\n    private detectTorispherePlane(a: rigid.Torisphere, b: rigid.Plane) {\r\n        // convert plane to ts's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len = Math.hypot(normal.x, normal.z, normal.w);\r\n        let depth = a.minorRadius - offset + len * a.majorRadius;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (normal.x === 0 && normal.w === 0 && normal.z === 0) {\r\n            // deal perpendicular case: reduce contact to bottom center point\r\n            let point = a.rigid.position.clone().addmulfs(b.normal, (a.minorRadius + offset) * 0.5);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            // point on sphere\r\n            let point = new Vec4(normal.x, 0, normal.z, normal.w).mulfs(-a.majorRadius / len);\r\n            // then to world coord and add normal\r\n            point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n    private detectTorisphereGlome(a: rigid.Torisphere, b: rigid.Glome) {\r\n        // convert glome to st's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let xzw = p.x * p.x + p.z * p.z + p.w * p.w;\r\n        let y = p.y * p.y;\r\n        let sqrtxzw = Math.sqrt(xzw);\r\n        let distance = Math.sqrt(a.majorRadius * a.majorRadius + xzw + y - 2 * sqrtxzw * a.majorRadius);\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (xzw === 0) {\r\n            // deal perpendicular case: reduce contact to center point\r\n            let k = 1.0 - (b.radius - depth * 0.5) / distance;\r\n            let point = new Vec4(0, k * p.y).rotates(a.rigid.rotation);\r\n            let normal = point.clone().norms();\r\n            point.adds(a.rigid.position);\r\n            this.collisionList.push({ point, normal, depth: depth / Math.abs(p.y) * distance, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            let k = a.majorRadius / sqrtxzw;\r\n            let point = new Vec4(p.x * k, 0, p.z * k, p.w * k).rotates(a.rigid.rotation);\r\n            let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n            point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n            this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n\r\n    private detectTorisphereTorisphere(a: rigid.Torisphere, b: rigid.Torisphere) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp = b.majorRadius * _TAN30;\r\n        // choose 4 initial points (regular tetrahedron) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp, 0, temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, -temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, temp, -temp),\r\n            vec4Pool.pop().set(temp, 0, -temp, -temp),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k = a.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to a\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k = b.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n\r\n    private detectTorisphereSpheritorus(a: rigid.Torisphere, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k = a.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to a\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) break;\r\n            }\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectTigerPlane(a: rigid.Tiger, b: rigid.Plane) {\r\n        // convert plane to ts's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len1 = Math.hypot(normal.x, normal.y);\r\n        let len2 = Math.hypot(normal.z, normal.w);\r\n        let depth = a.minorRadius - offset + len1 * a.majorRadius1 + len2 * a.majorRadius2;\r\n        if (depth < 0) return;\r\n        // point on flat torus\r\n        let s1 = len1 ? -a.majorRadius1 / len1 : 0;\r\n        let s2 = len2 ? -a.majorRadius2 / len2 : 0;\r\n        let point = new Vec4(normal.x * s1, normal.y * s1, normal.z * s2, normal.w * s2);\r\n        // then to world coord and add normal\r\n        point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n        this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectTigerGlome(a: rigid.Tiger, b: rigid.Glome) {\r\n        // convert glome to st's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let xy = p.x * p.x + p.y * p.y;\r\n        let zw = p.z * p.z + p.w * p.w;\r\n        let sqrtxy = Math.sqrt(xy);\r\n        let sqrtzw = Math.sqrt(zw);\r\n        let distance = Math.sqrt(\r\n            a.majorRadius1 * a.majorRadius1 + a.majorRadius2 * a.majorRadius2\r\n            + xy + zw - 2 * (sqrtxy * a.majorRadius1 + sqrtzw * a.majorRadius2)\r\n        );\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        let k1 = sqrtxy ? a.majorRadius1 / sqrtxy : 0;\r\n        let k2 = sqrtzw ? a.majorRadius2 / sqrtzw : 0;\r\n        let point = new Vec4(p.x * k1, p.y * k1, p.z * k2, p.w * k2).rotates(a.rigid.rotation);\r\n        let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n        point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n        this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectTigerTiger(a: rigid.Tiger, b: rigid.Tiger) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp1 = b.majorRadius1;\r\n        let temp2 = b.majorRadius2;\r\n        // choose 8 initial points (w1=0.5,w2=1/4+1/4i) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp1, 0, temp2, 0),\r\n            vec4Pool.pop().set(temp1, 0, -temp2, 0),\r\n            vec4Pool.pop().set(-temp1, 0, temp2, 0),\r\n            vec4Pool.pop().set(-temp1, 0, -temp2, 0),\r\n            vec4Pool.pop().set(0, temp1, 0, temp2),\r\n            vec4Pool.pop().set(0, temp1, 0, -temp2),\r\n            vec4Pool.pop().set(0, -temp1, 0, temp2),\r\n            vec4Pool.pop().set(0, -temp1, 0, -temp2),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k1 = a.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = a.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to a\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k1 = b.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                k2 = b.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to b\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dy = Math.abs(newP.y - p.y);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dy + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectTigerTorisphere(a: rigid.Tiger, b: rigid.Torisphere) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp = b.majorRadius * _TAN30;\r\n        // choose 4 initial points (regular tetrahedron) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp, 0, temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, -temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, temp, -temp),\r\n            vec4Pool.pop().set(temp, 0, -temp, -temp),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k1 = a.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = a.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to a\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k = b.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectTigerSpheritorus(a: rigid.Tiger, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k1 = a.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = a.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to a\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { Bivec, bivecPool } from \"../math/algebra/bivec\";\r\nimport { Mat4, mat4Pool } from \"../math/algebra/mat4\";\r\nimport { rotorPool } from \"../math/algebra/rotor\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4\";\r\nimport { _DEG2RAD } from \"../math/const\";\r\nimport { Constrain, Material, mulBivec, PointConstrain } from \"./engine\";\r\nimport { Collision } from \"./narrowphase\";\r\nimport { Rigid, SubRigid } from \"./rigid\";\r\n\r\nexport interface SolverConstructor {\r\n    new(): Solver;\r\n};\r\nexport abstract class Solver {\r\n    abstract run(collisionList: Collision[], constrainList: Constrain[]): void;\r\n}\r\nexport interface PreparedCollision extends Collision {\r\n    separateSpeed: number;\r\n    relativeVelocity: Vec4;\r\n    materialA: Material;\r\n    materialB?: Material;\r\n    dvA?: Vec4;\r\n    dvB?: Vec4;\r\n    dwA?: Bivec;\r\n    dwB?: Bivec;\r\n    pointConstrain?: PointConstrain;\r\n}\r\nexport class IterativeImpulseSolver extends Solver {\r\n    maxPositionIterations: number = 32;\r\n    maxVelocityIterations: number = 32;\r\n    maxResolveRotationAngle = 45 * _DEG2RAD;\r\n    separateSpeedEpsilon = 0.01;\r\n    PositionRelaxationFactor = 0.5;\r\n    collisionList: PreparedCollision[];\r\n    private _vec41 = new Vec4;\r\n    private _vec42 = new Vec4;\r\n    private pointConstrainMaterial = new Material(Infinity, 0);\r\n    run(collisionList: Collision[], constrainList: Constrain[]) {\r\n        if (!collisionList.length && !constrainList.length) return;\r\n        this.prepare(collisionList, constrainList);\r\n        this.resolveVelocity();\r\n        this.resolvePosition();\r\n    }\r\n    prepare(collisionList: Collision[], constrainList: Constrain[]) {\r\n        this.collisionList = collisionList.map(e => {\r\n            let { point, a, b, normal } = e;\r\n            let collision = e as PreparedCollision;\r\n            collision.materialA = a.material;\r\n            collision.materialB = b?.material;\r\n            // after got material, we solve union regardless of it's collision parts\r\n            if ((a as SubRigid).parent) collision.a = (a as SubRigid).parent!;\r\n            if ((b as SubRigid).parent) collision.b = (b as SubRigid).parent!;\r\n            collision.relativeVelocity = collision.b!.getlinearVelocity(vec4Pool.pop(), point).subs(\r\n                collision.a.getlinearVelocity(this._vec41, point)\r\n            );\r\n            collision.separateSpeed = collision.relativeVelocity.dot(normal);\r\n            return collision;\r\n        });\r\n        for (let c of constrainList) {\r\n            if (c instanceof PointConstrain) {\r\n                let { a, b, pointA, pointB } = c;\r\n                this._vec41.copy(pointA).rotates(a.rotation);\r\n                let relativeVelocity = vec4Pool.pop().dotbset(\r\n                    this._vec41, a.angularVelocity\r\n                ).adds(a.velocity);\r\n                let normal: Vec4;\r\n                let point: Vec4;\r\n                if (b) {\r\n                    this._vec42.copy(pointB).rotates(b.rotation);\r\n                    relativeVelocity.subs(this._vec42.dotbset(\r\n                        this._vec42, b.angularVelocity\r\n                    ).adds(b.velocity));\r\n                    normal = this._vec41.adds(a.position).sub(this._vec42.adds(b.position));\r\n                    point = this._vec41.add(this._vec42).mulfs(0.5);\r\n                } else {\r\n                    normal = this._vec41.adds(a.position).sub(pointB);\r\n                    point = this._vec41.adds(pointB).mulfs(0.5);\r\n                }\r\n                let depth = normal.norm(); normal.divfs(depth);\r\n                relativeVelocity.negs();\r\n                this.collisionList.push({\r\n                    a, b, normal, depth,\r\n                    materialA: this.pointConstrainMaterial,\r\n                    materialB: this.pointConstrainMaterial,\r\n                    relativeVelocity,\r\n                    separateSpeed: -relativeVelocity.norm(),\r\n                    point,\r\n                    pointConstrain: c\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    resolveVelocity() {\r\n        // iteratively solve lowest separateSpeed\r\n        for (let i = 0; i < this.maxVelocityIterations; i++) {\r\n            let collision = this.collisionList.sort((a, b) => (\r\n                (a.pointConstrain ? (-Math.abs(a.separateSpeed)) : a.separateSpeed)\r\n                - (b.pointConstrain ? (-Math.abs(b.separateSpeed)) : b.separateSpeed)\r\n            ))[0];\r\n            let { point, a, b, separateSpeed, normal, relativeVelocity, materialA, materialB } = collision;\r\n            if (!collision.pointConstrain) {\r\n                if (separateSpeed >= 0) return;\r\n            } else if (Math.abs(separateSpeed) < this.separateSpeedEpsilon) { return; }\r\n            let { restitution, friction } = Material.getContactMaterial(materialA, materialB!);\r\n            if (separateSpeed > -this.separateSpeedEpsilon) restitution = 0;\r\n            let normalVelocity = vec4Pool.pop().copy(normal).mulfs(separateSpeed);\r\n            let tangentVelocity = vec4Pool.pop().subset(relativeVelocity, normalVelocity);\r\n            let tangentSpeed = tangentVelocity.norm();\r\n            // newVn = Vn * -restitution;\r\n            // newVt = Vt * tangentFactor;\r\n            // when slide: deltaVt === friction * deltaVn => solve tangentFactor\r\n            // tangentFactor must > 0, otherwise it's still friction\r\n            let tangentFactor = tangentSpeed > 0 ? Math.max(\r\n                1 + friction * (1 + restitution) * separateSpeed / tangentSpeed, 0\r\n            ) : 0;\r\n            let targetDeltaVelocityByImpulse = tangentVelocity.mulfs(tangentFactor - 1).addmulfs(normalVelocity, -restitution - 1);\r\n            let pointInA: Vec4, pointInB: Vec4;\r\n            let matA = mat4Pool.pop(), matB = mat4Pool.pop()\r\n            if (a.mass! > 0) {\r\n                pointInA = vec4Pool.pop().subset(point, a.position).rotatesconj(a.rotation);\r\n                calcImpulseResponseMat(matA, a, pointInA, pointInA);\r\n            } else { matA.set(); }\r\n            if (b?.mass! > 0) {\r\n                pointInB = vec4Pool.pop().subset(point, b!.position).rotatesconj(b!.rotation);\r\n                calcImpulseResponseMat(matB, b!, pointInB, pointInB);\r\n            } else { matB.set(); }\r\n            // dv = dvb(Ib) - dva(Ia) == dvb(I) + dva(I) since I = -Ia = Ib\r\n            let impulse = targetDeltaVelocityByImpulse.mulmatls(matA.adds(matB).invs());\r\n            if (impulse.norm() > 1.0) {\r\n                console.log(\"hq\");\r\n            }\r\n            // if (impulse.norm1() === 0) continue;\r\n            console.assert(isFinite(impulse.norm1()));\r\n            console.assert(isFinite(normal.norm1()));\r\n            mat4Pool.push(matA, matB);\r\n            // resolve velocity by applying final impulse\r\n            if (b?.mass! > 0) {\r\n                collision.dvB = vec4Pool.pop();\r\n                collision.dwB = bivecPool.pop();\r\n                applyImpulseAndGetDeltaVW(collision.dvB, collision.dwB, b!, pointInB!, impulse);\r\n            }\r\n            if (a.mass! > 0) {\r\n                collision.dvA = vec4Pool.pop();\r\n                collision.dwA = bivecPool.pop();\r\n                applyImpulseAndGetDeltaVW(collision.dvA, collision.dwA, a, pointInA!, impulse.negs());\r\n            }\r\n            this.updateSeparateSpeeds(collision);\r\n        }\r\n    }\r\n    updateSeparateSpeeds(collision: PreparedCollision) {\r\n        for (let c of this.collisionList) {\r\n            if (collision.a.mass! > 0) {\r\n                if (c.a === collision.a) {\r\n                    this.updateSeparateSpeed(c, true, c.a, collision.dvA!, collision.dwA!);\r\n                } else if (c.b === collision.a) {\r\n                    this.updateSeparateSpeed(c, false, c.b, collision.dvA!, collision.dwA!);\r\n                }\r\n            }\r\n            if (collision.b?.mass! > 0) {\r\n                if (c.a === collision.b) {\r\n                    this.updateSeparateSpeed(c, true, c.a, collision.dvB!, collision.dwB!);\r\n                } else if (c.b === collision.b) {\r\n                    this.updateSeparateSpeed(c, false, c.b!, collision.dvB!, collision.dwB!);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateSeparateSpeed(collision: PreparedCollision, rigidIsA: boolean, rigid: Rigid, dv: Vec4, dw: Bivec) {\r\n        let delta = vec4Pool.pop().subset(collision.point, rigid.position).dotbsr(dw).adds(dv);\r\n        if (rigidIsA) delta.negs();\r\n\r\n        console.assert(isFinite(delta.norm1()), \"Numeric error in Collision solver updateDepth\");\r\n        collision.relativeVelocity.adds(delta);\r\n        if (collision.pointConstrain) {\r\n            collision.separateSpeed = -collision.relativeVelocity.norm();\r\n        }\r\n        else {\r\n            let dss = delta.dot(collision.normal); delta.pushPool();\r\n            collision.separateSpeed += dss;\r\n        }\r\n    }\r\n\r\n    resolvePosition() {\r\n        // iteratively solve the deepest\r\n        for (let i = 0; i < this.maxPositionIterations; i++) {\r\n            let collision = this.collisionList.sort((a, b) => b.depth - a.depth)[0];\r\n            let { point, a, b, depth, normal } = collision;\r\n            if (depth <= 0) return;\r\n            if (depth > 10) {\r\n                console.error(\"Depth direction error in resolvePosition\");\r\n            }\r\n            let invInertiaA = 0, invInertiaB = 0;\r\n            if (a.mass! > 0) {\r\n                let pA = vec4Pool.pop().subset(point, a.position);\r\n                let torqueA = bivecPool.pop().wedgevvset(normal, pA);\r\n                if (a.inertiaIsotroy) {\r\n                    collision.dwA = torqueA.mulfs(a.invInertia!.xy);\r\n                } else {\r\n                    torqueA.rotatesconj(a.rotation);\r\n                    collision.dwA = mulBivec(torqueA, a.invInertia!, torqueA).rotates(a.rotation);\r\n                }\r\n                invInertiaA = -pA.dotbset(pA, collision.dwA).dot(normal);\r\n                pA.pushPool();\r\n            }\r\n            if (b?.mass! > 0) {\r\n                let pB = vec4Pool.pop().subset(point, b!.position);\r\n                let torqueB = bivecPool.pop().wedgevvset(pB, normal);\r\n                if (b!.inertiaIsotroy) {\r\n                    collision.dwB = torqueB.mulfs(b!.invInertia!.xy);\r\n                } else {\r\n                    torqueB.rotatesconj(b!.rotation);\r\n                    collision.dwB = mulBivec(torqueB, b!.invInertia!, torqueB).rotates(b!.rotation);\r\n                }\r\n                invInertiaB = pB.dotbset(pB, collision.dwB).dot(normal);\r\n                pB.pushPool();\r\n            }\r\n            // console.assert(invInertiaA >= 0);\r\n            // console.assert(invInertiaB >= 0);\r\n            let depthDivTotalInvs = depth * this.PositionRelaxationFactor / (a.invMass + (b?.invMass ?? 0) + invInertiaA + invInertiaB);\r\n            if (!isFinite(depthDivTotalInvs)) {\r\n                console.error(\"A numeric error occured in Rigid collision solver: depthDivTotalInvs in resolvePosition\");\r\n            }\r\n            if (a.mass! > 0) {\r\n                // here can't mul invInertiaA since dwA is by unit impulse, and linear part is already invInertiaA\r\n                collision.dwA!.mulfs(depthDivTotalInvs);\r\n                // clamp rotation\r\n                let angle = collision.dwA!.norm();\r\n                if (angle > this.maxResolveRotationAngle) {\r\n                    collision.dwA!.mulfs(this.maxResolveRotationAngle / angle);\r\n                }\r\n                collision.dvA = vec4Pool.pop().copy(normal).mulfs(-depthDivTotalInvs * a.invMass);\r\n                if (!isFinite(angle + collision.dvA.norm1() + collision.dwA!.norm1() + a.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvA,dwA in resolvePosition\");\r\n                }\r\n                a.position.adds(collision.dvA);\r\n                let r = rotorPool.pop().expset(collision.dwA!);\r\n                a.rotation.mulsl(r); r.pushPool();\r\n                if (!isFinite(a.rotation.l.norm() + a.rotation.r.norm() + a.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvA,dwA in resolvePosition\");\r\n                }\r\n            }\r\n            if (b?.mass! > 0) {\r\n                collision.dwB!.mulfs(depthDivTotalInvs);\r\n                // clamp rotation\r\n                let angle = collision.dwB!.norm();\r\n                if (angle > this.maxResolveRotationAngle) {\r\n                    collision.dwB!.mulfs(this.maxResolveRotationAngle / angle);\r\n                }\r\n                collision.dvB = vec4Pool.pop().copy(normal).mulfs(depthDivTotalInvs * b!.invMass);\r\n                if (!isFinite(angle + collision.dvB.norm1() + collision.dwB!.norm1() + b!.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvB,dwB in resolvePosition\");\r\n                }\r\n                b!.position.adds(collision.dvB);\r\n                let r = rotorPool.pop().expset(collision.dwB!);\r\n                b!.rotation.mulsl(r); r.pushPool();\r\n                if (!isFinite(b!.rotation.l.norm() + b!.rotation.r.norm() + b!.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvB,dwB in resolvePosition\");\r\n                }\r\n            }\r\n            // collision.depth = 0;\r\n            this.updateDepths(collision);\r\n        }\r\n    }\r\n    updateDepths(collision: PreparedCollision) {\r\n        for (let c of this.collisionList) {\r\n            if (collision.a.mass! > 0) {\r\n                if (c.a === collision.a) {\r\n                    this.updateDepth(c, true, c.a, collision.dvA!, collision.dwA!);\r\n                } else if (c.b === collision.a) {\r\n                    this.updateDepth(c, false, c.b, collision.dvA!, collision.dwA!);\r\n                }\r\n            }\r\n            if (collision.b?.mass! > 0) {\r\n                if (c.a === collision.b) {\r\n                    this.updateDepth(c, true, c.a, collision.dvB!, collision.dwB!);\r\n                } else if (c.b === collision.b) {\r\n                    this.updateDepth(c, false, c.b!, collision.dvB!, collision.dwB!);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateDepth(collision: PreparedCollision, rigidIsA: boolean, rigid: Rigid, dv: Vec4, dw: Bivec) {\r\n        if (collision.pointConstrain) {\r\n            let a = collision.normal.copy(collision.pointConstrain.pointA).rotates(collision.a.rotation).adds(collision.a.position);\r\n            if (collision.b) {\r\n                let b = vec4Pool.pop().copy(collision.pointConstrain.pointB).rotates(collision.b.rotation).adds(collision.b.position);\r\n                a.subs(b); b.pushPool();\r\n            } else {\r\n                a.subs(collision.pointConstrain.pointB);\r\n            }\r\n            collision.depth = a.norm();\r\n            collision.normal.norms();\r\n        } else {\r\n            let a = vec4Pool.pop().subset(collision.point, rigid.position);\r\n            let dd = a.dotbsr(dw).adds(dv).dot(collision.normal);\r\n            console.assert(isFinite(a.norm1()), \"Numeric error in Collision solver updateDepth\");\r\n            collision.depth += rigidIsA ? dd : -dd;\r\n            a.pushPool();\r\n        }\r\n    }\r\n}\r\nlet _vec4x = new Vec4;\r\nlet _vec4y = new Vec4;\r\nlet _vec4z = new Vec4;\r\nlet _vec4w = new Vec4;\r\nlet _biv = new Bivec;\r\nlet _mat4r = new Mat4;\r\n\r\nfunction calcDeltaVWByImpulse(outV: Vec4, outW: Bivec, rigid: Rigid, localPoint: Vec4, impulse: Vec4) {\r\n    outV.copy(impulse).mulfs(rigid.invMass);\r\n    _vec4x.copy(impulse).rotatesconj(rigid.rotation);\r\n    mulBivec(outW, outW.wedgevvset(localPoint, _vec4x), rigid.invInertia!).rotates(rigid.rotation);\r\n};\r\nfunction applyImpulseAndGetDeltaVW(outV: Vec4, outW: Bivec, rigid: Rigid, localPoint: Vec4, impulse: Vec4) {\r\n    calcDeltaVWByImpulse(outV, outW, rigid, localPoint, impulse);\r\n    { console.assert(isFinite(outV.norm1() + outW.norm1()), \"A numeric error occured in Rigid collision solver: outV, outW in applyImpulseAndGetDeltaVW\"); }\r\n    rigid.velocity.adds(outV);\r\n    rigid.angularVelocity.adds(outW);\r\n    if (!isFinite(rigid.velocity.norm1() + rigid.angularVelocity.norm1())) { console.error(\"A numeric error occured in Rigid collision solver: rigid velocity in applyImpulseAndGetDeltaVW\"); }\r\n}\r\n/** calculate transfer matrix between impulse applying at src position and response delta velocity at dst position\r\n *  src and dst are in rigid's local frame\r\n */\r\nfunction calcImpulseResponseMat(out: Mat4, rigid: Rigid, src: Vec4, dst: Vec4) {\r\n    let ii = rigid.invInertia!;\r\n    // calculate relativePos cross base vectors and get angular part\r\n    _vec4x.dotbset(dst, _biv.set(-src.y * ii.xy, -src.z * ii.xz, -src.w * ii.xw));\r\n    _vec4y.dotbset(dst, _biv.set(src.x * ii.xy, 0, 0, -src.z * ii.yz, -src.w * ii.yw));\r\n    _vec4z.dotbset(dst, _biv.set(0, src.x * ii.xz, 0, src.y * ii.yz, 0, -src.w * ii.zw));\r\n    _vec4w.dotbset(dst, _biv.set(0, 0, src.x * ii.xw, 0, src.y * ii.yw, src.z * ii.zw));\r\n    out.augVec4set(_vec4x, _vec4y, _vec4z, _vec4w);\r\n    // add linear part (add a diagonal matrix inline)\r\n    out.elem[0] += rigid.invMass;\r\n    out.elem[5] += rigid.invMass;\r\n    out.elem[10] += rigid.invMass;\r\n    out.elem[15] += rigid.invMass;\r\n    _mat4r.setFromRotor(rigid.rotation);\r\n    // convert matrix to world frame by Mworld <= R Mlocal R'\r\n    return out.mulsl(_mat4r).mulsr(_mat4r.ts());\r\n}","import { Bivec } from \"../math/algebra/bivec\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { BoundingGlomeBroadPhase, BroadPhase, BroadPhaseConstructor } from \"./broadPhase\";\r\nimport { Force, ForceAccumulator, ForceAccumulatorConstructor, force_accumulator } from \"./forces\";\r\nimport { NarrowPhase } from \"./narrowphase\";\r\nimport { rigid, Rigid } from \"./rigid\";\r\nimport { IterativeImpulseSolver, Solver, SolverConstructor } from \"./solver\";\r\n\r\ninterface EngineOption {\r\n    forceAccumulator?: ForceAccumulatorConstructor;\r\n    broadPhase?: BroadPhaseConstructor;\r\n    solver?: SolverConstructor;\r\n    substep?: number;\r\n}\r\nexport class Engine {\r\n    forceAccumulator: ForceAccumulator;\r\n    broadPhase: BroadPhase;\r\n    narrowPhase: NarrowPhase;\r\n    solver: Solver;\r\n    substep: number;\r\n    constructor(option?: EngineOption) {\r\n        this.forceAccumulator = new (option?.forceAccumulator ?? force_accumulator.Predict3)();\r\n        this.broadPhase = new (option?.broadPhase ?? BoundingGlomeBroadPhase)();\r\n        this.narrowPhase = new NarrowPhase();\r\n        this.solver = new (option?.solver ?? IterativeImpulseSolver)();\r\n        this.substep = option?.substep ?? 1;\r\n    }\r\n    update(world: World, dt: number) {\r\n        dt /= this.substep;\r\n        for (let i = 0; i < this.substep; i++) {\r\n            this.step(world, dt);\r\n        }\r\n    }\r\n    step(world: World, dt: number) {\r\n        this.forceAccumulator.run(world, dt);\r\n        world.updateUnionGeometriesCoord();\r\n        this.broadPhase.run(world);\r\n        this.narrowPhase.run(this.broadPhase.checkList);\r\n        this.solver.run(this.narrowPhase.collisionList, world.constrains);\r\n        world.updateUnionGeometriesCoord();\r\n    }\r\n}\r\nexport class World {\r\n    gravity = new Vec4(0, -9.8);\r\n    rigids: Rigid[] = [];\r\n    constrains: Constrain[] = [];\r\n    unionRigids: rigid.Union[] = [];\r\n    forces: Force[] = [];\r\n    time: number = 0;\r\n    add(...args: (Rigid | Force | Constrain)[]) {\r\n        for (let o of args) {\r\n            if (o instanceof Rigid) {\r\n                this.rigids.push(o);\r\n                if (o.geometry instanceof rigid.Union) {\r\n                    this.unionRigids.push(o.geometry);\r\n                }\r\n                continue;\r\n            }\r\n            if (o instanceof Force) {\r\n                this.forces.push(o); continue;\r\n            }\r\n            if (o instanceof Constrain) {\r\n                this.constrains.push(o); continue;\r\n            }\r\n        }\r\n    }\r\n    remove(o: Rigid | Force) {\r\n        if (o instanceof Rigid) {\r\n            let index = this.rigids.indexOf(o);\r\n            if (index !== -1) {\r\n                this.rigids.splice(index, 1);\r\n                if (o.geometry instanceof rigid.Union) {\r\n                    let index = this.unionRigids.indexOf(o.geometry);\r\n                    if (index !== -1) {\r\n                        this.unionRigids.splice(index, 1);\r\n                    } else {\r\n                        console.warn(\"Union Rigid geometry is removed before rigid\");\r\n                    }\r\n                }\r\n            } else {\r\n                console.warn(\"Cannot remove a non-existed child\");\r\n            }\r\n        }\r\n        if (o instanceof Force) {\r\n            let index = this.forces.indexOf(o);\r\n            if (index !== -1) {\r\n                this.forces.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    }\r\n    updateUnionGeometriesCoord() {\r\n        for (let r of this.unionRigids) {\r\n            r.updateCoord();\r\n        }\r\n    }\r\n}\r\nexport class Material {\r\n    friction: number;\r\n    restitution: number;\r\n    constructor(friction: number, restitution: number) {\r\n        this.restitution = restitution;\r\n        this.friction = friction;\r\n    }\r\n    static getContactMaterial(a: Material, b: Material) {\r\n        return { restitution: a.restitution * b.restitution, friction: a.friction * b.friction };\r\n    }\r\n}\r\n/** a helper function for applying inertia to bivec */\r\nexport function mulBivec(self: Bivec, a: Bivec, b: Bivec) {\r\n    return self.set(\r\n        a.xy * b.xy,\r\n        a.xz * b.xz,\r\n        a.xw * b.xw,\r\n        a.yz * b.yz,\r\n        a.yw * b.yw,\r\n        a.zw * b.zw,\r\n    );\r\n}\r\nexport class Constrain {\r\n    a: Rigid;\r\n    b: Rigid | undefined;\r\n    constructor(a: Rigid, b?: Rigid | undefined) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n}\r\nexport class PointConstrain extends Constrain {\r\n    pointA: Vec4;\r\n    pointB: Vec4;\r\n    constructor(a: Rigid, b: Rigid | undefined, pointA: Vec4, pointB: Vec4) {\r\n        super(a, b); this.pointA = pointA; this.pointB = pointB;\r\n    }\r\n}","import { GPU } from \"./gpu\";\r\nexport type Size3DDict = { width: number, height: number, depth: number };\r\nfunction toSize3DDict(size: GPUExtent3D): Size3DDict {\r\n    let width: number, height: number, depth: number;\r\n    if ((size as GPUExtent3DDict).width) {\r\n        width = (size as GPUExtent3DDict).width;\r\n        height = (size as GPUExtent3DDict).height;\r\n        depth = (size as GPUExtent3DDict).depthOrArrayLayers;\r\n    } else {\r\n        width = size[0];\r\n        height = size[1];\r\n        depth = size[2];\r\n    }\r\n    return { width, height, depth };\r\n}\r\nexport interface VoxelBuffer {\r\n    buffer: GPUBuffer,\r\n    header?: ArrayBuffer,\r\n    width: number, height: number, depth: number, length: number, formatSize: number,\r\n}\r\nexport function createVoxelBuffer(\r\n    gpu: GPU, size: GPUExtent3D, formatSize: number,\r\n    header?: ArrayBuffer, headerSize?: number\r\n) {\r\n    let device = gpu.device;\r\n    let { width, height, depth } = toSize3DDict(size);\r\n    let length = width * height * depth;\r\n    headerSize ??= header?.byteLength ?? 0;\r\n    let buffer = device.createBuffer({\r\n        size: (4 + length * formatSize) * 4 + headerSize,\r\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n        mappedAtCreation: true,\r\n        label: `VoxelBuffer<${width},${height},${depth},${formatSize}`\r\n    });\r\n    let gpuBuffer = buffer.getMappedRange(0, headerSize + 16);\r\n    let jsBuffer = new Uint32Array(gpuBuffer);\r\n    jsBuffer.set([width, height, depth, formatSize]);\r\n    if (header) {\r\n        let headerBuffer = new Uint32Array(header);\r\n        jsBuffer.set(headerBuffer, 4);\r\n    }\r\n    buffer.unmap();\r\n    return { buffer, width, height, depth, length, formatSize, header };\r\n}","import { Obj4 } from \"../math/algebra/affine\";\r\nimport { Bivec } from \"../math/algebra/bivec\";\r\nimport { Mat4 } from \"../math/algebra/mat4\";\r\nimport { Quaternion } from \"../math/algebra/quaternion\";\r\nimport { Rotor } from \"../math/algebra/rotor\";\r\nimport { Vec2 } from \"../math/algebra/vec2\";\r\nimport { Vec3 } from \"../math/algebra/vec3\";\r\nimport { Vec4 } from \"../math/algebra/vec4\";\r\nimport { _360, _DEG2RAD } from \"../math/const\";\r\nimport { EyeOffset, SectionConfig, SliceConfig, SliceFacing, SliceRenderer } from \"../render/slice\";\r\n\r\nexport interface IController {\r\n    update(state: ControllerState): void;\r\n    enabled: boolean;\r\n}\r\ninterface ControllerConfig {\r\n    preventDefault?: boolean;\r\n    enablePointerLock?: boolean;\r\n}\r\ninterface KeyConfig {\r\n    enable?: string;\r\n    disable?: string;\r\n}\r\nexport interface ControllerState {\r\n    currentKeys: Map<String, KeyState>;\r\n    /** holded mouse button */\r\n    currentBtn: number;\r\n    /** pressed mouse button */\r\n    mouseDown: number;\r\n    /** released mouse button */\r\n    mouseUp: number;\r\n    updateCount: number;\r\n    moveX: number;\r\n    moveY: number;\r\n    wheelX: number;\r\n    wheelY: number;\r\n    lastUpdateTime?: number;\r\n    mspf: number;\r\n    requestPointerLock: () => void;\r\n    enablePointerLock?: boolean;\r\n    /** PointerLock has been triggered by the mouse */\r\n    isPointerLockedMouseDown?: boolean;\r\n    /** PointerLock has been canceled by key escape */\r\n    isPointerLockEscaped?: boolean;\r\n    /** code:\r\n     *  'KeyA' for holding Key A\r\n     *  '.KeyA' for pressing Key A \r\n     *  'ControlLeft+.KeyA' for press A while holding CtrlLeft*/\r\n    isKeyHold: (code: string) => boolean;\r\n    /** query whether controller disabled by config, disable / enable keys */\r\n    queryDisabled: (config: KeyConfig) => boolean;\r\n    isPointerLocked: () => boolean;\r\n    exitPointerLock: () => void;\r\n}\r\nexport enum KeyState {\r\n    NONE,\r\n    UP,\r\n    HOLD,\r\n    DOWN,\r\n}\r\nexport class ControllerRegistry {\r\n    dom: HTMLElement;\r\n    ctrls: Iterable<IController>;\r\n    enablePointerLock: boolean;\r\n    readonly states: ControllerState = {\r\n        currentKeys: new Map(),\r\n        isPointerLockedMouseDown: false,\r\n        isPointerLockEscaped: false,\r\n        currentBtn: -1,\r\n        mouseDown: -1,\r\n        mouseUp: -1,\r\n        updateCount: 0,\r\n        moveX: 0,\r\n        moveY: 0,\r\n        wheelX: 0,\r\n        wheelY: 0,\r\n        mspf: -1,\r\n\r\n        isKeyHold: (_) => false,\r\n        queryDisabled: (_) => false,\r\n        requestPointerLock: () => false,\r\n        isPointerLocked: () => false,\r\n        exitPointerLock: () => { }\r\n    }\r\n    /** if this is true, prevent default will not work  */\r\n    disableDefaultEvent = false;\r\n    private prevIsPointerLocked = false;\r\n    private evMouseDown: (ev: MouseEvent) => any;\r\n    private evMouseUp: (ev: MouseEvent) => any;\r\n    private evMouseMove: (ev: MouseEvent) => any;\r\n    private evWheel: (ev: WheelEvent) => any;\r\n    private evKeyUp: (ev: KeyboardEvent) => any;\r\n    private evKeyDown: (ev: KeyboardEvent) => any;\r\n    private evContextMenu: (ev: MouseEvent) => any;\r\n    constructor(dom: HTMLElement, ctrls: Iterable<IController>, config?: ControllerConfig) {\r\n        this.dom = dom;\r\n        dom.tabIndex = 1;\r\n        this.ctrls = ctrls;\r\n        this.enablePointerLock = config?.enablePointerLock ?? false;\r\n        this.states.isKeyHold = (code) => {\r\n            for (let key of code.split(\"+\")) {\r\n                if (key[0] === '.') {\r\n                    let state = this.states.currentKeys.get(key.slice(1));\r\n                    if (state !== KeyState.DOWN) return false;\r\n                } else {\r\n                    let state = this.states.currentKeys.get(key);\r\n                    if (!state || state === KeyState.UP) return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        this.states.queryDisabled = (config) => {\r\n            return this.states.isKeyHold(config.disable) || (config.enable && !this.states.isKeyHold(config.enable));\r\n        }\r\n        this.states.isPointerLocked = () => {\r\n            return ((!this.states.isPointerLockedMouseDown) && document.pointerLockElement === this.dom);\r\n        }\r\n        this.states.exitPointerLock = () => {\r\n            if (document.pointerLockElement === this.dom) {\r\n                document.exitPointerLock();\r\n                // if we exit positively, then don't trigger isPointerLockEscaped in the next update\r\n                this.prevIsPointerLocked = false;\r\n            }\r\n        }\r\n        this.states.requestPointerLock = () => {\r\n            if (document.pointerLockElement !== dom) {\r\n                dom.requestPointerLock();\r\n            }\r\n        }\r\n\r\n        // regist events\r\n\r\n        this.evMouseDown = (ev) => {\r\n            if (this.enablePointerLock && document.pointerLockElement !== dom) {\r\n                dom.requestPointerLock();\r\n                this.states.isPointerLockedMouseDown = true;\r\n            } else {\r\n                dom.focus();\r\n            }\r\n            this.states.currentBtn = ev.button;\r\n            this.states.moveX = 0;\r\n            this.states.moveY = 0;\r\n            this.states.mouseDown = ev.button;\r\n            if (ev.altKey === false) {\r\n                this.states.currentKeys.set(\"AltLeft\", KeyState.NONE);\r\n                this.states.currentKeys.set(\"AltRight\", KeyState.NONE);\r\n            }\r\n            // left click should not be prevented, otherwise keydown event can't obtain focus\r\n            if (ev.button === 1 && config?.preventDefault === true) {\r\n                ev.preventDefault();\r\n                ev.stopPropagation();\r\n            }\r\n        };\r\n        this.evMouseMove = (ev) => {\r\n            this.states.moveX += ev.movementX;\r\n            this.states.moveY += ev.movementY;\r\n        };\r\n        this.evMouseUp = (ev) => {\r\n            this.states.currentBtn = -1;\r\n            this.states.mouseUp = ev.button;\r\n        };\r\n        this.evKeyDown = (ev) => {\r\n            let prevState = this.states.currentKeys.get(ev.code);\r\n            this.states.currentKeys.set(ev.code, prevState === KeyState.HOLD ? KeyState.HOLD : KeyState.DOWN);\r\n            if (ev.altKey === false) {\r\n                this.states.currentKeys.set(\"AltLeft\", KeyState.NONE);\r\n                this.states.currentKeys.set(\"AltRight\", KeyState.NONE);\r\n            }\r\n            if (this.disableDefaultEvent) {\r\n                ev.preventDefault();\r\n                ev.stopPropagation();\r\n            }\r\n        };\r\n        this.evKeyUp = (ev) => {\r\n            this.states.currentKeys.set(ev.code, KeyState.UP);\r\n            if (this.disableDefaultEvent) {\r\n                ev.preventDefault();\r\n                ev.stopPropagation();\r\n            }\r\n        };\r\n        this.evWheel = (ev) => {\r\n            this.states.wheelX = ev.deltaX;\r\n            this.states.wheelY = ev.deltaY;\r\n        };\r\n        dom.addEventListener(\"mousedown\", this.evMouseDown);\r\n        dom.addEventListener(\"mousemove\", this.evMouseMove);\r\n        dom.addEventListener(\"mouseup\", this.evMouseUp);\r\n        dom.addEventListener(\"keydown\", this.evKeyDown);\r\n        dom.addEventListener(\"keyup\", this.evKeyUp);\r\n        dom.addEventListener(\"wheel\", this.evWheel);\r\n        if (config?.preventDefault === true) {\r\n            this.evContextMenu = (ev) => {\r\n                if (!this.disableDefaultEvent) {\r\n                    ev.preventDefault();\r\n                    ev.stopPropagation();\r\n                }\r\n            };\r\n            dom.addEventListener(\"contextmenu\", this.evContextMenu);\r\n        }\r\n    }\r\n    unregist() {\r\n        this.dom.removeEventListener(\"mousedown\", this.evMouseDown);\r\n        this.dom.removeEventListener(\"mousemove\", this.evMouseMove);\r\n        this.dom.removeEventListener(\"mouseup\", this.evMouseUp);\r\n        this.dom.removeEventListener(\"keydown\", this.evKeyDown);\r\n        this.dom.removeEventListener(\"keyup\", this.evKeyUp);\r\n        this.dom.removeEventListener(\"wheel\", this.evWheel);\r\n        if (this.evContextMenu) this.dom.removeEventListener(\"contextmenu\", this.evContextMenu);\r\n    }\r\n    update() {\r\n        this.states.enablePointerLock = this.enablePointerLock;\r\n        this.states.isPointerLockEscaped = this.prevIsPointerLocked && !this.states.isPointerLocked();\r\n        if (!this.states.lastUpdateTime) {\r\n            this.states.mspf = 16.667;\r\n            let now = new Date().getTime();\r\n            this.states.lastUpdateTime = now;\r\n        } else {\r\n            let now = new Date().getTime();\r\n            this.states.mspf = now - this.states.lastUpdateTime;\r\n            this.states.lastUpdateTime = now;\r\n        }\r\n        for (let c of this.ctrls) {\r\n            if (c.enabled) c.update(this.states);\r\n        }\r\n        this.states.mouseDown = -1;\r\n        this.states.mouseUp = -1;\r\n        this.states.moveX = 0;\r\n        this.states.moveY = 0;\r\n        this.states.wheelX = 0;\r\n        this.states.wheelY = 0;\r\n        this.states.updateCount++;\r\n        this.states.isPointerLockedMouseDown = false;\r\n        this.prevIsPointerLocked = this.states.isPointerLocked();\r\n        for (let [key, prevState] of this.states.currentKeys) {\r\n            let newState = prevState;\r\n            if (prevState === KeyState.DOWN) {\r\n                newState = KeyState.HOLD;\r\n            } else if (prevState === KeyState.UP) {\r\n                newState = KeyState.NONE;\r\n            }\r\n            this.states.currentKeys.set(key, newState);\r\n        }\r\n    }\r\n}\r\nexport class TrackBallController implements IController {\r\n    enabled = true;\r\n    object = new Obj4(Vec4.w.neg());\r\n    mouseSpeed = 0.01;\r\n    wheelSpeed = 0.0001;\r\n    damp = 0.1;\r\n    mouseButton3D = 0;\r\n    mouseButtonRoll = 1;\r\n    mouseButton4D = 2;\r\n    /** how many update cycles (2^n) to normalise rotor to avoid accuracy problem */\r\n    normalisePeriodBit: 4;\r\n    keyConfig = {\r\n        disable: \"AltLeft\",\r\n        enable: \"\",\r\n    }\r\n    private _bivec = new Bivec();\r\n    private normalisePeriodMask = 15;\r\n    constructor(object?: Obj4) {\r\n        if (object) this.object = object;\r\n    }\r\n    update(state: ControllerState) {\r\n        let disabled = state.queryDisabled(this.keyConfig);\r\n        let dampFactor = Math.exp(-this.damp * Math.min(200.0, state.mspf));\r\n        if (!disabled) {\r\n            let dx = state.moveX * this.mouseSpeed;\r\n            let dy = -state.moveY * this.mouseSpeed;\r\n            let wy = state.wheelY * this.wheelSpeed;\r\n            switch (state.currentBtn) {\r\n                case this.mouseButton3D:\r\n                    this._bivec.set(0, dx, 0, dy);\r\n                    break;\r\n                case this.mouseButtonRoll:\r\n                    this._bivec.set(dx, 0, 0, 0, 0, dy);\r\n                    break;\r\n                case this.mouseButton4D:\r\n                    this._bivec.set(0, 0, dx, 0, dy);\r\n                    break;\r\n                default:\r\n                    this._bivec.mulfs(dampFactor);\r\n            }\r\n            this.object.position.mulfs(1 + wy);\r\n        } else {\r\n            this._bivec.mulfs(dampFactor);\r\n        }\r\n        this.object.rotates(this._bivec.exp());\r\n        if ((state.updateCount & this.normalisePeriodMask) === 0) {\r\n            this.object.rotation.norms();\r\n        }\r\n    }\r\n    lookAtCenter() {\r\n        // todo\r\n    }\r\n}\r\nexport class FreeFlyController implements IController {\r\n    enabled = true;\r\n    object = new Obj4();\r\n    mouseSpeed = 0.01;\r\n    wheelSpeed = 0.0005;\r\n    keyMoveSpeed = 0.001;\r\n    keyRotateSpeed = 0.001;\r\n    damp = 0.01;\r\n    constructor(object?: Obj4) {\r\n        if (object) this.object = object;\r\n    }\r\n    keyConfig = {\r\n        front: \"KeyW\",\r\n        back: \"KeyS\",\r\n        left: \"KeyA\",\r\n        right: \"KeyD\",\r\n        ana: \"KeyQ\",\r\n        kata: \"KeyE\",\r\n        up: \"Space\",\r\n        down: \"ShiftLeft\",\r\n        turnLeft: \"KeyJ\",\r\n        turnRight: \"KeyL\",\r\n        turnAna: \"KeyU\",\r\n        turnKata: \"KeyO\",\r\n        turnUp: \"KeyI\",\r\n        turnDown: \"KeyK\",\r\n        spinCW: \"KeyZ\",\r\n        spinCCW: \"KeyX\",\r\n        disable: \"AltLeft\",\r\n        enable: \"\",\r\n    }\r\n    /** how many update cycles (2^n) to normalise rotor to avoid accuracy problem */\r\n    normalisePeriodBit: 4;\r\n    private _bivec = new Bivec();\r\n    private _bivecKey = new Bivec();\r\n    private _moveVec = new Vec4();\r\n    private _vec = new Vec4();\r\n    private normalisePeriodMask = 15;\r\n\r\n    update(state: ControllerState) {\r\n        let on = state.isKeyHold;\r\n        let key = this.keyConfig;\r\n        let delta: number;\r\n        let dampFactor = Math.exp(-this.damp * Math.min(200.0, state.mspf));\r\n        let disabled = state.queryDisabled(this.keyConfig);\r\n        if (!disabled) {\r\n\r\n            let keyRotateSpeed = this.keyRotateSpeed * state.mspf;\r\n            delta = (on(key.spinCW) ? -1 : 0) + (on(key.spinCCW) ? 1 : 0);\r\n            if (delta) this._bivecKey.xz = delta * keyRotateSpeed;\r\n            delta = (on(key.turnLeft) ? -1 : 0) + (on(key.turnRight) ? 1 : 0);\r\n            if (delta) this._bivecKey.xw = delta * keyRotateSpeed;\r\n            delta = (on(key.turnUp) ? 1 : 0) + (on(key.turnDown) ? -1 : 0);\r\n            if (delta) this._bivecKey.yw = delta * keyRotateSpeed;\r\n            delta = (on(key.turnAna) ? -1 : 0) + (on(key.turnKata) ? 1 : 0);\r\n            if (delta) this._bivecKey.zw = delta * keyRotateSpeed;\r\n        }\r\n        this._bivec.copy(this._bivecKey);\r\n        this._bivecKey.mulfs(dampFactor);\r\n        if (!disabled) {\r\n            if ((state.enablePointerLock && state.isPointerLocked()) || (state.currentBtn = 0 && !state.enablePointerLock)) {\r\n                let dx = state.moveX * this.mouseSpeed;\r\n                let dy = -state.moveY * this.mouseSpeed;\r\n                this._bivec.xw += dx;\r\n                this._bivec.yw += dy;\r\n            }\r\n            if ((state.enablePointerLock && state.isPointerLocked()) || (!state.enablePointerLock)) {\r\n                let wx = state.wheelX * this.wheelSpeed;\r\n                let wy = state.wheelY * this.wheelSpeed;\r\n                this._bivec.xy += wx;\r\n                this._bivec.zw += wy;\r\n            }\r\n            let keyMoveSpeed = this.keyMoveSpeed * state.mspf;\r\n            delta = (on(key.left) ? -1 : 0) + (on(key.right) ? 1 : 0);\r\n            if (delta) this._moveVec.x = delta * keyMoveSpeed;\r\n            delta = (on(key.up) ? 1 : 0) + (on(key.down) ? -1 : 0);\r\n            if (delta) this._moveVec.y = delta * keyMoveSpeed;\r\n            delta = (on(key.ana) ? -1 : 0) + (on(key.kata) ? 1 : 0);\r\n            if (delta) this._moveVec.z = delta * keyMoveSpeed;\r\n            delta = (on(key.front) ? -1 : 0) + (on(key.back) ? 1 : 0);\r\n            if (delta) this._moveVec.w = delta * keyMoveSpeed;\r\n        }\r\n        // R A = R A R-1 R \r\n        this.object.rotation.mulsr(this._bivec.exp());\r\n        this.object.translates(this._vec.copy(this._moveVec).rotates(this.object.rotation));\r\n        this._moveVec.mulfs(dampFactor);\r\n        if ((state.updateCount & this.normalisePeriodMask) === 0) {\r\n            this.object.rotation.norms();\r\n        }\r\n    }\r\n}\r\nexport class KeepUpController implements IController {\r\n    enabled = true;\r\n    object = new Obj4();\r\n    mouseSpeed = 0.01;\r\n    wheelSpeed = 0.0001;\r\n    keyMoveSpeed = 0.001;\r\n    keyRotateSpeed = 0.001;\r\n    damp = 0.1;\r\n    keyConfig = {\r\n        front: \"KeyW\",\r\n        back: \"KeyS\",\r\n        left: \"KeyA\",\r\n        right: \"KeyD\",\r\n        ana: \"KeyQ\",\r\n        kata: \"KeyE\",\r\n        up: \"Space\",\r\n        down: \"ShiftLeft\",\r\n        turnLeft: \"KeyJ\",\r\n        turnRight: \"KeyL\",\r\n        turnAna: \"KeyU\",\r\n        turnKata: \"KeyO\",\r\n        turnUp: \"KeyI\",\r\n        turnDown: \"KeyK\",\r\n        spinCW: \"KeyZ\",\r\n        spinCCW: \"KeyX\",\r\n        disable: \"AltLeft\",\r\n        enable: \"\"\r\n    }\r\n    /** how many update cycles (2^n) to normalise rotor to avoid accuracy problem */\r\n    normalisePeriodBit: 4;\r\n    private _bivec = new Bivec();\r\n    private _bivec2 = new Bivec();\r\n    private _bivecKey = new Bivec();\r\n    private _moveVec = new Vec4();\r\n    private _vec = new Vec4();\r\n    private normalisePeriodMask = 15;\r\n    private horizontalRotor = new Rotor();\r\n    private verticalRotor = new Rotor();\r\n\r\n    constructor(object?: Obj4) {\r\n        if (object) this.object = object;\r\n        this.updateObj();\r\n    }\r\n    updateObj() {\r\n        // rotate obj's yw plane to world's y axis\r\n        this.object.rotates(Rotor.lookAtvb(Vec4.y, Bivec.yw.rotate(this.object.rotation)).conjs());\r\n        // now check angle between obj's y axis and world's y axis\r\n        let objY = Vec4.y.rotate(this.object.rotation);\r\n        let r = Rotor.lookAt(objY, Vec4.y);\r\n        this.horizontalRotor.copy(r.mul(this.object.rotation));\r\n        this.verticalRotor.copy(this.horizontalRotor.mul(r.conjs()).mulsrconj(this.horizontalRotor));\r\n    }\r\n    update(state: ControllerState) {\r\n        let on = state.isKeyHold;\r\n        let key = this.keyConfig;\r\n        let delta: number;\r\n        let dampFactor = Math.exp(-this.damp * Math.min(200.0, state.mspf));\r\n        let disabled = state.queryDisabled(this.keyConfig);\r\n        if (!disabled) {\r\n\r\n            let keyRotateSpeed = this.keyRotateSpeed * state.mspf;\r\n            delta = (on(key.spinCW) ? -1 : 0) + (on(key.spinCCW) ? 1 : 0);\r\n            if (delta) this._bivecKey.xz = delta * keyRotateSpeed;\r\n            delta = (on(key.turnLeft) ? -1 : 0) + (on(key.turnRight) ? 1 : 0);\r\n            if (delta) this._bivecKey.xw = delta * keyRotateSpeed;\r\n            delta = (on(key.turnUp) ? 1 : 0) + (on(key.turnDown) ? -1 : 0);\r\n            if (delta) this._bivecKey.yw = delta * keyRotateSpeed;\r\n            delta = (on(key.turnAna) ? -1 : 0) + (on(key.turnKata) ? 1 : 0);\r\n            if (delta) this._bivecKey.zw = delta * keyRotateSpeed;\r\n        }\r\n        this._bivec.xw = this._bivecKey.xw;\r\n        this._bivec.zw = this._bivecKey.zw;\r\n        if (!disabled) {\r\n            if ((state.enablePointerLock && state.isPointerLocked()) || (state.currentBtn === 0 && !state.enablePointerLock)) {\r\n                let dx = state.moveX * this.mouseSpeed;\r\n                let dy = state.moveY * this.mouseSpeed;\r\n                this._bivec.xw += dx;\r\n                this._bivec.zw += dy;\r\n            }\r\n            if ((state.enablePointerLock && state.isPointerLocked()) || (!state.enablePointerLock)) {\r\n                let wy = -state.wheelY * this.wheelSpeed;\r\n                this._bivecKey.yw += wy;\r\n            }\r\n        }\r\n        this._bivec.xz = this._bivecKey.xz;\r\n        this._bivec2.yw = this._bivecKey.yw;\r\n        // R A = R A R-1 R \r\n        this.horizontalRotor.mulsr(this._bivec.exp());\r\n        this.verticalRotor.mulsr(this._bivec2.exp());\r\n        if (!disabled) {\r\n            let keyMoveSpeed = this.keyMoveSpeed * state.mspf;\r\n            delta = (on(key.left) ? -1 : 0) + (on(key.right) ? 1 : 0);\r\n            if (delta) this._moveVec.x = delta * keyMoveSpeed;\r\n            delta = (on(key.up) ? 1 : 0) + (on(key.down) ? -1 : 0);\r\n            if (delta) this._moveVec.y = delta * keyMoveSpeed;\r\n            delta = (on(key.ana) ? -1 : 0) + (on(key.kata) ? 1 : 0);\r\n            if (delta) this._moveVec.z = delta * keyMoveSpeed;\r\n            delta = (on(key.front) ? -1 : 0) + (on(key.back) ? 1 : 0);\r\n            if (delta) this._moveVec.w = delta * keyMoveSpeed;\r\n        }\r\n        this.object.translates(this._vec.copy(this._moveVec).rotates(this.horizontalRotor));\r\n        this.object.rotation.copy(this.horizontalRotor.mul(this.verticalRotor));\r\n        this._moveVec.mulfs(dampFactor);\r\n        this._bivecKey.mulfs(dampFactor);\r\n        if ((state.updateCount & this.normalisePeriodMask) === 0) {\r\n            this.horizontalRotor.norms();\r\n            this.verticalRotor.norms();\r\n        }\r\n    }\r\n}\r\nexport class VoxelViewerController implements IController {\r\n    enabled = true;\r\n    object = new Obj4(Vec4.w.neg());\r\n    mouseSpeed = 0.01;\r\n    wheelSpeed = 0.0001;\r\n    damp = 0.1;\r\n    mousePan = 2;\r\n    mousePanZ = 1;\r\n    mouseRotate = 0;\r\n    /** how many update cycles (2^n) to normalise rotor to avoid accuracy problem */\r\n    normalisePeriodBit: 4;\r\n    keyConfig = {\r\n        disable: \"AltLeft\",\r\n        enable: \"\",\r\n    }\r\n    private _bivec = new Bivec();\r\n    private _vec = new Vec4();\r\n    private _wy = 0;\r\n    private normalisePeriodMask = 15;\r\n    constructor(object?: Obj4) {\r\n        if (object) this.object = object;\r\n    }\r\n    update(state: ControllerState) {\r\n        let disabled = state.queryDisabled(this.keyConfig);\r\n        let dampFactor = Math.exp(-this.damp * Math.min(200.0, state.mspf));\r\n        if (!disabled) {\r\n            let dx = state.moveX * this.mouseSpeed;\r\n            let dy = -state.moveY * this.mouseSpeed;\r\n            let wy = state.wheelY * this.wheelSpeed;\r\n            switch (state.currentBtn) {\r\n                case this.mousePan:\r\n                    this._vec.set(dx * this.object.scale!.x, dy * this.object.scale!.y).rotates(this.object.rotation)\r\n                    this._bivec.set();\r\n                    break;\r\n                case this.mousePanZ:\r\n                    this._vec.set(dx * this.object.scale!.x, 0, -dy * this.object.scale!.z).rotates(this.object.rotation);\r\n                    this._bivec.set();\r\n                    break;\r\n                case this.mouseRotate:\r\n                    this._bivec.set(0, dx, 0, dy);\r\n                    this._vec.set();\r\n                    break;\r\n                default:\r\n                    this._bivec.mulfs(dampFactor);\r\n                    this._vec.mulfs(dampFactor);\r\n            }\r\n            this.object.position.subs(this._vec);\r\n            this._wy = wy ? wy : this._wy * dampFactor;\r\n            if (this.object.scale) this.object.scale.mulfs(1 + this._wy);\r\n        } else {\r\n            this._bivec.mulfs(dampFactor);\r\n            this._vec.mulfs(dampFactor);\r\n            this._wy *= dampFactor;\r\n        }\r\n        this.object.rotation.mulsr(this._bivec.exp());\r\n        if ((state.updateCount & this.normalisePeriodMask) === 0) {\r\n            this.object.rotation.norms();\r\n        }\r\n    }\r\n}\r\ninterface SectionPreset {\r\n    retina: boolean,\r\n    eye1: SectionConfig[],\r\n    eye2: SectionConfig[]\r\n}\r\nexport namespace sliceconfig {\r\n\r\n    export function singlezslice1eye(screenSize: { width: number, height: number }): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let resolution = screenSize.height;\r\n        return [{\r\n            slicePos: 0,\r\n            facing: SliceFacing.POSZ,\r\n            viewport: { x: 0, y: 0, width: 1 / aspect, height: 1.0 },\r\n            resolution\r\n        }];\r\n\r\n    }\r\n    export function singlezslice2eye(screenSize: { width: number, height: number }): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let resolution = screenSize.height * 0.8;\r\n        return [{\r\n            slicePos: 0,\r\n            facing: SliceFacing.POSZ,\r\n            eyeOffset: EyeOffset.LeftEye,\r\n            viewport: { x: -0.5, y: 0, width: 0.5 / aspect, height: 0.8 },\r\n            resolution\r\n        }, {\r\n            slicePos: 0,\r\n            facing: SliceFacing.POSZ,\r\n            eyeOffset: EyeOffset.RightEye,\r\n            viewport: { x: 0.5, y: 0, width: 0.5 / aspect, height: 0.8 },\r\n            resolution\r\n        }];\r\n    }\r\n    export function singleyslice1eye(screenSize: { width: number, height: number }): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let resolution = screenSize.height;\r\n        return [{\r\n            slicePos: 0,\r\n            facing: SliceFacing.NEGY,\r\n            viewport: { x: 0, y: 0, width: 1 / aspect, height: 1.0 },\r\n            resolution\r\n        }];\r\n    }\r\n    export function singleyslice2eye(screenSize: { width: number, height: number }): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let resolution = screenSize.height * 0.8;\r\n        return [{\r\n            slicePos: 0,\r\n            facing: SliceFacing.NEGY,\r\n            eyeOffset: EyeOffset.LeftEye,\r\n            viewport: { x: -0.5, y: 0, width: 0.5 / aspect, height: 0.8 },\r\n            resolution\r\n        }, {\r\n            slicePos: 0,\r\n            facing: SliceFacing.NEGY,\r\n            eyeOffset: EyeOffset.RightEye,\r\n            viewport: { x: 0.5, y: 0, width: 0.5 / aspect, height: 0.8 },\r\n            resolution\r\n        }];\r\n    }\r\n    export function zslices1eye(\r\n        step: number, maxpos: number, screenSize: { width: number, height: number }\r\n    ): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let arr = [[0, 0]];\r\n        let j = 1;\r\n        for (let i = step; i <= maxpos; i += step, j++) {\r\n            arr.push([i, j]);\r\n            arr.push([-i, -j]);\r\n        }\r\n        let half = 2 / arr.length;\r\n        let size = 1 / (aspect * arr.length);\r\n        let resolution = screenSize.height * size;\r\n        return arr.map(pos => ({\r\n            slicePos: pos[0],\r\n            facing: SliceFacing.POSZ,\r\n            viewport: { x: pos[1] * half, y: size - 1, width: size, height: size },\r\n            resolution\r\n        }));\r\n    }\r\n    export function zslices2eye(\r\n        step: number, maxpos: number, screenSize: { width: number, height: number }\r\n    ): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let arr = [[0, 0]];\r\n        let j = 1;\r\n        for (let i = step; i <= maxpos; i += step, j++) {\r\n            arr.push([i, j]);\r\n            arr.push([-i, -j]);\r\n        }\r\n        arr.sort((a, b) => a[0] - b[0]);\r\n        let half = 1 / arr.length;\r\n        let size = 0.5 / (aspect * arr.length);\r\n        let resolution = screenSize.height * size;\r\n        return arr.map(pos => ({\r\n            slicePos: pos[0],\r\n            facing: SliceFacing.POSZ,\r\n            eyeOffset: EyeOffset.LeftEye,\r\n            viewport: { x: (pos[1] * half) - 0.5, y: size - 1, width: size, height: size },\r\n            resolution\r\n        })).concat(\r\n            arr.map(pos => ({\r\n                slicePos: pos[0],\r\n                facing: SliceFacing.POSZ,\r\n                eyeOffset: EyeOffset.RightEye,\r\n                viewport: { x: (pos[1] * half) + 0.5, y: size - 1, width: size, height: size },\r\n                resolution\r\n            }))\r\n        );\r\n    }\r\n\r\n    export function yslices1eye(\r\n        step: number, maxpos: number, screenSize: { width: number, height: number }\r\n    ): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let arr = [[0, 0]];\r\n        let j = 1;\r\n        for (let i = step; i <= maxpos; i += step, j++) {\r\n            arr.push([i, j]);\r\n            arr.push([-i, -j]);\r\n        }\r\n        let half = 2 / arr.length;\r\n        let size = 1 / (aspect * arr.length);\r\n        let resolution = screenSize.height * size;\r\n        return arr.map(pos => ({\r\n            slicePos: pos[0],\r\n            facing: SliceFacing.NEGY,\r\n            viewport: { x: pos[1] * half, y: size - 1, width: size, height: size },\r\n            resolution\r\n        }));\r\n    }\r\n    export function yslices2eye(\r\n        step: number, maxpos: number, screenSize: { width: number, height: number }\r\n    ): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let arr = [[0, 0]];\r\n        let j = 1;\r\n        for (let i = step; i <= maxpos; i += step, j++) {\r\n            arr.push([i, j]);\r\n            arr.push([-i, -j]);\r\n        }\r\n        arr.sort((a, b) => a[0] - b[0]);\r\n        let half = 1 / arr.length;\r\n        let size = 0.5 / (aspect * arr.length);\r\n        let resolution = screenSize.height * size;\r\n        return arr.map(pos => ({\r\n            slicePos: pos[0],\r\n            facing: SliceFacing.NEGY,\r\n            eyeOffset: EyeOffset.LeftEye,\r\n            viewport: { x: (pos[1] * half) - 0.5, y: size - 1, width: size, height: size },\r\n            resolution\r\n        })).concat(\r\n            arr.map(pos => ({\r\n                slicePos: pos[0],\r\n                facing: SliceFacing.NEGY,\r\n                eyeOffset: EyeOffset.RightEye,\r\n                viewport: { x: (pos[1] * half) + 0.5, y: size - 1, width: size, height: size },\r\n                resolution\r\n            }))\r\n        );\r\n    }\r\n    export function default2eye(\r\n        size: number, screenSize: { width: number, height: number }\r\n    ): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let resolution = screenSize.height * size;\r\n        let wsize: number;\r\n        let size_aspect: number;\r\n        if (size >= 0.5) {\r\n            wsize = 0.25 / aspect;\r\n            size_aspect = 0.25;\r\n            size = 0.5;\r\n        } else {\r\n            size_aspect = size * aspect;\r\n            wsize = size;\r\n        }\r\n        return [\r\n            {\r\n                facing: SliceFacing.NEGX,\r\n                eyeOffset: EyeOffset.LeftEye,\r\n                viewport: { x: -size_aspect, y: size - 1, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.NEGX,\r\n                eyeOffset: EyeOffset.RightEye,\r\n                viewport: { x: 1 - size_aspect, y: size - 1, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.NEGY,\r\n                eyeOffset: EyeOffset.LeftEye,\r\n                viewport: { x: -size_aspect, y: 1 - size, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.NEGY,\r\n                eyeOffset: EyeOffset.RightEye,\r\n                viewport: { x: 1 - size_aspect, y: 1 - size, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.POSZ,\r\n                eyeOffset: EyeOffset.LeftEye,\r\n                viewport: { x: size_aspect - 1, y: size - 1, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.POSZ,\r\n                eyeOffset: EyeOffset.RightEye,\r\n                viewport: { x: size_aspect, y: size - 1, width: wsize, height: size },\r\n                resolution\r\n            },\r\n        ];\r\n    };\r\n    export function default1eye(size: number, screenSize: { width: number, height: number }): SectionConfig[] {\r\n        let aspect = screenSize.height / screenSize.width;\r\n        let resolution = screenSize.height * size;\r\n        let wsize: number;\r\n        let size_aspect: number;\r\n        if (size >= 0.5) {\r\n            wsize = 0.5 / aspect;\r\n            size_aspect = 0.5;\r\n            size = 0.5;\r\n        } else {\r\n            size_aspect = size * aspect;\r\n            wsize = size;\r\n        }\r\n        return [\r\n            {\r\n                facing: SliceFacing.NEGX,\r\n                viewport: { x: 1 - size_aspect, y: size - 1, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.NEGY,\r\n                viewport: { x: 1 - size_aspect, y: 1 - size, width: wsize, height: size },\r\n                resolution\r\n            },\r\n            {\r\n                facing: SliceFacing.POSZ,\r\n                viewport: { x: size_aspect - 1, y: size - 1, width: wsize, height: size },\r\n                resolution\r\n            }\r\n        ];\r\n    }\r\n}\r\nexport class RetinaController implements IController {\r\n    enabled = true;\r\n    renderer: SliceRenderer;\r\n    mouseSpeed = 0.01;\r\n    wheelSpeed = 0.0005;\r\n    keyMoveSpeed = 0.1;\r\n    keyRotateSpeed = 0.002;\r\n    opacityKeySpeed = 0.01;\r\n    fovKeySpeed = 1;\r\n    damp = 0.02;\r\n    mouseButton = 0;\r\n    retinaEyeOffset = 0.1;\r\n    sectionEyeOffset = 0.2;\r\n    size: GPUExtent3DStrict;\r\n    sectionPresets: (screenSize: { width: number, height: number }) => { [label: string]: SectionPreset };\r\n    private currentSectionConfig: string = \"retina+sections\";\r\n    private rembemerLastLayers: number;\r\n    private needResize: boolean = true;\r\n    keyConfig = {\r\n        enable: \"AltLeft\",\r\n        disable: \"\",\r\n        addOpacity: \"KeyQ\",\r\n        subOpacity: \"KeyA\",\r\n        addLayer: \"KeyW\",\r\n        subLayer: \"KeyS\",\r\n        addRetinaResolution: \".KeyE\",\r\n        subRetinaResolution: \".KeyD\",\r\n        addFov: \"KeyT\",\r\n        subFov: \"KeyG\",\r\n        toggle3D: \".KeyZ\",\r\n        toggleCrosshair: \".KeyC\",\r\n        rotateLeft: \"ArrowLeft\",\r\n        rotateRight: \"ArrowRight\",\r\n        rotateUp: \"ArrowUp\",\r\n        rotateDown: \"ArrowDown\",\r\n        refaceFront: \".KeyR\",\r\n        sectionConfigs: {\r\n            \"retina+sections\": \".Digit1\",\r\n            \"retina+bigsections\": \".Digit2\",\r\n            \"retina\": \".Digit3\",\r\n            \"sections\": \".Digit4\",\r\n            \"zsection\": \".Digit5\",\r\n            \"ysection\": \".Digit6\",\r\n            \"retina+zslices\": \".Digit7\",\r\n            \"retina+yslices\": \".Digit8\",\r\n        },\r\n    }\r\n    constructor(r: SliceRenderer) {\r\n        this.renderer = r;\r\n        this.sectionPresets = (screenSize: {\r\n            width: number;\r\n            height: number;\r\n        }) => ({\r\n            \"retina+sections\": {\r\n                eye1: sliceconfig.default1eye(0.3, screenSize),\r\n                eye2: sliceconfig.default2eye(0.2, screenSize),\r\n                retina: true\r\n            },\r\n            \"retina+bigsections\": {\r\n                eye1: sliceconfig.default1eye(0.44, screenSize),\r\n                eye2: sliceconfig.default2eye(0.33, screenSize),\r\n                retina: true\r\n            },\r\n            \"retina\": {\r\n                eye1: [],\r\n                eye2: [],\r\n                retina: true\r\n            },\r\n            \"sections\": {\r\n                eye1: sliceconfig.default1eye(0.5, screenSize),\r\n                eye2: sliceconfig.default2eye(0.5, screenSize),\r\n                retina: false\r\n            },\r\n            \"retina+zslices\": {\r\n                eye1: sliceconfig.zslices1eye(0.15, 0.6, screenSize),\r\n                eye2: sliceconfig.zslices2eye(0.3, 0.6, screenSize),\r\n                retina: true\r\n            },\r\n            \"retina+yslices\": {\r\n                eye1: sliceconfig.yslices1eye(0.15, 0.6, screenSize),\r\n                eye2: sliceconfig.yslices2eye(0.3, 0.6, screenSize),\r\n                retina: true\r\n            },\r\n            \"zsection\": {\r\n                eye1: sliceconfig.singlezslice1eye(screenSize),\r\n                eye2: sliceconfig.singlezslice2eye(screenSize),\r\n                retina: false\r\n            },\r\n            \"ysection\": {\r\n                eye1: sliceconfig.singleyslice1eye(screenSize),\r\n                eye2: sliceconfig.singleyslice2eye(screenSize),\r\n                retina: false\r\n            },\r\n        });\r\n    }\r\n    private _vec2damp = new Vec2();\r\n    private _vec2euler = new Vec2();\r\n    private _vec3 = new Vec3();\r\n    private _q1 = new Quaternion();\r\n    private _q2 = new Quaternion();\r\n    private _mat4 = new Mat4();\r\n    private refacingFront: boolean = false;\r\n    private needsUpdateRetinaCamera: boolean = false;\r\n    private retinaFov: number = 40;\r\n    private retinaSize = 1.8;\r\n    private retinaZDistance = 5;\r\n    private crossHairSize = 0.03;\r\n    maxRetinaResolution = 1024;\r\n    update(state: ControllerState): void {\r\n        let disabled = state.queryDisabled(this.keyConfig);\r\n        let on = state.isKeyHold;\r\n        let key = this.keyConfig;\r\n        let delta: number;\r\n        let sliceConfig: SliceConfig = {};\r\n        if (!disabled && state.isKeyHold(this.keyConfig.toggle3D)) {\r\n            let stereo = this.renderer.getStereoMode();\r\n            if (stereo) {\r\n                this.renderer.setEyeOffset(0, 0);\r\n            } else {\r\n                this.renderer.setEyeOffset(this.sectionEyeOffset, this.retinaEyeOffset);\r\n            }\r\n            sliceConfig.sections = this.sectionPresets(this.renderer.getSize())[this.currentSectionConfig][(\r\n                !stereo ? \"eye2\" : \"eye1\"\r\n            )];\r\n        } else if (this.needResize) {\r\n            sliceConfig.sections = this.sectionPresets(this.renderer.getSize())[this.currentSectionConfig][(\r\n                this.renderer.getStereoMode() ? \"eye2\" : \"eye1\"\r\n            )];\r\n        }\r\n        if (!disabled) {\r\n            this.needResize = false;\r\n            if (state.isKeyHold(this.keyConfig.toggleCrosshair)) {\r\n                let crossHair = this.renderer.getCrosshair();\r\n                this.renderer.setCrosshair(crossHair === 0 ? this.crossHairSize : 0);\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.addOpacity)) {\r\n                this.renderer.setOpacity(this.renderer.getOpacity() * (1 + this.opacityKeySpeed));\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.subOpacity)) {\r\n                this.renderer.setOpacity(this.renderer.getOpacity() / (1 + this.opacityKeySpeed));\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.addLayer)) {\r\n                let layers = this.renderer.getLayers();\r\n                if (layers > 32 || ((state.updateCount & 3) && (layers > 16 || (state.updateCount & 7)))) {\r\n                    layers++;\r\n                }\r\n                if (layers > 512) layers = 512;\r\n                sliceConfig.layers = layers;\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.subLayer)) {\r\n                // when < 32, we slow down layer speed\r\n                let layers = this.renderer.getLayers();\r\n                if (layers > 32 || ((state.updateCount & 3) && (layers > 16 || (state.updateCount & 7)))) {\r\n                    if (layers > 0) layers--;\r\n\r\n                    sliceConfig.layers = layers;\r\n                }\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.addRetinaResolution)) {\r\n                let res = this.renderer.getRetinaResolution();\r\n                res += this.renderer.getMinResolutionMultiple();\r\n                if (res <= this.maxRetinaResolution) sliceConfig.retinaResolution = res;\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.subRetinaResolution)) {\r\n                let res = this.renderer.getRetinaResolution();\r\n                res -= this.renderer.getMinResolutionMultiple();\r\n                if (res > 0) sliceConfig.retinaResolution = res;\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.addFov)) {\r\n                this.retinaFov += this.fovKeySpeed;\r\n                if (this.retinaFov > 120) this.retinaFov = 120;\r\n                this.needsUpdateRetinaCamera = true;\r\n            }\r\n            if (state.isKeyHold(this.keyConfig.subFov)) {\r\n                this.retinaFov -= this.fovKeySpeed;\r\n                if (this.retinaFov < 0.1) this.retinaFov = 0;\r\n                this.needsUpdateRetinaCamera = true;\r\n            }\r\n            for (let [label, keyCode] of Object.entries(this.keyConfig.sectionConfigs)) {\r\n                if (state.isKeyHold(keyCode)) {\r\n                    this.toggleSectionConfig(label);\r\n                }\r\n            }\r\n            delta = (on(key.rotateDown) ? -1 : 0) + (on(key.rotateUp) ? 1 : 0);\r\n            let keyRotateSpeed = this.keyRotateSpeed * state.mspf;\r\n            if (delta) this._vec2damp.y = delta * keyRotateSpeed;\r\n            delta = (on(key.rotateLeft) ? 1 : 0) + (on(key.rotateRight) ? -1 : 0);\r\n            if (delta) this._vec2damp.x = delta * keyRotateSpeed;\r\n            if (state.currentBtn === this.mouseButton) {\r\n                this.refacingFront = false;\r\n                if (state.moveX) this._vec2damp.x = state.moveX * this.mouseSpeed;\r\n                if (state.moveY) this._vec2damp.y = state.moveY * this.mouseSpeed;\r\n            }\r\n            if (state.wheelY) {\r\n                this.needsUpdateRetinaCamera = true;\r\n                this.retinaSize += state.wheelY * this.wheelSpeed;\r\n            }\r\n            if (on(key.refaceFront)) {\r\n                this.refacingFront = true;\r\n            }\r\n        }\r\n        if (this._vec2damp.norm1() < 1e-3 || this.refacingFront) {\r\n            this._vec2damp.set(0, 0);\r\n        }\r\n        if (this._vec2damp.norm1() > 1e-3 || this.refacingFront || this.needsUpdateRetinaCamera) {\r\n            if (this.needsUpdateRetinaCamera) {\r\n                if (this.retinaFov > 0) {\r\n                    this.retinaZDistance = this.retinaSize / Math.tan(this.retinaFov / 2 * _DEG2RAD);\r\n                    this.renderer.setRetinaProjectMatrix({\r\n                        fov: this.retinaFov,\r\n                        near: Math.max(0.01, this.retinaZDistance - 4),\r\n                        far: this.retinaZDistance + 4\r\n                    });\r\n                } else {\r\n                    this.retinaZDistance = 4;\r\n                    this.renderer.setRetinaProjectMatrix({\r\n                        size: this.retinaSize,\r\n                        near: 2,\r\n                        far: 8\r\n                    });\r\n                }\r\n            }\r\n            this.needsUpdateRetinaCamera = false;\r\n            this._vec2euler.x %= _360;\r\n            this._vec2euler.y %= _360;\r\n            let dampFactor = Math.exp(-this.damp * Math.min(200.0, state.mspf));\r\n            if (this.refacingFront) {\r\n                this._vec2euler.mulfs(dampFactor);\r\n                if (this._vec2euler.norm1() < 0.01) this.refacingFront = false;\r\n            }\r\n            this._vec2euler.adds(this._vec2damp);\r\n            let mat = this._mat4.setFrom3DRotation(this._q1.expset(this._vec3.set(0, this._vec2euler.x, 0)).mulsr(\r\n                this._q2.expset(this._vec3.set(this._vec2euler.y, 0, 0))\r\n            ).conjs());\r\n            mat.elem[11] = -this.retinaZDistance;\r\n            this.renderer.setRetinaViewMatrix(mat);\r\n            this._vec2damp.mulfs(dampFactor);\r\n        }\r\n        this.renderer.setSliceConfig(sliceConfig);\r\n    }\r\n    setStereo(stereo: boolean) {\r\n        if (!stereo) {\r\n            this.renderer.setEyeOffset(0, 0);\r\n        } else {\r\n            this.renderer.setEyeOffset(this.sectionEyeOffset, this.retinaEyeOffset);\r\n        }\r\n        let sections = this.sectionPresets(this.renderer.getSize())[this.currentSectionConfig][(\r\n            !stereo ? \"eye2\" : \"eye1\"\r\n        )];\r\n        this.renderer.setSliceConfig({ sections });\r\n    }\r\n    setSectionEyeOffset(offset: number) {\r\n        this.sectionEyeOffset = offset;\r\n        if (this.renderer.getStereoMode()) this.renderer.setEyeOffset(offset);\r\n    }\r\n    setRetinaEyeOffset(offset: number) {\r\n        this.retinaEyeOffset = offset;\r\n        if (this.renderer.getStereoMode()) this.renderer.setEyeOffset(null, offset);\r\n    }\r\n    setLayers(layers: number) {\r\n        this.renderer.setSliceConfig({ layers });\r\n    }\r\n    setOpacity(opacity: number) {\r\n        this.renderer.setOpacity(opacity);\r\n    }\r\n    setCrosshairSize(size: number) {\r\n        this.renderer.setCrosshair(size);\r\n        this.crossHairSize = size;\r\n    }\r\n    setRetinaResolution(retinaResolution: number) {\r\n        this.renderer.setSliceConfig({ retinaResolution });\r\n    }\r\n    setRetinaSize(size: number) {\r\n        this.retinaSize = size;\r\n        this.needsUpdateRetinaCamera = true;\r\n    }\r\n    setRetinaFov(fov: number) {\r\n        this.retinaFov = fov;\r\n        this.needsUpdateRetinaCamera = true;\r\n    }\r\n    toggleSectionConfig(index: string) {\r\n        if (this.currentSectionConfig === index) return;\r\n        let preset = this.sectionPresets(this.renderer.getSize())[index];\r\n        if (!preset) console.error(`Section Configuration \"${index}\" does not exsit.`);\r\n        let layers = this.renderer.getLayers();\r\n        if (preset.retina === false && layers > 0) {\r\n            this.rembemerLastLayers = layers;\r\n            layers = 0;\r\n        } else if (preset.retina === true && this.rembemerLastLayers) {\r\n            layers = this.rembemerLastLayers;\r\n            this.rembemerLastLayers = null;\r\n        }\r\n        let sections = preset[(\r\n            this.renderer.getStereoMode() ? \"eye2\" : \"eye1\"\r\n        )];\r\n        this.renderer.setSliceConfig({ layers, sections });\r\n        this.currentSectionConfig = index;\r\n    }\r\n    setSize(size: GPUExtent3DStrict) {\r\n        this.renderer.setSize(size);\r\n        this.needResize = true;\r\n    }\r\n}"],"names":["_r","_vec4","toIndexMesh","toNonIndexMesh","parametricSurface","face.findBorder","Object","tetra.tesseract","tetra.applyObj4","tetra.clone","tetra.cube","tetra.glome","tetra.spheritorus","tetra.torisphere","tetra.spherinderSide","tetra.tiger","tetra.convexhull","Material"],"mappings":"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AC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EACzH,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EACzH,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,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CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EACxO,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACnP,CAAC;KACL;;AAED,IAAA,KAAK,CAAC,CAAO,EAAA;AACT,QAAA,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;AAAC,QAAA,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;AAClC,QAAA,IAAI,CAAC,GAAG,CACJ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAChO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAChO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC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G,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EACpH,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EACpH,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EACpH,GAAG,GAAG,MAAM,EACZ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EACpH,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EACpH,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EACpH,GAAG,GAAG,MAAM,EACZ,CAAC,GAAG,GA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AG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC;AAC7H,QAAA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC;AAC7H,QAAA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC;AAC7H,QAAA,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC;AACrB,QAAA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC;AAC7H,QAAA,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC;AAC9H,QAAA,EAAE,CAAC,E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AI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,IAAA,GAAG,KAAW,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AACxD,I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AI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG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GAAG,EAAE,CAAC,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AAEpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAA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"}