{"version":3,"file":"camera.js","sources":["../../../../src/math/geometry/camera.ts"],"sourcesContent":["import { Mat4 } from \"../algebra/mat4.js\";\r\nimport { Vec4 } from \"../algebra/vec4.js\";\r\nimport { _90, _DEG2RAD } from \"../const.js\";\r\n\r\nexport interface PerspectiveCamera {\r\n    fov: number;\r\n    near: number;\r\n    far: number;\r\n    /** aspect = width / height = depth / height */\r\n    aspect?: number;\r\n}\r\nexport interface OrthographicCamera {\r\n    /** size = height */\r\n    size: number;\r\n    near: number;\r\n    far: number;\r\n    /** aspect = width / height = depth / height */\r\n    aspect?: number;\r\n}\r\n/** If fov == 0, then return Orthographic projection matrix\r\n *  Caution: This function calculates PerspectiveMatrix for 0-1 depth range */\r\nexport function getPerspectiveProjectionMatrix(c: PerspectiveCamera) {\r\n    let ky = Math.tan(_90 - c.fov / 2 * _DEG2RAD);\r\n    let kxz = ky / (c.aspect ?? 1);\r\n    let a = -c.far / (c.far - c.near);\r\n    let b = c.near * a;\r\n    // [kxz   0    0    0    0]\r\n    // [0    ky   0    0    0]\r\n    // [0    0    kxz   0    0]\r\n    // [0    0    0    a    b]\r\n    // [0    0    0   -1    0]\r\n    return {\r\n        /** used for 3d */\r\n        mat4: new Mat4(\r\n            kxz, 0, 0, 0,\r\n            0, ky, 0, 0,\r\n            0, 0, a, b,\r\n            0, 0, -1, 0\r\n        ),\r\n        /** used for 4d because of lack of mat5x5 */\r\n        vec4: new Vec4(kxz, ky, a, b)\r\n    }\r\n}\r\nexport function getOrthographicProjectionMatrix(c: OrthographicCamera) {\r\n    let ky = 1 / c.size, kxz = ky / (c.aspect ?? 1);\r\n    let a = -1 / (c.far - c.near);\r\n    let b = c.near * a;\r\n    // [kxz   0    0    0    0]\r\n    // [0    ky   0    0    0]\r\n    // [0    0    kxz   0    0]\r\n    // [0    0    0    a    b]\r\n    // [0    0    0    0    1]\r\n    return {\r\n        /** used for 3d */\r\n        mat4: new Mat4(\r\n            kxz, 0, 0, 0,\r\n            0, ky, 0, 0,\r\n            0, 0, a, b,\r\n            0, 0, 0, 1\r\n        ),\r\n        /** used for 4d because of lack of mat5x5\r\n         */\r\n        vec4: new Vec4(kxz, ky, a, b)\r\n    }\r\n}"],"names":[],"mappings":";;;;AAmBA;AAC8E;AACxE,SAAU,8BAA8B,CAAC,CAAoB,EAAA;AAC/D,IAAA,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;IAC9C,IAAI,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;AAC/B,IAAA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;AAClC,IAAA,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;;;;;;IAMnB,OAAO;;AAEH,QAAA,IAAI,EAAE,IAAI,IAAI,CACV,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACZ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACd;;QAED,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;KAChC,CAAA;AACL,CAAC;AACK,SAAU,+BAA+B,CAAC,CAAqB,EAAA;AACjE,IAAA,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;AAChD,IAAA,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;AAC9B,IAAA,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;;;;;;IAMnB,OAAO;;AAEH,QAAA,IAAI,EAAE,IAAI,IAAI,CACV,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACZ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACb;AACD;AACG;QACH,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;KAChC,CAAA;AACL;;;;"}