{"version":3,"file":"rotor.js","sources":["../../../../src/math/algebra/rotor.ts"],"sourcesContent":["import { _180 } from \"../const.js\";\r\nimport { Pool } from \"../pool.js\";\r\nimport { Srand } from \"../random.js\";\r\nimport { Bivec, _bivec } from \"./bivec.js\";\r\nimport { Mat4, _mat4 } from \"./mat4.js\";\r\nimport { Quaternion } from \"./quaternion.js\";\r\nimport { Vec3, _vec3_1, _vec3_2, _vec3_3, _vec3_4, _vec3_5 } from \"./vec3.js\";\r\nimport { Vec4, _vec4 } from \"./vec4.js\";\r\n\r\nexport class RotorPool extends Pool<Rotor> {\r\n    constructObject() { return new Rotor; }\r\n}\r\nexport const rotorPool = new RotorPool;\r\nexport class Rotor {\r\n    l: Quaternion;\r\n    r: Quaternion;\r\n    constructor(l: Quaternion = new Quaternion(), r: Quaternion = new Quaternion()) {\r\n        this.l = l;\r\n        this.r = r;\r\n    }\r\n    clone(): Rotor {\r\n        return new Rotor(this.l.clone(), this.r.clone());\r\n    }\r\n    copy(r: Rotor): Rotor {\r\n        this.l.copy(r.l);\r\n        this.r.copy(r.r);\r\n        return this;\r\n    }\r\n    conj(): Rotor {\r\n        return new Rotor(this.l.conj(), this.r.conj());\r\n    }\r\n    conjs(): Rotor {\r\n        this.l.conjs(), this.r.conjs(); return this;\r\n    }\r\n    norms(): Rotor {\r\n        this.l.norms();\r\n        this.r.norms();\r\n        return this;\r\n    }\r\n    /** Apply this to R: this * R;\r\n     * \r\n     * [this.l * R.l, R.r * this.r]; */\r\n    mul(R: Rotor): Rotor {\r\n        return new Rotor(this.l.mul(R.l), R.r.mul(this.r));\r\n    }\r\n    /** Apply this to R: this = this * R;\r\n     * \r\n     * [this.l, this.r] = [this.l * R.l, R.r * this.r]; */\r\n    mulsr(R: Rotor): Rotor {\r\n        this.l.mulsr(R.l);\r\n        this.r.mulsl(R.r);\r\n        return this;\r\n    }\r\n    /** Apply R to this: this = R * this;\r\n     * \r\n     * [this.l, this.r] = [R.l * this.l, this.r * R.r]; */\r\n    mulsl(R: Rotor): Rotor {\r\n        this.l.mulsl(R.l);\r\n        this.r.mulsr(R.r);\r\n        return this;\r\n    }\r\n    /** Apply this to R: this = this * conj(R);\r\n     * \r\n     * [this.l, this.r] = [this.l * conj(R.l), conj(R.r) * this.r]; */\r\n    mulsrconj(R: Rotor): Rotor {\r\n        this.l.mulsrconj(R.l);\r\n        this.r.mulslconj(R.r);\r\n        return this;\r\n    }\r\n    /** Apply R to this: this = conj(R) * this;\r\n     * \r\n     * [this.l, this.r] = [conj(R.l) * this.l, this.r * conj(R.r)]; */\r\n    mulslconj(R: Rotor): Rotor {\r\n        this.l.mulslconj(R.l);\r\n        this.r.mulsrconj(R.r);\r\n        return this;\r\n    }\r\n    sqrt(): Rotor {\r\n        return new Rotor(this.l.sqrt(), this.r.sqrt());\r\n    }\r\n    isFinite(): boolean {\r\n        return (\r\n            isFinite(this.l.x) && isFinite(this.l.y) && isFinite(this.l.z) && isFinite(this.l.w) &&\r\n            isFinite(this.r.x) && isFinite(this.r.y) && isFinite(this.r.z) && isFinite(this.r.w)\r\n        );\r\n    }\r\n    expset(bivec: Bivec): Rotor {\r\n        let A = _vec3_1.set(bivec.xy + bivec.zw, bivec.xz - bivec.yw, bivec.xw + bivec.yz);\r\n        let B = _vec3_2.set(bivec.xy - bivec.zw, bivec.xz + bivec.yw, bivec.xw - bivec.yz);\r\n        let a = A.norm(); let b = B.norm();\r\n        let aa = a * 0.5; let bb = b * 0.5;\r\n        let sa = (a > 0.005 ? Math.sin(aa) / a : 0.5 - a * a / 12);\r\n        let sb = (b > 0.005 ? Math.sin(bb) / b : 0.5 - b * b / 12);\r\n        this.l.set(Math.cos(aa), sa * A.x, sa * A.y, sa * A.z);\r\n        this.r.set(Math.cos(bb), sb * B.x, sb * B.y, sb * B.z);\r\n        return this;\r\n    }\r\n    log(): Bivec {\r\n        let a: Vec3, b: Vec3;\r\n        if (Math.abs(this.l.x) > 0.9999) {\r\n            a = this.l.yzw();\r\n        } else {\r\n            let ls = Math.acos(this.l.x);\r\n            a = this.l.yzw().mulfs(ls / Math.sin(ls));\r\n        }\r\n        if (Math.abs(this.r.x) > 0.9999) {\r\n            b = this.r.yzw();\r\n        } else {\r\n            let rs = Math.acos(this.r.x);\r\n            b = this.r.yzw().mulfs(rs / Math.sin(rs));\r\n        }\r\n        return new Bivec(\r\n            a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x\r\n        );\r\n    }\r\n    static slerp(a: Rotor, b: Rotor, t: number): Rotor {\r\n        return new Rotor(\r\n            Quaternion.slerp(a.l, b.l, t),\r\n            Quaternion.slerp(a.r, b.r, t)\r\n        );\r\n    }\r\n    toMat4(): Mat4 {\r\n        return this.l.toLMat4().mulsr(_mat4.setFromQuaternionR(this.r));\r\n    }\r\n\r\n    /** set rotor from a rotation matrix,\r\n     * i.e. m must be orthogonal with determinant 1.\r\n     * algorithm: iteratively aligne each axis. */\r\n    setFromMat4(m: Mat4) {\r\n        return this.setFromLookAt(Vec4.x, m.x_()).mulsl(\r\n            _r.setFromLookAt(_vec4.copy(Vec4.y).rotates(this), m.y_())\r\n        ).mulsl(\r\n            _r.setFromLookAt(_vec4.copy(Vec4.z).rotates(this), m.z_())\r\n        );\r\n    }\r\n    /** Rotor: rotate from plane1 to plane2\r\n     *  Bivectors must be simple and normalised */\r\n    static lookAtbb(from: Bivec, to: Bivec): Rotor {\r\n        let A1 = _vec3_2.set(from.xy + from.zw, from.xz - from.yw, from.xw + from.yz);\r\n        let B1 = _vec3_3.set(from.xy - from.zw, from.xz + from.yw, from.xw - from.yz);\r\n        let A2 = _vec3_4.set(to.xy + to.zw, to.xz - to.yw, to.xw + to.yz);\r\n        let B2 = _vec3_5.set(to.xy - to.zw, to.xz + to.yw, to.xw - to.yz);\r\n        return new Rotor(Quaternion.lookAt(A1, A2), Quaternion.lookAt(B2, B1));\r\n    }\r\n    /** plane must be a unit simple vector, if not, use Bivec.exp() instead \r\n     * angle1 is rotation angle on the plane\r\n     * angle2 is rotatoin angle on the perpendicular plane (right handed, eg: exy + ezw)\r\n    */\r\n    static fromPlane(plane: Bivec, angle1: number, angle2: number = 0): Rotor {\r\n        let a = (angle1 + angle2) * 0.5, sa = Math.sin(a);\r\n        let b = (angle1 - angle2) * 0.5, sb = Math.sin(b);\r\n        return new Rotor(// norm of half of A is 1\r\n            new Quaternion(Math.cos(a), sa * (plane.xy + plane.zw), sa * (plane.xz - plane.yw), sa * (plane.xw + plane.yz)),\r\n            new Quaternion(Math.cos(b), sb * (plane.xy - plane.zw), sb * (plane.xz + plane.yw), sb * (plane.xw - plane.yz))\r\n        );\r\n    }\r\n\r\n    /** \"from\" and \"to\" must be normalized vectors*/\r\n    static lookAt(from: Vec4, to: Vec4): Rotor {\r\n\r\n        let right = _bivec.wedgevvset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _bivec.wedgevvset(from, Vec4.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _bivec.wedgevvset(from, Vec4.y);\r\n            }\r\n            return v.norms().mulfs(_180).exp();\r\n        }\r\n        return right.exp();\r\n    }\r\n\r\n    // todo: lookAtvb(from: Vec4, to: Bivec): Rotor dir to plane or reverse\r\n    static lookAtvb(from: Vec4, to: Bivec): Rotor {\r\n        let toVect = _vec4.copy(from).projbs(to).norms();\r\n        return Rotor.lookAt(from, toVect);\r\n    }\r\n\r\n    /** \"from\" and \"to\" must be normalized vectors */\r\n    setFromLookAt(from: Vec4, to: Vec4): Rotor {\r\n        let right = _bivec.wedgevvset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _bivec.wedgevvset(from, Vec4.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _bivec.wedgevvset(from, Vec4.y);\r\n            }\r\n            return this.expset(v.norms().mulfs(_180));\r\n        }\r\n        return this.expset(right);\r\n    }\r\n    static rand(): Rotor {\r\n        return new Rotor(Quaternion.rand(), Quaternion.rand());\r\n    }\r\n    static srand(seed: Srand): Rotor {\r\n        return new Rotor(Quaternion.srand(seed), Quaternion.srand(seed));\r\n    }\r\n    randset(): Rotor {\r\n        this.l.randset();\r\n        this.r.randset();\r\n        return this;\r\n    }\r\n\r\n    srandset(seed: Srand): Rotor {\r\n        this.l.srandset(seed);\r\n        this.r.srandset(seed);\r\n        return this;\r\n    }\r\n    pushPool(pool: RotorPool = rotorPool) {\r\n        pool.push(this);\r\n    }\r\n\r\n    // todo: fixbug\r\n\r\n    // fromMat4(m: Mat4) {\r\n    //     return Rotor.lookAt(Vec4.x, m.x_()).mulsl(\r\n    //         _r.setFromLookAt(_vec4.copy(Vec4.y).rotates(this), m.y_())\r\n    //     ).mulsl(\r\n    //         _r.setFromLookAt(_vec4.copy(Vec4.z).rotates(this), m.z_())\r\n    //     );\r\n    // }\r\n}\r\n\r\nexport let _r = new Rotor();"],"names":[],"mappings":"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"}