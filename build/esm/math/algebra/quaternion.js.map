{"version":3,"file":"quaternion.js","sources":["../../../../src/math/algebra/quaternion.ts"],"sourcesContent":["import { _180, _360 } from \"../const.js\";\r\nimport { Pool } from \"../pool.js\";\r\nimport { Srand } from \"../random.js\";\r\nimport { Mat3 } from \"./mat3.js\";\r\nimport { Mat4 } from \"./mat4.js\";\r\nimport { Vec3, _vec3, _vec3_1, _vec3_2 } from \"./vec3.js\";\r\nimport { Vec4 } from \"./vec4.js\";\r\n\r\nexport class QuaternionPool extends Pool<Quaternion> {\r\n    constructObject() { return new Quaternion; }\r\n}\r\nexport const quaternionPool = new QuaternionPool;\r\nexport class Quaternion {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    w: number;\r\n    constructor(x: number = 1, y: number = 0, z: number = 0, w: number = 0) {\r\n        this.x = x; this.y = y; this.z = z; this.w = w;\r\n    }\r\n    set(x: number = 1, y: number = 0, z: number = 0, w: number = 0) {\r\n        this.x = x; this.y = y; this.z = z; this.w = w; return this;\r\n    }\r\n    flat(): number[] {\r\n        return [this.x, this.y, this.z, this.w];\r\n    }\r\n    copy(v: Vec4 | Quaternion) {\r\n        this.x = v.x; this.y = v.y;\r\n        this.z = v.z; this.w = v.w;\r\n        return this;\r\n    }\r\n    yzw(): Vec3 { return new Vec3(this.y, this.z, this.w); }\r\n    ywz(): Vec3 { return new Vec3(this.y, this.w, this.z); }\r\n    zyw(): Vec3 { return new Vec3(this.z, this.y, this.w); }\r\n    zwy(): Vec3 { return new Vec3(this.z, this.w, this.y); }\r\n    wzy(): Vec3 { return new Vec3(this.w, this.z, this.y); }\r\n    wyz(): Vec3 { return new Vec3(this.w, this.y, this.z); }\r\n    wxyz(): Vec4 { return new Vec4(this.w, this.x, this.y, this.z); }\r\n    wxzy(): Vec4 { return new Vec4(this.w, this.x, this.z, this.y); }\r\n    wyxz(): Vec4 { return new Vec4(this.w, this.y, this.x, this.z); }\r\n    wzxy(): Vec4 { return new Vec4(this.w, this.z, this.x, this.y); }\r\n    yxzw(): Vec4 { return new Vec4(this.y, this.x, this.z, this.w); }\r\n    xzwy(): Vec4 { return new Vec4(this.x, this.z, this.w, this.y); }\r\n    xyzw(): Vec4 { return new Vec4(this.x, this.y, this.z, this.w); }\r\n\r\n    clone(): Quaternion {\r\n        return new Quaternion(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    neg(): Quaternion {\r\n        return new Quaternion(-this.x, -this.y, -this.z, -this.w);\r\n    }\r\n    negs(): Quaternion {\r\n        this.x = - this.x; this.y = -this.y; this.z = -this.z; this.w = -this.w;\r\n        return this;\r\n    }\r\n    mul(q: Quaternion | Vec4): Quaternion {\r\n        return new Quaternion(\r\n            this.x * q.x - this.y * q.y - this.z * q.z - this.w * q.w,\r\n            this.x * q.y + this.y * q.x + this.z * q.w - this.w * q.z,\r\n            this.x * q.z - this.y * q.w + this.z * q.x + this.w * q.y,\r\n            this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x\r\n        );\r\n    }\r\n    /** this = this * q; */\r\n    mulsr(q: Quaternion | Vec4): Quaternion {\r\n        var x = this.x * q.x - this.y * q.y - this.z * q.z - this.w * q.w;\r\n        var y = this.x * q.y + this.y * q.x + this.z * q.w - this.w * q.z;\r\n        var z = this.x * q.z - this.y * q.w + this.z * q.x + this.w * q.y;\r\n        this.w = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    /** this = q * this; */\r\n    mulsl(q: Quaternion | Vec4): Quaternion {\r\n        var x = q.x * this.x - q.y * this.y - q.z * this.z - q.w * this.w;\r\n        var y = q.x * this.y + q.y * this.x + q.z * this.w - q.w * this.z;\r\n        var z = q.x * this.z - q.y * this.w + q.z * this.x + q.w * this.y;\r\n        this.w = q.x * this.w + q.y * this.z - q.z * this.y + q.w * this.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    /** this = this * conj(q); */\r\n    mulsrconj(q: Quaternion | Vec4): Quaternion {\r\n        var x = this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;\r\n        var y = -this.x * q.y + this.y * q.x - this.z * q.w + this.w * q.z;\r\n        var z = -this.x * q.z + this.y * q.w + this.z * q.x - this.w * q.y;\r\n        this.w = -this.x * q.w - this.y * q.z + this.z * q.y + this.w * q.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    /** this = conj(q) * this; */\r\n    mulslconj(q: Quaternion | Vec4): Quaternion {\r\n        var x = q.x * this.x + q.y * this.y + q.z * this.z + q.w * this.w;\r\n        var y = q.x * this.y - q.y * this.x - q.z * this.w + q.w * this.z;\r\n        var z = q.x * this.z + q.y * this.w - q.z * this.x - q.w * this.y;\r\n        this.w = q.x * this.w - q.y * this.z + q.z * this.y - q.w * this.x;\r\n        this.x = x; this.y = y; this.z = z; return this;\r\n    }\r\n    conj(): Quaternion {\r\n        return new Quaternion(this.x, -this.y, -this.z, -this.w);\r\n    }\r\n    conjs(): Quaternion {\r\n        this.y = -this.y; this.z = -this.z; this.w = -this.w; return this;\r\n    }\r\n    norm(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n    norms(): Quaternion {\r\n        let n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n        n = n == 0 ? 0 : (1 / n);\r\n        this.x *= n; this.y *= n; this.z *= n; this.w *= n; return this;\r\n    }\r\n    /** axis must be a unit vector, if not, use Vec3.exp() instead */\r\n    static fromAxis(axis: Vec3, angle: number): Quaternion {\r\n        angle *= 0.5;\r\n        let s = Math.sin(angle);\r\n        return new Quaternion(Math.cos(angle), axis.x * s, axis.y * s, axis.z * s);\r\n    }\r\n    sqrt(): Quaternion {\r\n        // we choose pos value because it's closer to 1\r\n        let a = Math.sqrt(0.5 * (this.x + 1));\r\n        let div2a = 1 / (2 * a);\r\n        return new Quaternion(a, this.y * div2a, this.z * div2a, this.w * div2a);\r\n    }\r\n    sqrts(): Quaternion {\r\n        // we choose pos value because it's closer to 1\r\n        let a = Math.sqrt(0.5 * (this.x + 1));\r\n        let div2a = 1 / (2 * a);\r\n        return this.set(a, this.y * div2a, this.z * div2a, this.w * div2a);\r\n    }\r\n    /** get generator of this, Quaternion must be normalized */\r\n    log(): Vec3 {\r\n        let s = Math.acos(this.x);\r\n        return this.yzw().mulfs(2 * s / Math.sin(s));\r\n    }\r\n    static slerp(a: Quaternion, b: Quaternion, t: number): Quaternion {\r\n        let cosf = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\r\n        let A: number, B: number;\r\n        if (Math.abs(cosf) > 0.99999) {\r\n            A = 1 - t; B = t;\r\n        } else {\r\n            let f = Math.acos(Math.abs(cosf));\r\n            let _1s = 1 / Math.sin(f);\r\n            A = Math.sin((1 - t) * f) * _1s;\r\n            B = Math.sin(t * f) * _1s;\r\n            if (cosf < 0) B = -B;\r\n        }\r\n        return new Quaternion(\r\n            a.x * A + b.x * B, a.y * A + b.y * B, a.z * A + b.z * B, a.w * A + b.w * B\r\n        );\r\n    }\r\n    toRotateMat(): Mat4 {\r\n        let xt2 = this.y + this.y, yt2 = this.z + this.z, zt2 = this.w + this.w;\r\n        let x2 = this.y * xt2;\r\n        let y2 = this.z * yt2;\r\n        let z2 = this.w * zt2;\r\n\r\n        let xy = this.y * yt2;\r\n        let yz = this.w * yt2;\r\n        let xz = this.w * xt2;\r\n\r\n        let wx = this.x * xt2;\r\n        let wy = this.x * yt2;\r\n        let wz = this.x * zt2;\r\n        return new Mat4(\r\n            1 - (y2 + z2), xy - wz, xz + wy, 0,\r\n            xy + wz, 1 - x2 - z2, yz - wx, 0,\r\n            xz - wy, yz + wx, 1 - x2 - y2, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n\r\n    toMat3(): Mat3 {\r\n        let xt2 = this.y + this.y, yt2 = this.z + this.z, zt2 = this.w + this.w;\r\n        let x2 = this.y * xt2;\r\n        let y2 = this.z * yt2;\r\n        let z2 = this.w * zt2;\r\n\r\n        let xy = this.y * yt2;\r\n        let yz = this.w * yt2;\r\n        let xz = this.w * xt2;\r\n\r\n        let wx = this.x * xt2;\r\n        let wy = this.x * yt2;\r\n        let wz = this.x * zt2;\r\n        return new Mat3(\r\n            1 - (y2 + z2), xy - wz, xz + wy,\r\n            xy + wz, 1 - x2 - z2, yz - wx,\r\n            xz - wy, yz + wx, 1 - x2 - y2\r\n        );\r\n    }\r\n    toLMat4(): Mat4 {\r\n        return new Mat4(\r\n            this.x, -this.y, -this.z, -this.w,\r\n            this.y, this.x, -this.w, this.z,\r\n            this.z, this.w, this.x, -this.y,\r\n            this.w, -this.z, this.y, this.x\r\n        );\r\n    }\r\n    toRMat4(): Mat4 {\r\n        return new Mat4(\r\n            this.x, -this.y, -this.z, -this.w,\r\n            this.y, this.x, this.w, -this.z,\r\n            this.z, -this.w, this.x, this.y,\r\n            this.w, this.z, -this.y, this.x\r\n        );\r\n    }\r\n    expset(v: Vec3) {\r\n        let g = v.norm() * 0.5;\r\n        let s = Math.abs(g) > 0.005 ? Math.sin(g) / g * 0.5 : 0.5 - g * g / 12;\r\n        return this.set(Math.cos(g), s * v.x, s * v.y, s * v.z);\r\n    }\r\n    static rand(): Quaternion {\r\n        let a = Math.random() * _360;\r\n        let b = Math.random() * _360;\r\n        let c = Math.random();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return new Quaternion(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    static srand(seed: Srand): Quaternion {\r\n        let a = seed.nextf() * _360;\r\n        let b = seed.nextf() * _360;\r\n        let c = seed.nextf();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return new Quaternion(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    randset(): Quaternion {\r\n        let a = Math.random() * _360;\r\n        let b = Math.random() * _360;\r\n        let c = Math.random();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return this.set(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    srandset(seed: Srand): Quaternion {\r\n        let a = seed.nextf() * _360;\r\n        let b = seed.nextf() * _360;\r\n        let c = seed.nextf();\r\n        let sc = Math.sqrt(c);\r\n        let cc = Math.sqrt(1 - c);\r\n        return this.set(sc * Math.cos(a), sc * Math.sin(a), cc * Math.cos(b), cc * Math.sin(b));\r\n    }\r\n    /** \"from\" and \"to\" must be normalized vectors*/\r\n    static lookAt(from: Vec3, to: Vec3): Quaternion {\r\n\r\n        let right = _vec3.wedgeset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _vec3_1.wedgeset(from, Vec3.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _vec3_1.wedgeset(from, Vec3.y);\r\n            }\r\n            return v.norms().mulfs(_180).exp();\r\n        }\r\n        return right.exp();\r\n    }\r\n    setFromLookAt(from: Vec3, to: Vec3) {\r\n\r\n        let right = _vec3.wedgeset(from, to);\r\n        let s = right.norm();\r\n        let c = from.dot(to);\r\n        if (s > 0.000001) { // not aligned\r\n            right.mulfs(Math.atan2(s, c) / s);\r\n        } else if (c < 0) { // almost n reversely aligned\r\n            let v = _vec3_1.wedgeset(from, Vec3.x);\r\n            if (v.norm1() < 0.01) {\r\n                v = _vec3_1.wedgeset(from, Vec3.y);\r\n            }\r\n            return this.expset(v.norms().mulfs(_180));\r\n        }\r\n        return this.expset(right);\r\n    }\r\n    pushPool(pool: QuaternionPool = quaternionPool) {\r\n        pool.push(this);\r\n    }\r\n    /** set rotor from a rotation matrix,\r\n         * i.e. m must be orthogonal with determinant 1.\r\n         * algorithm: iteratively aligne each axis. */\r\n    setFromMat3(m: Mat3) {\r\n        return this.setFromLookAt(Vec3.x, m.x_()).mulsl(\r\n            _Q.setFromLookAt(_vec3_2.copy(Vec3.y).rotates(this), m.y_())\r\n        )\r\n    }\r\n}\r\nexport let _Q = new Quaternion();\r\nexport let _Q_1 = new Quaternion();\r\nexport let _Q_2 = new Quaternion();"],"names":[],"mappings":"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"}