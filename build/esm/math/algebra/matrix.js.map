{"version":3,"file":"matrix.js","sources":["../../../../src/math/algebra/matrix.ts"],"sourcesContent":["import { Mat3 } from \"./mat3.js\";\r\nimport { Mat4 } from \"./mat4.js\";\r\nimport { Vec3 } from \"./vec3.js\";\r\nimport { Vec4 } from \"./vec4.js\";\r\n\r\nexport interface ColumnVector extends Matrix {\r\n    row: 1;\r\n}\r\nexport interface RowVector extends Matrix {\r\n    col: 1;\r\n}\r\nexport class Matrix {\r\n    elem: Float32Array;\r\n    row: number;\r\n    col: number;\r\n    length: number;\r\n    constructor(r: number, c?: number) {\r\n        c = c ?? r;\r\n        this.row = r; this.col = c;\r\n        this.length = r * c;\r\n        this.elem = new Float32Array(this.length);\r\n    }\r\n    static diag(...arr: number[]) {\r\n        const n = arr.length;\r\n        const nplus1 = n + 1;\r\n        const m = new Matrix(n);\r\n        for (let i = 0; i < n; i += nplus1) {\r\n            m.elem[i] = arr[i];\r\n        }\r\n        return m;\r\n    }\r\n    diag() {\r\n        const arr: number[] = [];\r\n        let cplus1 = this.col + 1;\r\n        const r_c = Math.min(this.row, this.col);\r\n        for (let i = 0, l = 0; l < r_c && i < this.length; i += cplus1) {\r\n            arr.push(this.elem[i]);\r\n        }\r\n        return arr;\r\n    }\r\n    static fromArray(arr: number[][]) {\r\n        let m = new Matrix(arr.length, arr[0] ? arr[0].length : 0);\r\n        m.elem.set(arr.flat());\r\n        return m;\r\n    }\r\n    static fromMat3(mat3: Mat3) {\r\n        let m = new Matrix(3);\r\n        m.elem.set(mat3.elem);\r\n        return m;\r\n    }\r\n    static fromMat4(mat4: Mat4) {\r\n        let m = new Matrix(4);\r\n        m.elem.set(mat4.elem);\r\n        return m;\r\n    }\r\n    static fromVec4(vec4: Vec4) {\r\n        let m = new Matrix(1, 4);\r\n        m.elem.set([vec4.x, vec4.y, vec4.z, vec4.w]);\r\n        return m;\r\n    }\r\n    static fromVec3(vec3: Vec3) {\r\n        let m = new Matrix(1, 3);\r\n        m.elem.set([vec3.x, vec3.y, vec3.z]);\r\n        return m;\r\n    }\r\n    static fill(value: number, r: number, c?: number) {\r\n        let m = new Matrix(r, c);\r\n        m.elem.fill(value);\r\n        return m;\r\n    }\r\n    static id(r: number, c?: number) {\r\n        c = c ?? r;\r\n        let m = new Matrix(r, c);\r\n        let cplus1 = c + 1;\r\n        const r_c = Math.min(r, c);\r\n        for (let i = 0, l = 0; l < r_c && i < m.length; i += cplus1) {\r\n            m.elem[i] = 1.0;\r\n        }\r\n        return m;\r\n    }\r\n    setElements(...args: number[]) {\r\n        this.elem.set(args); return this;\r\n    }\r\n    copy(src: Matrix) {\r\n        if (src.row !== this.row || src.col !== this.col) throw \"Matrix dimension disagree\";\r\n        this.elem.set(src.elem); return this;\r\n    }\r\n    clone() {\r\n        return new Matrix(this.row, this.col).copy(this);\r\n    }\r\n    toMat3() {\r\n        if (this.row !== 3 || this.col !== 3) throw \"Matrix dimension must be 3x3\";\r\n        return new Mat3(...this.elem);\r\n    }\r\n    toMat4() {\r\n        if (this.row !== 4 || this.col !== 4) throw \"Matrix dimension must be 4x4\";\r\n        return new Mat4(...this.elem);\r\n    }\r\n    toVec4() {\r\n        if (this.row === 4 && this.col === 1) return new Vec4(...this.elem);\r\n        if (this.row === 1 && this.col === 4) return new Vec4(...this.elem);\r\n        throw \"Matrix dimension must be 1x4 or 4x1\";\r\n    }\r\n    toVec3() {\r\n        if (this.row === 3 && this.col === 1) return new Vec3(...this.elem);\r\n        if (this.row === 1 && this.col === 3) return new Vec3(...this.elem);\r\n        throw \"Matrix dimension must be 1x3 or 3x1\";\r\n    }\r\n    to2DArray() {\r\n        let arr: number[][] = [];\r\n        for (let i = 0, k = 0; i < this.row; i++) {\r\n            arr.push([]);\r\n            for (let j = 0; j < this.col; j++, k++) {\r\n                arr[i].push(this.elem[k]);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    ts() {\r\n        if (this.col === this.row) {\r\n            for (let i = 0, offI = 0; i < this.row; i++, offI += this.col) {\r\n                for (let j = i + 1, offJ = offI + this.col; j < this.col; j++, offJ += this.row) {\r\n                    const a = j + offI;\r\n                    const b = i + offJ;\r\n                    let temp = this.elem[a]; this.elem[a] = this.elem[b]; this.elem[b] = temp;\r\n                }\r\n            }\r\n        } else {\r\n            throw \"not implemented yet for non square matrice\";\r\n        }\r\n        let temp = this.col; this.col = this.row; this.row = temp;\r\n        return this;\r\n    }\r\n    adds(m: Matrix) {\r\n        for (let i = 0, l = m.length; i < l; i++) {\r\n            this.elem[i] += m.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    addmulfs(m: Matrix, k: number) {\r\n        for (let i = 0, l = m.length; i < l; i++) {\r\n            this.elem[i] += m.elem[i] * k;\r\n        }\r\n        return this;\r\n    }\r\n    subs(m: Matrix) {\r\n        for (let i = 0, l = m.length; i < l; i++) {\r\n            this.elem[i] -= m.elem[i];\r\n        }\r\n        return this;\r\n    }\r\n    mulfs(k: number) {\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    mulset(m1: Matrix, m2: Matrix) {\r\n        if (m1 === this) return this.mulsr(m2);\r\n        if (m2 === this) return this.mulsl(m1);\r\n        const r1 = m1.row, r2 = m2.row;\r\n        const c1 = m1.col, c2 = m2.col;\r\n        if (c1 !== r2) throw \"Inconsist matrices dimension\";\r\n        if (this.row !== r1 || this.col !== c2) throw \"Inconsist destination matrix dimension\";\r\n        for (let r = 0, k = 0, offsetR1 = 0; r < r1; r++, offsetR1 += c1) {\r\n            for (let c = 0; c < c2; c++) {\r\n                let sum = 0;\r\n                for (let j = 0, offsetR2 = 0; j < r2; j++, offsetR2 += c2) {\r\n                    sum += m1.elem[offsetR1 + j] * m2.elem[offsetR2 + c];\r\n                }\r\n                this.elem[k++] = sum;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    mul(m: Matrix) {\r\n        const r1 = this.row, r2 = m.row;\r\n        const c1 = this.col, c2 = m.col;\r\n        if (c1 !== r2) throw \"Inconsist matrices dimension\";\r\n        const R = new Matrix(r1, c2);\r\n        for (let r = 0, k = 0, offsetR1 = 0; r < r1; r++, offsetR1 += c1) {\r\n            for (let c = 0; c < c2; c++) {\r\n                let sum = 0;\r\n                for (let j = 0, offsetR2 = 0; j < r2; j++, offsetR2 += c2) {\r\n                    sum += this.elem[offsetR1 + j] * m.elem[offsetR2 + c];\r\n                }\r\n                R.elem[k++] = sum;\r\n            }\r\n        }\r\n        return R;\r\n    }\r\n    /// this = this * m\r\n    mulsr(m: Matrix) {\r\n        const r1 = this.row, r2 = m.row;\r\n        const c1 = this.col, c2 = m.col;\r\n        if (c1 !== r2) throw \"Inconsist matrices dimension\";\r\n        if (this.col !== c2) throw \"Inconsist destination matrix dimension\";\r\n        const arr = new Float32Array(this.length);\r\n        for (let r = 0, k = 0, offsetR1 = 0; r < r1; r++, offsetR1 += c1) {\r\n            for (let c = 0; c < c2; c++) {\r\n                let sum = 0;\r\n                for (let j = 0, offsetR2 = 0; j < r2; j++, offsetR2 += c2) {\r\n                    sum += this.elem[offsetR1 + j] * m.elem[offsetR2 + c];\r\n                }\r\n                arr[k++] = sum;\r\n            }\r\n        }\r\n        this.elem = arr;\r\n        return this;\r\n    }\r\n    /// this = m * this\r\n    mulsl(m: Matrix) {\r\n        const r1 = m.row, r2 = this.row;\r\n        const c1 = m.col, c2 = this.col;\r\n        if (c1 !== r2) throw \"Inconsist matrices dimension\";\r\n        if (this.row !== r1) throw \"Inconsist destination matrix dimension\";\r\n        const arr = new Float32Array(this.length);\r\n        for (let r = 0, k = 0, offsetR1 = 0; r < r1; r++, offsetR1 += c1) {\r\n            for (let c = 0; c < c2; c++) {\r\n                let sum = 0;\r\n                for (let j = 0, offsetR2 = 0; j < r2; j++, offsetR2 += c2) {\r\n                    sum += m.elem[offsetR1 + j] * this.elem[offsetR2 + c];\r\n                }\r\n                arr[k++] = sum;\r\n            }\r\n        }\r\n        this.elem = arr;\r\n        return this;\r\n    }\r\n    norm() {\r\n        let sum = 0;\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            sum += this.elem[i] * this.elem[i];\r\n        }\r\n        return Math.sqrt(sum);\r\n    }\r\n    norm1() {\r\n        let sum = 0;\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            sum += Math.abs(this.elem[i]);\r\n        }\r\n        return sum;\r\n    }\r\n    norms() {\r\n        return this.divfs(this.norm());\r\n    }\r\n    normSqr() {\r\n        let sum = 0;\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            sum += this.elem[i] * this.elem[i];\r\n        }\r\n        return sum;\r\n    }\r\n    divfs(k: number) {\r\n        k = 1 / k;\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            this.elem[i] *= k;\r\n        }\r\n        return this;\r\n    }\r\n    get(r: number, c: number) {\r\n        return this.elem[c + this.col * r];\r\n    }\r\n    set(r: number, c: number, value: number) {\r\n        this.elem[c + this.col * r] = value; return this;\r\n    }\r\n    setFromSubMatrix(srcMat: Matrix, rows?: number, cols?: number, srcRowOffset: number = 0, srcColOffset: number = 0, dstRowOffset: number = 0, dstColOffset: number = 0) {\r\n\r\n        const { row, col } = srcMat;\r\n        rows ??= row; cols ??= col;\r\n\r\n        for (\r\n            let i = srcRowOffset, srcOffset = srcRowOffset * col, dstOffset = dstRowOffset * this.col;\r\n            i < srcRowOffset + rows; i++, srcOffset += col, dstOffset += this.col\r\n        ) {\r\n            for (let j = srcColOffset, k = dstColOffset; j < srcColOffset + cols; j++, k++) {\r\n                this.elem[k + dstOffset] = srcMat.elem[j + srcOffset];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    colVector(k: number) {\r\n        return this.subMatrix(0, k, undefined, 1) as ColumnVector;\r\n    }\r\n    rowVector(k: number) {\r\n        return this.subMatrix(k, 0, 1) as RowVector;\r\n    }\r\n    subMatrix(rowOffset: number, colOffset: number, row?: number, col?: number) {\r\n        row ??= this.row;\r\n        col ??= this.col;\r\n        const A = new Matrix(row, col);\r\n        for (let i = rowOffset, offset = rowOffset * this.col, k = 0; i < rowOffset + row; i++, offset += this.col) {\r\n            for (let j = colOffset; j < colOffset + col; j++, k++) {\r\n                A.elem[k] = this.elem[j + offset];\r\n            }\r\n        }\r\n        return A;\r\n    }\r\n    det() {\r\n        if (this.row !== this.col) throw \"Square matrix expected\";\r\n        if (this.row === 1) return this.elem[0];\r\n        if (this.row === 2) return this.elem[0] * this.elem[3] - this.elem[1] * this.elem[2];\r\n        let det = 0;\r\n        const elem = this.elem;\r\n        const n = this.row - 1;\r\n        const subMat = new Matrix(n);\r\n        for (let i = 0; i < this.col; i++) {\r\n            if (i) subMat.setFromSubMatrix(this, n, i, 1, 0);\r\n            if (i !== n) subMat.setFromSubMatrix(this, n, n - i, 1, i + 1, 0, i);\r\n            det += (i & 1) === 0 ? elem[i] * subMat.det() : -elem[i] * subMat.det();\r\n        }\r\n        return det;\r\n    }\r\n    decomposeQR() {\r\n        const m = this.row;\r\n        const n = this.col;\r\n\r\n        const qv: Matrix[] = [];\r\n\r\n        // temp array\r\n        const z = this.clone();\r\n        let z1: Matrix;\r\n\r\n        for (let k = 0; k < n && k < m - 1; k++) {\r\n\r\n            let e = new Matrix(m, 1) as ColumnVector, x: ColumnVector;\r\n            let a: number;\r\n            z1 = Matrix.id(m, n);\r\n            z1.setFromSubMatrix(z, m - k, n - k, k, k, k, k);\r\n            x = z1.colVector(k);\r\n\r\n            a = x.norm();\r\n            if (this.get(k, k) > 0) a = -a;\r\n\r\n            for (let i = 0; i < m; i++) {\r\n                e.elem[i] = (i == k) ? 1 : 0;\r\n            }\r\n            x.addmulfs(e, a);\r\n            e.copy(x);\r\n\r\n            const norm = e.norm();\r\n            if (norm > 0) {\r\n                e.divfs(norm);\r\n\r\n                // qv[k] = I - 2 *e*e^T\r\n\r\n                qv[k] = new Matrix(m);\r\n                for (let i = 0, kk = 0; i < m; i++) {\r\n                    for (let j = 0; j < m; j++, kk++) {\r\n                        qv[k].elem[kk] = -2 * e.elem[i] * e.elem[j];\r\n                        if (i === j) qv[k].elem[kk] += 1;\r\n                    }\r\n                }\r\n                z.mulset(qv[k], z1);\r\n            }\r\n        }\r\n\r\n        let Q = qv[0] ?? Matrix.id(m);\r\n\r\n        for (let i = 1; i < qv.length; i++) {\r\n            Q.mulsl(qv[i]);\r\n        }\r\n\r\n        const R = Q.mul(this);\r\n        Q.ts();\r\n        return { Q, R };\r\n    }\r\n    SVdecompose(iterations: number = 10) {\r\n        // m = O L O'\r\n        function OLOdecompose(m: Matrix) {\r\n            const tempMat = m.clone();\r\n            let { Q, R } = tempMat.decomposeQR();\r\n            const qv = Q.clone();\r\n            for (let i = 0; i < iterations; i++) {\r\n                tempMat.mulset(R, Q);\r\n                const { Q: Q2, R: R2 } = tempMat.decomposeQR();\r\n                qv.mulsr(Q2);\r\n                Q = Q2; R = R2;\r\n            }\r\n            return { O: qv, L: tempMat.clone() }\r\n        }\r\n        const pts = this.clone().ts();\r\n        const ppt = OLOdecompose(this.mul(pts));\r\n        const U = ppt.O;\r\n        for (let i = 0; i < ppt.L.length; i += ppt.L.row + 1) {\r\n            ppt.L.elem[i] = 1 / Math.sqrt(ppt.L.elem[i]);\r\n        }\r\n        const V = ppt.L.mul(U.clone().ts()).mul(this);\r\n        return {\r\n            U, V, L: U.clone().ts().mul(this).mulsr(V.clone().ts())\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}