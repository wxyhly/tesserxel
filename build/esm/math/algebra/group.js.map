{"version":3,"file":"group.js","sources":["../../../../src/math/algebra/group.ts"],"sourcesContent":["type Relation = number[];\r\nexport class CosetTable {\r\n    length = 1;\r\n    private p = [0];\r\n    cosets: number[][];\r\n    // store int map for letters (e.g. \"a\" \"b\" \"a'\" \"b'\")\r\n    private generatorMap: string[] = [];\r\n    private generatorInvMap = new Map<string, number>;\r\n    private letters: number = 0; // equal to generatorMap.length\r\n    // map between integers, (\"a\" <-> \"'a\")\r\n    private genInvMap: number[] = [];\r\n    // int representation of relations and subsets\r\n    private relations: Relation[];\r\n    private subsets: Relation[];\r\n    // convert word to int representation\r\n    private parseWord(w: string) {\r\n        const word: Relation = [];\r\n        for (let i = 0; i < w.length; i++) {\r\n            if (w[i + 1] == \"'\") {\r\n                word.push(this.generatorInvMap.get(w[i] + \"'\")!);\r\n                i++;\r\n            } else {\r\n                word.push(this.generatorInvMap.get(w[i])!);\r\n            }\r\n        }\r\n        return word;\r\n    }\r\n    constructor(generator: string, relation: string[], subset: string[]) {\r\n        for (const c of generator) {\r\n            this.generatorInvMap.set(c, this.letters++);\r\n            this.generatorMap.push(c);\r\n            if (relation.includes(c + c)) {\r\n                this.genInvMap[this.letters - 1] = this.letters - 1;\r\n            } else {\r\n                this.genInvMap[this.letters] = this.letters - 1;\r\n                this.genInvMap[this.letters - 1] = this.letters;\r\n                this.generatorInvMap.set(c + \"'\", this.letters++);\r\n                this.generatorMap.push(c + \"'\");\r\n            }\r\n        }\r\n        this.relations = relation.map(w => this.parseWord(w));\r\n        this.subsets = subset.map(w => this.parseWord(w));\r\n        this.cosets = [new Array(this.letters)];\r\n    }\r\n    private define(coset: number, gen: number) {\r\n        this.cosets[coset][gen] = this.length;\r\n        const newLine = new Array(this.letters);\r\n        newLine[this.genInvMap[gen]] = coset;\r\n        this.cosets.push(newLine);\r\n        this.p.push(this.length);\r\n        this.length++;\r\n    }\r\n    private coincidence(a: number, b: number) {\r\n        const q: number[] = [];\r\n        this.merge(a, b, q);\r\n        for (let i = 0; i < q.length; i++) {\r\n            const y = q[i];\r\n            for (let x = 0; x < this.letters; x++) {\r\n                const d = this.cosets[y][x];\r\n                if (d !== undefined) {\r\n                    let mu = this.findRep(y);\r\n                    let v = this.findRep(d);\r\n                    let mux = this.cosets[mu][x];\r\n                    if (mux !== undefined) {\r\n                        this.merge(v, mux, q);\r\n                    } else {\r\n                        this.cosets[mu][x] = v;\r\n                    }\r\n                    let vxinv = this.cosets[v][this.genInvMap[x]];\r\n                    if (vxinv !== undefined) {\r\n                        this.merge(mu, vxinv, q);\r\n                    } else {\r\n                        this.cosets[v][this.genInvMap[x]] = mu;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private merge(a: number, b: number, q: number[]) {\r\n        const i1 = this.findRep(a);\r\n        const i2 = this.findRep(b);\r\n        if (i1 !== i2) {\r\n            const u = Math.min(i1, i2);\r\n            const v = Math.max(i1, i2);\r\n            this.p[v] = u;\r\n            q.push(v);\r\n        }\r\n    }\r\n    private findRep(k: number) {\r\n        let l = k; let r = this.p[l];\r\n        while (r !== l) {\r\n            l = r; r = this.p[l];\r\n        }\r\n        let mu = k; r = this.p[mu];\r\n        while (r !== l) {\r\n            this.p[mu] = l; mu = r; r = this.p[mu];\r\n        }\r\n        return l;\r\n    }\r\n    private scanAndFill(coset: number, relation: number[]) {\r\n        const r = relation.length - 1;\r\n        let f = coset;\r\n        let i = 0;\r\n        let b = coset;\r\n        let j = r;\r\n        while (true) {\r\n            let fxi: number;\r\n            while (i <= r && (fxi = this.cosets[f][relation[i]]) !== undefined) {\r\n                f = fxi; i++;\r\n            }\r\n            if (i > r) {\r\n                if (f !== coset) this.coincidence(f, coset);\r\n                return;\r\n            }\r\n            let bxjinv: number;\r\n            while (j >= i && (bxjinv = this.cosets[b][this.genInvMap[relation[j]]]) !== undefined) {\r\n                b = bxjinv; j--;\r\n            }\r\n            if (j < i) {\r\n                this.coincidence(f, b);\r\n                return;\r\n            } else if (i === j) {\r\n                this.cosets[b][this.genInvMap[relation[i]]] = f;\r\n                this.cosets[f][relation[i]] = b;\r\n                return;\r\n            } else {\r\n                this.define(f, relation[i]);\r\n            }\r\n        }\r\n    }\r\n    enumerate() {\r\n        for (const w of this.subsets) {\r\n            this.scanAndFill(0, w);\r\n        }\r\n        for (let a = 0; a < this.cosets.length; a++) {\r\n            if (this.p[a] !== a) continue;\r\n            for (const w of this.relations) {\r\n                this.scanAndFill(a, w);\r\n                if (this.p[a] !== a) break;\r\n            }\r\n            if (this.p[a] !== a) continue;\r\n            for (let x = 0; x < this.letters; x++) {\r\n                if (this.cosets[a][x] === undefined) this.define(a, x);\r\n            }\r\n        }\r\n        this.compress();\r\n        this.standardize();\r\n        return this;\r\n    }\r\n    private compress() {\r\n        let j = 0;\r\n        let p2: number[] = [];\r\n        for (let i = 0; i < this.p.length; i++) {\r\n            if (this.p[i] === i) {\r\n                p2[i] = j++;\r\n            }\r\n        }\r\n        this.cosets = this.cosets.filter((v, i) => this.p[i] === i);\r\n        for (let i = 0; i < this.cosets.length; i++) {\r\n            for (let x = 0; x < this.letters; x++) {\r\n                this.cosets[i][x] = p2[this.p[this.cosets[i][x]]];\r\n            }\r\n        }\r\n        this.length = this.cosets.length;\r\n    }\r\n    private standardize() {\r\n        let y = 1;\r\n        for (let a = 0; a < this.cosets.length; a++) {\r\n            for (let x = 0; x < this.letters; x++) {\r\n                let b = this.cosets[a][x];\r\n                if (b >= y) {\r\n                    if (b > y) this.swapCoset(y, b);\r\n                    y++;\r\n                    if (y === this.length - 1) return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private swapCoset(b: number, y: number) {\r\n        let z = this.cosets[y]; this.cosets[y] = this.cosets[b]; this.cosets[b] = z;\r\n        for (let x = 0; x < this.letters; x++) {\r\n            const ix = this.genInvMap[x];\r\n            const u = this.cosets[y][x];\r\n            const v = this.cosets[b][x];\r\n            if (u === b) { this.cosets[y][x] = y; } else if (u === y) { this.cosets[y][x] = b; } else {\r\n                this.cosets[u][ix] = y;\r\n            }\r\n            if (v === b) { this.cosets[b][x] = y; } else if (v === y) { this.cosets[b][x] = b; } else {\r\n                this.cosets[v][ix] = b;\r\n            }\r\n        }\r\n    }\r\n    getRepresentatives() {\r\n        const represents = new Array<Relation>(this.cosets.length);\r\n        represents[0] = [];\r\n        for (let a = 0; a < this.cosets.length; a++) {\r\n            console.assert(represents[a] !== undefined);\r\n            for (let x = 0; x < this.letters; x++) {\r\n                const next = this.cosets[a][x];\r\n                if (!represents[next]) {\r\n                    represents[next] = represents[a].slice(0);\r\n                    represents[next].push(x);\r\n                }\r\n            }\r\n        }\r\n        return represents;\r\n    }\r\n    findCoset(w: Relation) {\r\n        let coset = 0;\r\n        w = w.slice(0);\r\n        let x: number;\r\n        while ((x = w.shift()) !== undefined) {\r\n            coset = this.cosets[coset][x];\r\n        }\r\n        return coset;\r\n    }\r\n}"],"names":[],"mappings":"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"}