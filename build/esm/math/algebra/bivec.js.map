{"version":3,"file":"bivec.js","sources":["../../../../src/math/algebra/bivec.ts"],"sourcesContent":["import { Pool } from \"../pool.js\";\r\nimport { Srand } from \"../random.js\";\r\nimport { Quaternion, _Q_1, _Q_2 } from \"./quaternion.js\";\r\nimport { Rotor } from \"./rotor.js\";\r\nimport { Vec3, _vec3_1, _vec3_2 } from \"./vec3.js\";\r\nimport { Vec4 } from \"./vec4.js\";\r\n\r\nexport class BivecPool extends Pool<Bivec>{\r\n    constructObject() { return new Bivec; }\r\n}\r\nexport const bivecPool = new BivecPool;\r\nexport class Bivec {\r\n    xy: number; xz: number; xw: number;\r\n    yz: number; yw: number; zw: number;\r\n    static readonly xy = new Bivec(1, 0, 0, 0, 0, 0);\r\n    static readonly xz = new Bivec(0, 1, 0, 0, 0, 0);\r\n    static readonly xw = new Bivec(0, 0, 1, 0, 0, 0);\r\n    static readonly yz = new Bivec(0, 0, 0, 1, 0, 0);\r\n    static readonly yw = new Bivec(0, 0, 0, 0, 1, 0);\r\n    static readonly zw = new Bivec(0, 0, 0, 0, 0, 1);\r\n    static readonly yx = new Bivec(-1, 0, 0, 0, 0, 0);\r\n    static readonly zx = new Bivec(0, -1, 0, 0, 0, 0);\r\n    static readonly wx = new Bivec(0, 0, -1, 0, 0, 0);\r\n    static readonly zy = new Bivec(0, 0, 0, -1, 0, 0);\r\n    static readonly wy = new Bivec(0, 0, 0, 0, -1, 0);\r\n    static readonly wz = new Bivec(0, 0, 0, 0, 0, -1);\r\n    isFinite(): boolean {\r\n        return isFinite(this.xy) && isFinite(this.xz) && isFinite(this.xw) && isFinite(this.yz) && isFinite(this.yw) && isFinite(this.zw);\r\n    }\r\n    constructor(\r\n        xy: number = 0, xz: number = 0, xw: number = 0,\r\n        yz: number = 0, yw: number = 0, zw: number = 0\r\n    ) {\r\n        this.xy = xy; this.xz = xz; this.xw = xw;\r\n        this.yz = yz; this.yw = yw; this.zw = zw;\r\n    }\r\n    copy(v: Bivec): Bivec {\r\n        this.xy = v.xy; this.xz = v.xz; this.xw = v.xw;\r\n        this.yz = v.yz; this.yw = v.yw; this.zw = v.zw; return this;\r\n    }\r\n    set(xy: number = 0, xz: number = 0, xw: number = 0,\r\n        yz: number = 0, yw: number = 0, zw: number = 0): Bivec {\r\n        this.xy = xy; this.xz = xz; this.xw = xw;\r\n        this.yz = yz; this.yw = yw; this.zw = zw; return this;\r\n    }\r\n    clone(): Bivec {\r\n        return new Bivec(this.xy, this.xz, this.xw, this.yz, this.yw, this.zw);\r\n    }\r\n    flat(): number[] {\r\n        return [this.xy, this.xz, this.xw, this.yz, this.yw, this.zw];\r\n    }\r\n    add(bv: Bivec): Bivec {\r\n        return new Bivec(\r\n            this.xy + bv.xy, this.xz + bv.xz,\r\n            this.xw + bv.xw, this.yz + bv.yz,\r\n            this.yw + bv.yw, this.zw + bv.zw\r\n        );\r\n    }\r\n    adds(bv: Bivec): Bivec {\r\n        this.xy += bv.xy; this.xz += bv.xz;\r\n        this.xw += bv.xw; this.yz += bv.yz;\r\n        this.yw += bv.yw; this.zw += bv.zw;\r\n        return this;\r\n    }\r\n    addset(bv1: Bivec, bv2: Bivec): Bivec {\r\n        return this.set(\r\n            bv1.xy + bv2.xy, bv1.xz + bv2.xz,\r\n            bv1.xw + bv2.xw, bv1.yz + bv2.yz,\r\n            bv1.yw + bv2.yw, bv1.zw + bv2.zw\r\n        );\r\n    }\r\n    addmulfs(bv: Bivec, k: number): Bivec {\r\n        this.xy += bv.xy * k; this.xz += bv.xz * k;\r\n        this.xw += bv.xw * k; this.yz += bv.yz * k;\r\n        this.yw += bv.yw * k; this.zw += bv.zw * k;\r\n        return this;\r\n    }\r\n    neg(): Bivec {\r\n        return new Bivec(-this.xy, -this.xz, -this.xw, -this.yz, -this.yw, -this.zw);\r\n    }\r\n    negs(): Bivec {\r\n        this.xy = -this.xy; this.xz = -this.xz; this.xw = -this.xw;\r\n        this.yz = -this.yz; this.yw = -this.yw; this.zw = -this.zw;\r\n        return this;\r\n    }\r\n    sub(bv: Bivec): Bivec {\r\n        return new Bivec(\r\n            this.xy - bv.xy, this.xz - bv.xz,\r\n            this.xw - bv.xw, this.yz - bv.yz,\r\n            this.yw - bv.yw, this.zw - bv.zw\r\n        );\r\n    }\r\n    subs(bv: Bivec): Bivec {\r\n        this.xy -= bv.xy; this.xz -= bv.xz;\r\n        this.xw -= bv.xw; this.yz -= bv.yz;\r\n        this.yw -= bv.yw; this.zw -= bv.zw;\r\n        return this;\r\n    }\r\n    subset(bv1: Bivec, bv2: Bivec): Bivec {\r\n        return this.set(\r\n            bv1.xy - bv2.xy, bv1.xz - bv2.xz,\r\n            bv1.xw - bv2.xw, bv1.yz - bv2.yz,\r\n            bv1.yw - bv2.yw, bv1.zw - bv2.zw\r\n        );\r\n    }\r\n    mulf(k: number): Bivec {\r\n        return new Bivec(k * this.xy, k * this.xz, k * this.xw, k * this.yz, k * this.yw, k * this.zw);\r\n    }\r\n    mulfs(k: number): Bivec {\r\n        this.xy *= k; this.xz *= k; this.xw *= k;\r\n        this.yz *= k; this.yw *= k; this.zw *= k;\r\n        return this;\r\n    }\r\n    divf(k: number): Bivec {\r\n        k = 1 / k;\r\n        return new Bivec(k * this.xy, k * this.xz, k * this.xw, k * this.yz, k * this.yw, k * this.zw);\r\n    }\r\n    divfs(k: number): Bivec {\r\n        k = 1 / k;\r\n        this.xy *= k; this.xz *= k; this.xw *= k;\r\n        this.yz *= k; this.yw *= k; this.zw *= k;\r\n        return this;\r\n    }\r\n    dot(biv: Bivec): number {\r\n        return this.xy * biv.xy + this.yz * biv.yz + this.zw * biv.zw + this.xw * biv.xw + this.xz * biv.xz + this.yw * biv.yw;\r\n    }\r\n    norm(): number {\r\n        return Math.sqrt(this.xy * this.xy + this.xz * this.xz + this.yz * this.yz + this.yw * this.yw + this.zw * this.zw + this.xw * this.xw);\r\n    }\r\n    norms(): Bivec {\r\n        let k = Math.sqrt(this.xy * this.xy + this.xz * this.xz + this.yz * this.yz + this.yw * this.yw + this.zw * this.zw + this.xw * this.xw);\r\n        k = k == 0 ? 0 : (1 / k);\r\n        this.xy *= k; this.xz *= k; this.xw *= k;\r\n        this.yz *= k; this.yw *= k; this.zw *= k; return this;\r\n    }\r\n    normsqr(): number {\r\n        return this.xy * this.xy + this.xz * this.xz + this.yz * this.yz + this.yw * this.yw + this.zw * this.zw + this.xw * this.xw;\r\n    }\r\n    norm1(): number {\r\n        return Math.abs(this.xy) + Math.abs(this.xz) + Math.abs(this.xw) + Math.abs(this.yz) + Math.abs(this.yw) + Math.abs(this.zw);\r\n    }\r\n    wedge(biv: Bivec): number {\r\n        return this.xy * biv.zw - this.xz * biv.yw + this.xw * biv.yz + this.yz * biv.xw - this.yw * biv.xz + this.zw * biv.xy;\r\n    }\r\n    dual(): Bivec {\r\n        return new Bivec(this.zw, -this.yw, this.yz, this.xw, -this.xz, this.xy);\r\n    }\r\n    duals(): Bivec {\r\n        var temp: number;\r\n        temp = this.xy; this.xy = this.zw; this.zw = temp;\r\n        temp = this.xz; this.xz = -this.yw; this.yw = -temp;\r\n        temp = this.xw; this.xw = this.yz; this.yz = temp;\r\n        return this;\r\n    }\r\n    wedgev(V: Vec4): Vec4 {\r\n        return new Vec4(\r\n            -this.yz * V.w - this.zw * V.y + this.yw * V.z,\r\n            this.xz * V.w + this.zw * V.x - this.xw * V.z,\r\n            -this.xy * V.w - this.yw * V.x + this.xw * V.y,\r\n            this.xy * V.z + this.yz * V.x - this.xz * V.y\r\n        );\r\n    }\r\n    wedgevvset(v1: Vec4, v2: Vec4) {\r\n        return this.set(\r\n            v1.x * v2.y - v1.y * v2.x,\r\n            v1.x * v2.z - v1.z * v2.x,\r\n            v1.x * v2.w - v1.w * v2.x,\r\n            v1.y * v2.z - v1.z * v2.y,\r\n            v1.y * v2.w - v1.w * v2.y,\r\n            v1.z * v2.w - v1.w * v2.z\r\n        );\r\n    }\r\n\r\n    /** Vector part of Geometry Product\r\n     * exy * ey = ex, exy * ex = -ey, exy * ez = 0\r\n     *  */\r\n    dotv(V: Vec4): Vec4 {\r\n        return new Vec4(\r\n            this.xy * V.y + this.xz * V.z + this.xw * V.w,\r\n            -this.xy * V.x + this.yz * V.z + this.yw * V.w,\r\n            -this.xz * V.x - this.yz * V.y + this.zw * V.w,\r\n            -this.xw * V.x - this.yw * V.y - this.zw * V.z\r\n        );\r\n    }\r\n    cross(V: Bivec): Bivec {\r\n        return new Bivec(\r\n            V.xz * this.yz - this.xz * V.yz + V.xw * this.yw - this.xw * V.yw,\r\n            -V.xy * this.yz + this.xy * V.yz + V.xw * this.zw - this.xw * V.zw,\r\n            -V.xy * this.yw + this.xy * V.yw - V.xz * this.zw + this.xz * V.zw,\r\n            V.xy * this.xz - this.xy * V.xz + V.yw * this.zw - this.yw * V.zw,\r\n            V.xy * this.xw - this.xy * V.xw - V.yz * this.zw + this.yz * V.zw,\r\n            V.xz * this.xw - this.xz * V.xw + V.yz * this.yw - this.yz * V.yw\r\n        );\r\n    }\r\n    crossset(b1: Bivec, b2: Bivec): Bivec {\r\n        return this.set(\r\n            b2.xz * b1.yz - b1.xz * b2.yz + b2.xw * b1.yw - b1.xw * b2.yw,\r\n            -b2.xy * b1.yz + b1.xy * b2.yz + b2.xw * b1.zw - b1.xw * b2.zw,\r\n            -b2.xy * b1.yw + b1.xy * b2.yw - b2.xz * b1.zw + b1.xz * b2.zw,\r\n            b2.xy * b1.xz - b1.xy * b2.xz + b2.yw * b1.zw - b1.yw * b2.zw,\r\n            b2.xy * b1.xw - b1.xy * b2.xw - b2.yz * b1.zw + b1.yz * b2.zw,\r\n            b2.xz * b1.xw - b1.xz * b2.xw + b2.yz * b1.yw - b1.yz * b2.yw\r\n        );\r\n    }\r\n    crossrs(V: Bivec): Bivec {\r\n        return this.set(\r\n            V.xz * this.yz - this.xz * V.yz + V.xw * this.yw - this.xw * V.yw,\r\n            -V.xy * this.yz + this.xy * V.yz + V.xw * this.zw - this.xw * V.zw,\r\n            -V.xy * this.yw + this.xy * V.yw - V.xz * this.zw + this.xz * V.zw,\r\n            V.xy * this.xz - this.xy * V.xz + V.yw * this.zw - this.yw * V.zw,\r\n            V.xy * this.xw - this.xy * V.xw - V.yz * this.zw + this.yz * V.zw,\r\n            V.xz * this.xw - this.xz * V.xw + V.yz * this.yw - this.yz * V.yw\r\n        );\r\n    }\r\n    exp(): Rotor {\r\n        // Hodge Dual decompose this to:\r\n        // A : self-dual part (*A = A)\r\n        // B : antiself-dual part (*B = -B)\r\n        // two parts are commutive, corresponded to QL and QR\r\n        // 1. If this is simple rotation of angle theta:\r\n        //   exy*(theta) represents rotate from x to y by angle theta\r\n        //   this can be divided into theta/2 of QL and QR rotation\r\n        //   A and B has norm of theta, so div 2\r\n        //   Quaternion formula: Q(cos, sin * vec3), vec3 is a unit vector\r\n        // 2. if this is right-handed isoclinic rotation of angle theta,\r\n        //   we use (exy + ezw)*(theta) to represent it\r\n        //   it's easy to verify that norm(A) = 2*theta, norm(B) = 0\r\n        //   then the same as simple rotation\r\n        let A = new Vec3(this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = new Vec3(this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        let a = A.norm(); let b = B.norm();\r\n        let aa = a * 0.5; let bb = b * 0.5;\r\n        let sa = (a > 0.005 ? Math.sin(aa) / a : 0.5 - a * a / 12);\r\n        let sb = (b > 0.005 ? Math.sin(bb) / b : 0.5 - b * b / 12);\r\n        return new Rotor(\r\n            new Quaternion(Math.cos(aa), sa * A.x, sa * A.y, sa * A.z),\r\n            new Quaternion(Math.cos(bb), sb * B.x, sb * B.y, sb * B.z)\r\n        );\r\n    }\r\n\r\n    /** return two angles [max, min] between a and b\r\n     * \"a\" and \"b\" must be normalized simple bivectors*/\r\n    static angle(a: Bivec, b: Bivec): number[] {\r\n        let cc = a.dot(b); let ss = a.wedge(b);\r\n        let ccpss = cc + ss;\r\n        let ccmss = cc - ss;\r\n        if (Math.abs(ccpss) > 1) ccpss = Math.sign(ccpss);\r\n        if (Math.abs(ccmss) > 1) ccmss = Math.sign(ccmss);\r\n        let sub = Math.acos(ccpss);\r\n        let add = Math.acos(ccmss);\r\n        return [(add + sub) * 0.5, (add - sub) * 0.5];\r\n    }\r\n    rotate(r: Rotor): Bivec {\r\n        // a novel method to calculate bivec rotation using isoclinic decomposition\r\n        let A = _Q_1.set(0, this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = _Q_2.set(0, this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        // self-dual bivec is invariant under rotation generated by antiself-dual bivec\r\n        // so we only compute A * r.l and B * r.r\r\n        // rotating with 3 bases in A, B respectly behave like rotation in two 3D spaces respectly\r\n        // so we use 3D quaternion rotation formula\r\n        A.mulsl(r.l).mulsrconj(r.l);\r\n        B.mulslconj(r.r).mulsr(r.r);\r\n        // recover from isoclinic representation\r\n        return new Bivec(\r\n            A.y + B.y, A.z + B.z, A.w + B.w, A.w - B.w, B.z - A.z, A.y - B.y\r\n        ).mulfs(0.5);\r\n    }\r\n    rotates(r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = _Q_2.set(0, this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        A.mulsl(r.l).mulsrconj(r.l);\r\n        B.mulslconj(r.r).mulsr(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    rotatesconj(r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, this.xy + this.zw, this.xz - this.yw, this.xw + this.yz);\r\n        let B = _Q_2.set(0, this.xy - this.zw, this.xz + this.yw, this.xw - this.yz);\r\n        A.mulslconj(r.l).mulsr(r.l);\r\n        B.mulsl(r.r).mulsrconj(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    rotateset(bivec: Bivec, r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, bivec.xy + bivec.zw, bivec.xz - bivec.yw, bivec.xw + bivec.yz);\r\n        let B = _Q_2.set(0, bivec.xy - bivec.zw, bivec.xz + bivec.yw, bivec.xw - bivec.yz);\r\n        A.mulsl(r.l).mulsrconj(r.l);\r\n        B.mulslconj(r.r).mulsr(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    rotateconjset(bivec: Bivec, r: Rotor): Bivec {\r\n        let A = _Q_1.set(0, bivec.xy + bivec.zw, bivec.xz - bivec.yw, bivec.xw + bivec.yz);\r\n        let B = _Q_2.set(0, bivec.xy - bivec.zw, bivec.xz + bivec.yw, bivec.xw - bivec.yz);\r\n        A.mulslconj(r.l).mulsr(r.l);\r\n        B.mulsl(r.r).mulsrconj(r.r);\r\n        this.xy = (A.y + B.y) * 0.5; this.xz = (A.z + B.z) * 0.5; this.xw = (A.w + B.w) * 0.5;\r\n        this.yz = (A.w - B.w) * 0.5; this.yw = (B.z - A.z) * 0.5; this.zw = (A.y - B.y) * 0.5;\r\n        return this;\r\n    }\r\n    /** return a random oriented simple normalized bivector */\r\n    static rand(): Bivec {\r\n        // sampled in isoclinic space uniformly for left and right part respectively\r\n        let a = _vec3_1.randset().mulfs(0.5);\r\n        let b = _vec3_2.randset().mulfs(0.5);\r\n        return new Bivec(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    randset(): Bivec {\r\n        // sampled in isoclinic space uniformly for left and right part respectively\r\n        let a = _vec3_1.randset().mulfs(0.5);\r\n        let b = _vec3_2.randset().mulfs(0.5);\r\n        return this.set(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    /** return a random oriented simple normalized bivector by seed */\r\n    static srand(seed: Srand): Bivec {\r\n        let a = _vec3_1.srandset(seed).mulfs(0.5);\r\n        let b = _vec3_2.srandset(seed).mulfs(0.5);\r\n        return new Bivec(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    srandset(seed: Srand): Bivec {\r\n        let a = _vec3_1.srandset(seed).mulfs(0.5);\r\n        let b = _vec3_2.srandset(seed).mulfs(0.5);\r\n        return this.set(a.x + b.x, a.y + b.y, a.z + b.z, a.z - b.z, b.y - a.y, a.x - b.x);\r\n    }\r\n    pushPool(pool: BivecPool = bivecPool) {\r\n        pool.push(this);\r\n    }\r\n}\r\n\r\nexport let _bivec = new Bivec();"],"names":[],"mappings":"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"}