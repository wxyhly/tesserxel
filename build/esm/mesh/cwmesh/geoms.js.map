{"version":3,"file":"geoms.js","sources":["../../../../src/mesh/cwmesh/geoms.ts"],"sourcesContent":["import { Vec4 } from \"../../math/algebra/vec4.js\";\r\nimport { _180 } from \"../../math/const.js\";\r\nimport { Polytope } from \"../../math/geometry/polytope.js\";\r\nimport { Bivec } from \"../../math/math.js\";\r\nimport { CWMesh, CWMeshSelection, Face } from \"./cwmesh.js\";\r\n\r\nexport function polytope(schlafli: number[]) {\r\n    const m = new CWMesh();\r\n    if (!schlafli) {\r\n        m.data = [[new Vec4]]; return m;\r\n    }\r\n    if (schlafli.length === 0) {\r\n        m.data = [[Vec4.xNeg.clone(), Vec4.x.clone()], [[0, 1]]]; return m;\r\n    }\r\n    const dim = schlafli.length + 1;\r\n    m.data = new Polytope(schlafli).getRegularPolytope();\r\n    m.data.push([m.data[dim - 1].map((_, i: number) => i)]);\r\n    m.calculateOrientationInFace(dim, 0);\r\n    m.flipOrientation(dim - 1, Array.from(m.orientation[dim][0].entries()).filter(\r\n        ([idx, o]) => o === false\r\n    ).map(([idx, o]) => m.data[dim][0][idx]));\r\n    return m;\r\n}\r\nexport function truncatedPolytope(schlafli: number[], t: number) {\r\n    const m = new CWMesh();\r\n    if (!schlafli) {\r\n        m.data = [[new Vec4]]; return m;\r\n    }\r\n    if (schlafli.length === 0) {\r\n        m.data = [[Vec4.xNeg.clone(), Vec4.x.clone()], [[0, 1]]]; return m;\r\n    }\r\n    const dim = schlafli.length + 1;\r\n    m.data = new Polytope(schlafli).getTrucatedRegularPolytope(t);\r\n    m.data.push([m.data[dim - 1].map((_, i: number) => i)]);\r\n    m.calculateOrientationInFace(dim, 0);\r\n    m.flipOrientation(dim - 1, Array.from(m.orientation[dim][0].entries()).filter(\r\n        ([idx, o]) => o === false\r\n    ).map(([idx, o]) => m.data[dim][0][idx]));\r\n    return m;\r\n}\r\n\r\nexport function bitruncatedPolytope(schlafli: number[], t: number=0.5) {\r\n    const m = new CWMesh();\r\n    if (!schlafli) {\r\n        m.data = [[new Vec4]]; return m;\r\n    }\r\n    const dim = schlafli.length + 1;\r\n    m.data = new Polytope(schlafli).getBitrucatedRegularPolytope(t);\r\n    m.data.push([m.data[dim - 1].map((_, i: number) => i)]);\r\n    m.calculateOrientationInFace(dim, 0);\r\n    m.flipOrientation(dim - 1, Array.from(m.orientation[dim][0].entries()).filter(\r\n        ([idx, o]) => o === false\r\n    ).map(([idx, o]) => m.data[dim][0][idx]));\r\n    return m;\r\n}\r\nexport function path(points: Vec4[] | number, closed?: boolean) {\r\n\r\n    const mesh = new CWMesh;\r\n    let n: number;\r\n    if (typeof points === \"number\") {\r\n        // abstract cwmesh\r\n        mesh.data[0] = new Array(points).fill([]);\r\n        n = points;\r\n    } else {\r\n        mesh.data[0] = points.slice(0);\r\n        n = points.length;\r\n    }\r\n    mesh.data[1] = [];\r\n    for (let i = 0; i < n - 1; i++) {\r\n        (mesh.data[1] as Face[]).push([i, i + 1]);\r\n    }\r\n    if (closed) (mesh.data[1] as Face[]).push([n - 1, 0]);\r\n    // throw \"not test yet\";\r\n    return mesh;\r\n}\r\nfunction range(i: number) {\r\n    const arr = [];\r\n    for (let j = 0; j < i; j++) { arr.push(j); }\r\n    return arr;\r\n}\r\nexport function solidTorus(majorRadius: number, minorRadius: number, u: number, v: number) {\r\n    const circle = polytope([u]).apply(v => v.set(v.x * minorRadius + majorRadius, 0, v.y * minorRadius));\r\n    circle.makeRotatoid(Bivec.xy, v);\r\n    return circle;\r\n}\r\nexport function ball2(u: number, v: number) {\r\n    const arr: Vec4[] = [];\r\n    const dangle = _180 / (v + 2);\r\n    for (let i = dangle, j = 0; j < v; i += dangle, j++) {\r\n        arr.push(new Vec4(0, Math.sin(i), Math.cos(i)));\r\n    }\r\n    // longitude without 2 polar points\r\n    const longitude = path(arr);\r\n\r\n    const info = longitude.makeRotatoid(Bivec.xy, u);\r\n    const northLines = new Set<number>();\r\n    const southLines = new Set<number>();\r\n    for (const [equatorLineId, subinfo] of info[1]) {\r\n        northLines.add(subinfo[0].get(0));\r\n        southLines.add(subinfo[0].get(v - 1));\r\n    }\r\n    longitude.makePyramid(new Vec4(0, 0, 1), new CWMeshSelection(longitude, [undefined, northLines]));\r\n    longitude.makePyramid(new Vec4(0, 0, -1), new CWMeshSelection(longitude, [undefined, southLines]));\r\n    longitude.data[3] = [range(longitude.data[2].length)];\r\n    longitude.calculateOrientationInFace(3, 0);\r\n    return longitude;\r\n}\r\nexport function ball3(u: number, v: number, w: number) {\r\n    // todo\r\n}"],"names":[],"mappings":"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"}