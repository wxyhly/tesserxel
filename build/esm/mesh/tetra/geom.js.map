{"version":3,"file":"geom.js","sources":["../../../../src/mesh/tetra/geom.ts"],"sourcesContent":["import { Obj4 } from \"../../math/algebra/affine\";\r\nimport { Bivec } from \"../../math/algebra/bivec\";\r\nimport { Mat4 } from \"../../math/algebra/mat4\";\r\nimport { Rotor } from \"../../math/algebra/rotor\";\r\nimport { Vec3 } from \"../../math/algebra/vec3\";\r\nimport { Vec4 } from \"../../math/algebra/vec4\";\r\nimport { _180, _360, _90 } from \"../../math/const\";\r\nimport { Spline } from \"../../math/geometry/spline\";\r\nimport * as face from \"../../mesh/face\";\r\nimport { CWMesh } from \"../cwmesh/cwmesh\";\r\nimport { concat, TetraMesh } from \"./tetramesh\";\r\n\r\nexport let cube = new TetraMesh({\r\n    position: new Float32Array([\r\n        1, 0, -1, -1,\r\n        1, 0, 1, 1,\r\n        -1, 0, -1, 1,\r\n        -1, 0, 1, -1,\r\n\r\n        -1, 0, -1, -1,\r\n        1, 0, -1, -1,\r\n        -1, 0, -1, 1,\r\n        -1, 0, 1, -1,\r\n\r\n        1, 0, 1, 1,\r\n        -1, 0, 1, 1,\r\n        -1, 0, -1, 1,\r\n        -1, 0, 1, -1,\r\n\r\n        1, 0, 1, 1,\r\n        1, 0, -1, -1,\r\n        1, 0, 1, -1,\r\n        -1, 0, 1, -1,\r\n\r\n        1, 0, 1, 1,\r\n        1, 0, -1, -1,\r\n        -1, 0, -1, 1,\r\n        1, 0, -1, 1,\r\n    ]),\r\n    normal: new Float32Array([\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 1, 0, 0,\r\n    ]),\r\n    uvw: new Float32Array([\r\n        1, -1, -1, 0,\r\n        1, 1, 1, 0,\r\n        -1, -1, 1, 0,\r\n        -1, 1, -1, 0,\r\n        -1, -1, -1, 0,\r\n        1, -1, -1, 0,\r\n        -1, -1, 1, 0,\r\n        -1, 1, -1, 0,\r\n        1, 1, 1, 0,\r\n        -1, 1, 1, 0,\r\n        -1, -1, 1, 0,\r\n        -1, 1, -1, 0,\r\n        1, 1, 1, 0,\r\n        1, -1, -1, 0,\r\n        1, 1, -1, 0,\r\n        -1, 1, -1, 0,\r\n        1, 1, 1, 0,\r\n        1, -1, -1, 0,\r\n        -1, -1, 1, 0,\r\n        1, -1, 1, 0,\r\n    ]),\r\n    count: 5\r\n});\r\n\r\nexport function tesseract(): TetraMesh {\r\n    let rotor = new Rotor();\r\n    let biv = new Bivec();\r\n    let yface = cube.clone().applyObj4(new Obj4(Vec4.y, rotor.expset(biv.set(0, _90))));\r\n    let meshes = [\r\n        biv.set(_90).exp(),\r\n        biv.set(-_90).exp().mulsl(rotor.expset(biv.set(0, 0, 0, 0, _180))),\r\n        biv.set(0, 0, 0, _90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(0, 0, 0, -_90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(0, 0, 0, 0, _90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(0, 0, 0, 0, -_90).exp().mulsl(rotor.expset(biv.set(_90, 0, 0, 0, 0))),\r\n        biv.set(_180).exp(),\r\n    ].map(r => yface.clone().applyObj4(new Obj4(new Vec4(), r)));\r\n    meshes.push(yface);\r\n    let m = concat(meshes);\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 20; j++) {\r\n            m.uvw[i * 80 + j * 4 + 3] = i;\r\n        }\r\n    }\r\n    return m;\r\n}\r\nexport let hexadecachoron = new TetraMesh({\r\n    position: new Float32Array([\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        0, 1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        0, 1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n        0, -1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        0, -1, 0, 0,\r\n        1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n\r\n        0, 1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        -1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        -1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        0, 1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n        -1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n        0, -1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, -1,\r\n        0, -1, 0, 0,\r\n        -1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, 1,\r\n        -1, 0, 0, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 0, 0, -1,\r\n\r\n    ]),\r\n    normal: new Float32Array([\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, 0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, 0.5, -0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, 0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n        0.5, 0.5, -0.5, -0.5,\r\n\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, 0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, 0.5, -0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, 0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n        0.5, -0.5, -0.5, -0.5,\r\n\r\n\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, 0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, 0.5, -0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, 0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n        -0.5, 0.5, -0.5, -0.5,\r\n\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, 0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, 0.5, -0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, 0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n        -0.5, -0.5, -0.5, -0.5,\r\n    ]),\r\n    uvw: new Float32Array([\r\n        0, 0, 0, 0,\r\n        1, 1, 0, 0,\r\n        1, 0, 1, 0,\r\n        0, 1, 1, 0,\r\n        0, 0, 0, 1,\r\n        1, 1, 0, 1,\r\n        1, 0, 1, 1,\r\n        0, 1, 1, 1,\r\n        0, 0, 0, 2,\r\n        1, 1, 0, 2,\r\n        1, 0, 1, 2,\r\n        0, 1, 1, 2,\r\n        0, 0, 0, 3,\r\n        1, 1, 0, 3,\r\n        1, 0, 1, 3,\r\n        0, 1, 1, 3,\r\n        0, 0, 0, 4,\r\n        1, 1, 0, 4,\r\n        1, 0, 1, 4,\r\n        0, 1, 1, 4,\r\n        0, 0, 0, 5,\r\n        1, 1, 0, 5,\r\n        1, 0, 1, 5,\r\n        0, 1, 1, 5,\r\n        0, 0, 0, 6,\r\n        1, 1, 0, 6,\r\n        1, 0, 1, 6,\r\n        0, 1, 1, 6,\r\n        0, 0, 0, 7,\r\n        1, 1, 0, 7,\r\n        1, 0, 1, 7,\r\n        0, 1, 1, 7,\r\n        0, 0, 0, 8,\r\n        1, 1, 0, 8,\r\n        1, 0, 1, 8,\r\n        0, 1, 1, 8,\r\n        0, 0, 0, 9,\r\n        1, 1, 0, 9,\r\n        1, 0, 1, 9,\r\n        0, 1, 1, 9,\r\n        0, 0, 0, 10,\r\n        1, 1, 0, 10,\r\n        1, 0, 1, 10,\r\n        0, 1, 1, 10,\r\n        0, 0, 0, 11,\r\n        1, 1, 0, 11,\r\n        1, 0, 1, 11,\r\n        0, 1, 1, 11,\r\n        0, 0, 0, 12,\r\n        1, 1, 0, 12,\r\n        1, 0, 1, 12,\r\n        0, 1, 1, 12,\r\n        0, 0, 0, 13,\r\n        1, 1, 0, 13,\r\n        1, 0, 1, 13,\r\n        0, 1, 1, 13,\r\n        0, 0, 0, 14,\r\n        1, 1, 0, 14,\r\n        1, 0, 1, 14,\r\n        0, 1, 1, 14,\r\n        0, 0, 0, 15,\r\n        1, 1, 0, 15,\r\n        1, 0, 1, 15,\r\n        0, 1, 1, 15,\r\n    ]),\r\n    count: 16\r\n});\r\nexport function glome(radius: number, xySegment: number, zwSegment: number, latitudeSegment: number) {\r\n    if (xySegment < 3) xySegment = 3;\r\n    if (zwSegment < 3) zwSegment = 3;\r\n    if (latitudeSegment < 1) latitudeSegment = 1;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _360;\r\n        let w = uvw.z * _90;\r\n        let cos = Math.cos(w) * radius;\r\n        let sin = Math.sin(w) * radius;\r\n        pos.set(-Math.cos(u) * cos, Math.sin(u) * cos, Math.cos(v) * sin, Math.sin(v) * sin);\r\n        norm.copy(pos);\r\n    }, xySegment, zwSegment, latitudeSegment);\r\n}\r\n\r\nexport function spheritorus(\r\n    sphereRadius: number, longitudeSegment: number, latitudeSegment: number,\r\n    circleRadius: number, circleSegment: number\r\n) {\r\n    if (longitudeSegment < 3) longitudeSegment = 3;\r\n    if (latitudeSegment < 3) latitudeSegment = 3;\r\n    if (circleSegment < 3) circleSegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _180;\r\n        let w = uvw.z * _360;\r\n        let sv = Math.sin(v);\r\n        let radius = circleRadius + sv * Math.cos(u) * sphereRadius;\r\n        let sw = Math.sin(w) * radius;\r\n        let cw = Math.cos(w) * radius;\r\n        pos.set(\r\n            -cw, sv * Math.sin(u) * sphereRadius, Math.cos(v) * sphereRadius, sw\r\n        );\r\n        norm.set(\r\n            -sv * Math.cos(u) * Math.cos(w),\r\n            sv * Math.sin(u),\r\n            Math.cos(v),\r\n            sv * Math.cos(u) * Math.sin(w),\r\n        );\r\n    }, longitudeSegment, latitudeSegment, circleSegment);\r\n}\r\nexport function torisphere(\r\n    circleRadius: number, circleSegment: number,\r\n    sphereRadius: number, longitudeSegment: number, latitudeSegment: number\r\n) {\r\n    if (longitudeSegment < 3) longitudeSegment = 3;\r\n    if (latitudeSegment < 3) latitudeSegment = 3;\r\n    if (circleSegment < 3) circleSegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = -uvw.x * _360;\r\n        let v = uvw.y * _180;\r\n        let w = uvw.z * _360;\r\n        let sv = Math.sin(v);\r\n        let cw = Math.cos(w);\r\n        let radius = circleRadius * cw + sphereRadius;\r\n        pos.set(\r\n            sv * Math.cos(u) * radius,\r\n            circleRadius * Math.sin(w),\r\n            sv * Math.sin(u) * radius,\r\n            Math.cos(v) * radius,\r\n        );\r\n        norm.set(\r\n            sv * Math.cos(u) * cw,\r\n            Math.sin(w),\r\n            sv * Math.sin(u) * cw,\r\n            Math.cos(v) * cw,\r\n        );\r\n    }, longitudeSegment, latitudeSegment, circleSegment);\r\n}\r\nexport function spherinderSide(radius1: number, radius2: number, longitudeSegment: number, latitudeSegment: number, height: number, heightSegment: number = 1) {\r\n    if (longitudeSegment < 3) longitudeSegment = 3;\r\n    if (latitudeSegment < 3) latitudeSegment = 3;\r\n    if (heightSegment < 1) heightSegment = 1;\r\n    const avgRadius = (radius1 + radius2) * 0.5;\r\n    const len = 1 / Math.hypot(radius2 - radius1, height);\r\n    // const slope = (radius2 - radius1) / height;\r\n    const sinS = (radius2 - radius1) * len;\r\n    const cosS = height * len;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n        let u = uvw.x * _180;\r\n        let v = uvw.y * _360;\r\n        let w = uvw.z - 0.5;\r\n        let radius = avgRadius + (radius2 - radius1) * w;\r\n        let su = Math.sin(u);\r\n        let cu = Math.cos(u);\r\n        pos.set(Math.sin(v) * su * radius, Math.cos(v) * su * radius, -cu * radius, w * height);\r\n        su *= cosS;\r\n        // norm.set(Math.sin(v) * cu, Math.cos(v) * cu, su, 0);\r\n        norm.set(Math.sin(v) * su, Math.cos(v) * su, -cosS * cu, -sinS);\r\n    }, longitudeSegment, latitudeSegment, heightSegment);\r\n}\r\nexport function sphere(radius: number, u: number, v: number) {\r\n    return rotatoid(Bivec.yz, face.polygon(new Array(u).fill(0).map((_, i) =>\r\n        new Vec4(\r\n            Math.cos(i / (u - 1) * _180) * radius,\r\n            Math.sin(i / (u - 1) * _180) * radius,\r\n        )\r\n    )).toNonIndexMesh().setConstantNormal(Vec4.w), v);\r\n}\r\nexport function tiger(xyRadius: number, xySegment: number, zwRadius: number, zwSegment: number, secondaryRadius: number, secondarySegment: number) {\r\n    if (xySegment < 3) xySegment = 3;\r\n    if (zwSegment < 3) zwSegment = 3;\r\n    if (secondarySegment < 3) secondarySegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _360;\r\n        let w = uvw.z * _360;\r\n        let su = Math.sin(w);\r\n        let cu = Math.cos(w);\r\n\r\n        pos.set(\r\n            (su * secondaryRadius + xyRadius) * Math.sin(u),\r\n            (su * secondaryRadius + xyRadius) * Math.cos(u),\r\n            (cu * secondaryRadius + zwRadius) * Math.sin(v),\r\n            (cu * secondaryRadius + zwRadius) * Math.cos(v),\r\n        );\r\n        norm.set(\r\n            su * Math.sin(u),\r\n            su * Math.cos(u),\r\n            cu * Math.sin(v),\r\n            cu * Math.cos(v),\r\n        );\r\n    }, xySegment, zwSegment, secondarySegment);\r\n}\r\n\r\nexport function ditorus(majorRadius: number, majorSegment: number, middleRadius: number, middleSegment: number, minorRadius: number, minorSegment: number) {\r\n    if (majorSegment < 3) majorSegment = 3;\r\n    if (middleSegment < 3) middleSegment = 3;\r\n    if (minorSegment < 3) minorSegment = 3;\r\n    return parametricSurface((uvw, pos, norm) => {\r\n\r\n        let u = uvw.x * _360;\r\n        let v = uvw.y * _360;\r\n        let w = uvw.z * _360;\r\n        let cw = Math.cos(w);\r\n        const R2 = middleRadius + minorRadius * cw;\r\n        const R1 = majorRadius + R2 * Math.cos(v);\r\n        pos.set(\r\n            R1 * Math.cos(u),\r\n            R1 * Math.sin(u),\r\n            R2 * Math.sin(v),\r\n            minorRadius * Math.sin(w),\r\n        );\r\n        norm.set(\r\n            cw * Math.cos(v) * Math.cos(u),\r\n            cw * Math.cos(v) * Math.sin(u),\r\n            cw * Math.sin(v),\r\n            Math.sin(w),\r\n        );\r\n    }, majorSegment, middleSegment, minorSegment);\r\n}\r\n\r\nexport function parametricSurface(\r\n    fn: (inputUVW: Vec3, outputPosition: Vec4, outputNormal: Vec4) => void,\r\n    uSegment: number, vSegment: number, wSegment: number\r\n): TetraMesh {\r\n    if (uSegment < 1) uSegment = 1;\r\n    if (vSegment < 1) vSegment = 1;\r\n    if (wSegment < 1) wSegment = 1;\r\n    let count = uSegment * vSegment * wSegment * 5;\r\n    let arraySize = count << 4;\r\n    uSegment++; vSegment++; wSegment++;\r\n    let vw_seg = vSegment * wSegment;\r\n    let uvw_seg = uSegment * vw_seg;\r\n    let positions = new Float32Array((uvw_seg) << 2);\r\n    let normals = new Float32Array((uvw_seg) << 2);\r\n    let uvws = new Float32Array((uvw_seg) << 2);\r\n    let position = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let inputUVW = new Vec3;\r\n    let idxbuffer = new Uint32Array(8);\r\n    let outputVertex = new Vec4;\r\n    let outputNormal = new Vec4;\r\n    let ptr = 0;\r\n    let idxPtr = 0;\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    function pushTetra(a: number, b: number, c: number, d: number) {\r\n        a = idxbuffer[a];\r\n        b = idxbuffer[b];\r\n        c = idxbuffer[c];\r\n        d = idxbuffer[d];\r\n        function same(offset1: number, offset2: number) {\r\n            return positions[offset1] === positions[offset2] &&\r\n                positions[offset1 + 1] === positions[offset2 + 1] &&\r\n                positions[offset1 + 2] === positions[offset2 + 2] &&\r\n                positions[offset1 + 3] === positions[offset2 + 3];\r\n        }\r\n        if (!(same(a, b) || same(a, c) || same(a, d) || same(b, c) || same(b, d))) {\r\n            pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n        }\r\n    }\r\n    for (let u_index = 0; u_index < uSegment; u_index++) {\r\n        inputUVW.x = u_index / (uSegment - 1);\r\n        let u_offset = vSegment * u_index;\r\n        for (let v_index = 0; v_index < vSegment; v_index++) {\r\n            inputUVW.y = v_index / (vSegment - 1);\r\n            let v_offset = wSegment * (v_index + u_offset);\r\n            for (let w_index = 0; w_index < wSegment; w_index++) {\r\n                inputUVW.z = w_index / (wSegment - 1);\r\n                fn(inputUVW, outputVertex, outputNormal);\r\n                positions[ptr++] = outputVertex.x;\r\n                positions[ptr++] = outputVertex.y;\r\n                positions[ptr++] = outputVertex.z;\r\n                positions[ptr++] = outputVertex.w;\r\n                ptr -= 4;\r\n                normals[ptr++] = outputNormal.x;\r\n                normals[ptr++] = outputNormal.y;\r\n                normals[ptr++] = outputNormal.z;\r\n                normals[ptr++] = outputNormal.w;\r\n                ptr -= 4;\r\n                uvws[ptr++] = inputUVW.x;\r\n                uvws[ptr++] = inputUVW.y;\r\n                uvws[ptr++] = inputUVW.z;\r\n                uvws[ptr++] = 0;\r\n                if (u_index && v_index && w_index) {\r\n                    let offset = w_index + v_offset;\r\n                    idxbuffer[0] = offset << 2;\r\n                    idxbuffer[1] = offset - 1 << 2;\r\n                    idxbuffer[2] = offset - wSegment << 2;\r\n                    idxbuffer[3] = offset - wSegment - 1 << 2;\r\n                    idxbuffer[4] = offset - vw_seg << 2;\r\n                    idxbuffer[5] = offset - vw_seg - 1 << 2;\r\n                    idxbuffer[6] = offset - vw_seg - wSegment << 2;\r\n                    idxbuffer[7] = offset - vw_seg - wSegment - 1 << 2;\r\n                    pushTetra(0, 1, 2, 4);\r\n                    pushTetra(1, 5, 7, 4);\r\n                    pushTetra(1, 2, 7, 3);\r\n                    pushTetra(4, 6, 7, 2);\r\n                    pushTetra(1, 2, 4, 7);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new TetraMesh({ position, normal, uvw, count });\r\n}\r\nexport function convexhull(points: Vec4[]) {\r\n    // todo: fix a random dead loop bug\r\n    if (points.length < 5) return;\r\n    points.sort((a, b) => Math.random() - 0.5);\r\n    let _vec41 = new Vec4();\r\n    let _vec42 = new Vec4();\r\n    let _vec43 = new Vec4();\r\n    let _vec44 = new Vec4();\r\n    // let _vec45 = new Vec4();\r\n    let _mat4 = new Mat4();\r\n    let determinant = 0;\r\n    let nobreak = true;\r\n    let a = 0, b = 1, c = 2, d = 3, e = 4;\r\n    let epsilon = 1e-10;\r\n    for (a = 0; a < points.length && nobreak; a++) {\r\n        for (b = a + 1; b < points.length && nobreak; b++) {\r\n            for (c = b + 1; c < points.length && nobreak; c++) {\r\n                for (d = c + 1; d < points.length && nobreak; d++) {\r\n                    for (e = d + 1; e < points.length; e++) {\r\n                        determinant = det(a, b, c, d, e);\r\n                        if (Math.abs(determinant) > epsilon) {\r\n                            nobreak = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (determinant === 0) return;\r\n    let temp: Vec4; b--; c--; d--; a--;\r\n    temp = points[0]; points[0] = points[a]; points[a] = temp;\r\n    if (b === 0) b = a; if (c === 0) c = a; if (d === 0) d = a; if (e === 0) e = a;\r\n    temp = points[1]; points[1] = points[b]; points[b] = temp;\r\n    if (c === 1) c = b; if (d === 1) d = b; if (e === 1) e = b;\r\n    temp = points[2]; points[2] = points[c]; points[c] = temp;\r\n    if (d === 2) d = c; if (e === 2) e = c;\r\n    temp = points[3]; points[3] = points[d]; points[d] = temp;\r\n    if (e === 3) e = d;\r\n    temp = points[4]; points[4] = points[e]; points[e] = temp;\r\n    let count = 5; // indices.length === count * 4 always is true\r\n    console.log(determinant);\r\n    console.log(det(0, 1, 2, 3, 4));\r\n    let indices = det(0, 1, 2, 3, 4) > 0 ?\r\n        [1, 2, 3, 4, 2, 0, 3, 4, 0, 1, 3, 4, 1, 0, 2, 4, 0, 1, 2, 3]\r\n        :\r\n        [2, 1, 3, 4, 0, 2, 3, 4, 1, 0, 3, 4, 0, 1, 2, 4, 1, 0, 2, 3];\r\n    function det(a: number, b: number, c: number, d: number, e: number) {\r\n        let p = points[e];\r\n        return _mat4.augVec4set(\r\n            _vec41.subset(p, points[a]),\r\n            _vec42.subset(p, points[b]),\r\n            _vec43.subset(p, points[c]),\r\n            _vec44.subset(p, points[d]),\r\n        ).det();\r\n    }\r\n    for (let cursor = 5; cursor < points.length; cursor++) {\r\n        let newIndices = [];\r\n        // borderformat [v1,v2,v3,flag], v1>v2>v3, \r\n        // flag: 1 orientation +, 0 orientation -, 2 duplicate remove\r\n        let border: number[][] = [];\r\n        function checkBorder(a: number, b: number, c: number) {\r\n            let item = a > b ? b > c ? [a, b, c, 1] : a > c ? [a, c, b, 0] : [c, a, b, 1] :\r\n                a > c ? [b, a, c, 0] : b > c ? [b, c, a, 1] : [c, b, a, 0];\r\n            let found = false;\r\n            for (let i of border) {\r\n                if (i[0] === item[0] && i[1] === item[1] && i[2] === item[2]) {\r\n                    i[3] = 2;\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                border.push(item);\r\n            }\r\n        }\r\n        for (let cell = 0; cell < count; cell++) {\r\n            let a = indices[cell << 2];\r\n            let b = indices[(cell << 2) + 1];\r\n            let c = indices[(cell << 2) + 2];\r\n            let d = indices[(cell << 2) + 3];\r\n            let determinant = det(a, b, c, d, cursor);\r\n            if (determinant < epsilon) {\r\n                checkBorder(b, c, d);\r\n                checkBorder(c, a, d);\r\n                checkBorder(a, b, d);\r\n                checkBorder(b, a, c);\r\n            } else {\r\n                newIndices.push(a, b, c, d);\r\n            }\r\n        }\r\n        for (let b of border) {\r\n            if (b[3] === 2) continue;\r\n            else if (b[3] === 0) newIndices.push(b[0], b[1], b[2], cursor);\r\n            else if (b[3] === 1) newIndices.push(b[0], b[2], b[1], cursor);\r\n        }\r\n        indices = newIndices;\r\n        count = indices.length >> 2;\r\n    }\r\n    let position = new Float32Array(count << 4);\r\n    let countPtr = 0;\r\n    for (let p = 0; p < count; p++) {\r\n        points[indices[(p << 2)]].writeBuffer(position, countPtr); countPtr += 4;\r\n        points[indices[(p << 2) + 1]].writeBuffer(position, countPtr); countPtr += 4;\r\n        points[indices[(p << 2) + 2]].writeBuffer(position, countPtr); countPtr += 4;\r\n        points[indices[(p << 2) + 3]].writeBuffer(position, countPtr); countPtr += 4;\r\n    }\r\n    return new TetraMesh({\r\n        position,\r\n        count\r\n    });\r\n}\r\n\r\nexport function duocylinder(xyRadius: number, xySegment: number, zwRadius: number, zwSegment: number) {\r\n    let dp = directProduct(face.circle(xyRadius, xySegment), face.circle(zwRadius, zwSegment));\r\n    for (let i = 0; i < dp.uvw.length; i += 4) {\r\n        dp.uvw[i + 2] = dp.uvw[i + 3] < 0.5 ? Math.atan2(dp.position[i + 3], dp.position[i + 2]) : Math.atan2(dp.position[i + 1], dp.position[i]);\r\n    }\r\n    return dp;\r\n}\r\nexport function loft(sp: Spline, section: face.FaceMeshData, step: number): TetraMesh {\r\n    let { points, rotors, curveLength } = sp.generate(step);\r\n    let quadcount = section.quad ? section.quad.position.length >> 4 : 0;\r\n    let count4 = quadcount * (points.length - 1) * 5;\r\n    let tricount = section.triangle ? section.triangle.position.length / 12 : 0;\r\n    let count3 = tricount * (points.length - 1) * 3;\r\n    let arraySize = count4 + count3 << 4;\r\n    let pslen4 = quadcount * points.length << 4;\r\n    let pslen3 = tricount * points.length * 12;\r\n    let pslen = Math.max(pslen4, pslen3);\r\n    let positions = new Float32Array(pslen);\r\n    let uvws = new Float32Array(pslen);\r\n    let normals = new Float32Array(pslen);\r\n    let position = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let _vec4 = new Vec4(); // cache\r\n    let offset = 0;\r\n    let idxPtr = 0;\r\n    if (section.quad) {\r\n        let pos = section.quad.position;\r\n        let norm = section.quad.normal;\r\n        let uv = section.quad.uvw;\r\n        for (let ptr = 0; ptr < (quadcount << 4); ptr += 16) {\r\n            for (let j = 0; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                let p = points[j];\r\n                for (let i = 0; i < 4; i++, ptr += 4) {\r\n                    _vec4.set(pos[ptr], pos[ptr + 1], pos[ptr + 2], pos[ptr + 3]);\r\n                    _vec4.rotates(r).adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(norm[ptr], norm[ptr + 1], norm[ptr + 2], norm[ptr + 3]);\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[ptr], uv[ptr + 1], uv[ptr + 2], curveLength[j]);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 16;\r\n                if (j) {\r\n                    let doffset = offset - 32;\r\n                    pushTetra(doffset, 0, 1, 3, 4);\r\n                    pushTetra(doffset, 1, 5, 6, 4);\r\n                    pushTetra(doffset, 1, 3, 6, 2);\r\n                    pushTetra(doffset, 4, 7, 6, 3);\r\n                    pushTetra(doffset, 1, 3, 4, 6);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (section.triangle) {\r\n        offset = 0;\r\n        let pos = section.triangle.position;\r\n        let norm = section.triangle.normal;\r\n        let uv = section.triangle.uvw;\r\n        for (let ptr = 0, l = tricount * 12; ptr < l; ptr += 12) {\r\n            for (let j = 0; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                let p = points[j];\r\n                for (let i = 0; i < 3; i++, ptr += 4) {\r\n                    _vec4.set(pos[ptr], pos[ptr + 1], pos[ptr + 2], pos[ptr + 3]);\r\n                    _vec4.rotates(r).adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(norm[ptr], norm[ptr + 1], norm[ptr + 2], norm[ptr + 3]);\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[ptr], uv[ptr + 1], uv[ptr + 2], curveLength[j]);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 12;\r\n                if (j) {\r\n                    let doffset = offset - 24;\r\n                    pushTetra(doffset, 0, 1, 2, 3);\r\n                    pushTetra(doffset, 1, 2, 3, 5);\r\n                    pushTetra(doffset, 3, 4, 1, 5);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function pushTetra(offset: number, a: number, b: number, c: number, d: number) {\r\n        a = offset + (a << 2);\r\n        b = offset + (b << 2);\r\n        c = offset + (c << 2);\r\n        d = offset + (d << 2);\r\n        pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n    }\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    return new TetraMesh({ position, uvw, normal, count: count3 + count4 });\r\n}\r\n// bv is rotate plane (not axis plane), it must be simple and normalized\r\nexport function rotatoid(bv: Bivec, section: face.FaceMeshData, step: number, angle: number = _360): TetraMesh {\r\n    let coeffAngle = angle / (step - 1);\r\n    let rotors = new Array(step).fill(0).map((_, i) => bv.mulf(coeffAngle * i).exp());\r\n    let quadcount = section.quad ? section.quad.position.length >> 4 : 0;\r\n    let count4 = quadcount * (rotors.length) * 5;\r\n    let tricount = section.triangle ? section.triangle.position.length / 12 : 0;\r\n    let count3 = tricount * (rotors.length) * 3;\r\n    let arraySize = count4 + count3 << 4;\r\n    let pslen4 = quadcount * rotors.length << 4;\r\n    let pslen3 = tricount * rotors.length * 12;\r\n    let pslen = Math.max(pslen4, pslen3);\r\n    let positions = new Float32Array(pslen);\r\n    let uvws = new Float32Array(pslen);\r\n    let normals = new Float32Array(pslen);\r\n    let position = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let _vec4 = new Vec4(); // cache\r\n    let offset = 0;\r\n    let idxPtr = 0;\r\n    if (section.quad) {\r\n        let pos = section.quad.position;\r\n        let norm = section.quad.normal;\r\n        let uv = section.quad.uvw;\r\n        for (let ptr = 0; ptr < (quadcount << 4); ptr += 16) {\r\n            for (let j = 0; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                for (let i = 0; i < 4; i++, ptr += 4) {\r\n                    _vec4.set(pos[ptr], pos[ptr + 1], pos[ptr + 2], pos[ptr + 3]);\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    if (norm) {\r\n                        _vec4.set(norm[ptr], norm[ptr + 1], norm[ptr + 2], norm[ptr + 3]);\r\n                    } else { _vec4.set(); }\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[ptr], uv[ptr + 1], uv[ptr + 2], coeffAngle * j);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 16;\r\n                let doffset = offset - 32;\r\n                if (j) {\r\n                    pushTetra(doffset, 0, 1, 3, 4);\r\n                    pushTetra(doffset, 1, 5, 6, 4);\r\n                    pushTetra(doffset, 1, 3, 6, 2);\r\n                    pushTetra(doffset, 4, 7, 6, 3);\r\n                    pushTetra(doffset, 1, 3, 4, 6);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (section.triangle) {\r\n        offset = 0;\r\n        let pos = section.triangle.position;\r\n        let norm = section.triangle.normal;\r\n        let uv = section.triangle.uvw;\r\n        for (let ptr = 0, l = tricount * 12; ptr < l; ptr += 12) {\r\n            for (let j = 0; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                for (let i = 0; i < 3; i++, ptr += 4) {\r\n                    _vec4.set(pos[ptr], pos[ptr + 1], pos[ptr + 2], pos[ptr + 3]);\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    if (norm) {\r\n                        _vec4.set(norm[ptr], norm[ptr + 1], norm[ptr + 2], norm[ptr + 3]);\r\n                    } else { _vec4.set(); }\r\n                    _vec4.rotates(r);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[ptr], uv[ptr + 1], uv[ptr + 2], coeffAngle * j);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 12;\r\n                let doffset = offset - 24;\r\n                if (j) {\r\n                    pushTetra(doffset, 0, 1, 2, 3);\r\n                    pushTetra(doffset, 1, 2, 3, 5);\r\n                    pushTetra(doffset, 3, 4, 1, 5);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function pushTetra(offset: number, a: number, b: number, c: number, d: number) {\r\n        a = offset + (a << 2);\r\n        b = offset + (b << 2);\r\n        c = offset + (c << 2);\r\n        d = offset + (d << 2);\r\n        pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n    }\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    return new TetraMesh({ position, uvw, normal, count: count3 + count4 });\r\n}\r\nexport function directProduct(shape1: face.FaceIndexMeshData, shape2: face.FaceIndexMeshData) {\r\n    /** border(A x B) = border(A) x B + A x border(B) */\r\n    let edge1 = face.findBorder(shape1);\r\n    let edge2 = face.findBorder(shape2);\r\n    // A x border(B)\r\n    let quadcount1 = shape1.quad ? shape1.quad.position.length >> 2 : 0;\r\n    let count14 = quadcount1 * edge2.length * 5;\r\n    let tricount1 = shape1.triangle ? shape1.triangle.position.length / 3 : 0;\r\n    let count13 = tricount1 * edge2.length * 3;\r\n    let pslen1 = Math.max(quadcount1 * edge2.length << 5, tricount1 * edge2.length * 24);\r\n\r\n    // border(A) x B \r\n    let quadcount2 = shape2.quad ? shape2.quad.position.length >> 2 : 0;\r\n    let count24 = quadcount2 * edge1.length * 5;\r\n    let tricount2 = shape2.triangle ? shape2.triangle.position.length / 3 : 0;\r\n    let count23 = tricount2 * edge1.length * 3;\r\n    let pslen2 = Math.max(quadcount2 * edge1.length << 5, tricount2 * edge1.length * 24);\r\n\r\n    let arraySize = count14 + count13 + count23 + count24 << 4;\r\n    let pslen = Math.max(pslen1, pslen2);\r\n    let positions = new Float32Array(pslen);\r\n    let uvws = new Float32Array(pslen);\r\n    let normals = new Float32Array(pslen);\r\n    let position = new Float32Array(arraySize);\r\n    let uvw = new Float32Array(arraySize);\r\n    let normal = new Float32Array(arraySize);\r\n    let _vec4 = new Vec4(); // cache\r\n    let _vec4p = new Vec4(); // cache\r\n    let _vec4q = new Vec4(); // cache\r\n    let _vec4n = new Vec4(); // cache\r\n    let offset = 0;\r\n    let idxPtr = 0;\r\n    if (shape1.quad) {\r\n        let posIdx = shape1.quad.position;\r\n        let uvIdx = shape1.quad.uvw;\r\n        let pos = shape1.position;\r\n        let uv = shape1.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 4) {\r\n            for (let j of edge2) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.z, normal.w] = [-normal.w, normal.z];\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                let doffset = offset - 32;\r\n                pushTetra(doffset, 0, 1, 3, 4);\r\n                pushTetra(doffset, 1, 5, 6, 4);\r\n                pushTetra(doffset, 1, 3, 6, 2);\r\n                pushTetra(doffset, 4, 7, 6, 3);\r\n                pushTetra(doffset, 1, 3, 4, 6);\r\n            }\r\n        }\r\n    }\r\n    offset = 0;\r\n    if (shape1.triangle) {\r\n        let posIdx = shape1.triangle.position;\r\n        let uvIdx = shape1.triangle.uvw;\r\n        let pos = shape1.position;\r\n        let uv = shape1.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 3) {\r\n            for (let j of edge2) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape2.position[ie + 2], shape2.position[ie + 3],\r\n                    shape2.position[ie], shape2.position[ie + 1],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.z, normal.w] = [-normal.w, normal.z];\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos], pos[ipos + 1], pos[ipos + 2], pos[ipos + 3]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(0, 0, normal.z, normal.w);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 0);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                let doffset = offset - 24;\r\n                pushTetra(doffset, 0, 1, 2, 3);\r\n                pushTetra(doffset, 1, 2, 3, 5);\r\n                pushTetra(doffset, 3, 4, 1, 5);\r\n            }\r\n        }\r\n    }\r\n    offset = 0;\r\n    if (shape2.quad) {\r\n        let posIdx = shape2.quad.position;\r\n        let uvIdx = shape2.quad.uvw;\r\n        let pos = shape2.position;\r\n        let uv = shape2.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 4) {\r\n            for (let j of edge1) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.x, normal.y] = [-normal.y, normal.x];\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                for (let i = 0; i < 4; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 4;\r\n                let doffset = offset - 32;\r\n                pushTetra(doffset, 0, 1, 3, 4);\r\n                pushTetra(doffset, 1, 5, 6, 4);\r\n                pushTetra(doffset, 1, 3, 6, 2);\r\n                pushTetra(doffset, 4, 7, 6, 3);\r\n                pushTetra(doffset, 1, 3, 4, 6);\r\n            }\r\n        }\r\n    }\r\n    offset = 0;\r\n    if (shape2.triangle) {\r\n        let posIdx = shape2.triangle.position;\r\n        let uvIdx = shape2.triangle.uvw;\r\n        let pos = shape2.position;\r\n        let uv = shape2.uvw;\r\n        for (let ptr = 0, l = posIdx.length; ptr < l; ptr += 3) {\r\n            for (let j of edge1) {\r\n                let ie = j[0] << 2;\r\n                // pq is border segment\r\n                let p = _vec4p.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                ie = j[1] << 2;\r\n                let q = _vec4q.set(\r\n                    shape1.position[ie], shape1.position[ie + 1],\r\n                    shape1.position[ie + 2], shape1.position[ie + 3],\r\n                );\r\n                let normal = _vec4n.subset(q, p).norms();\r\n                [normal.x, normal.y] = [-normal.y, normal.x];\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(p);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                for (let i = 0; i < 3; i++, ptr++) {\r\n                    let ipos = posIdx[ptr] << 2;\r\n                    let iuv = uvIdx[ptr] << 2;\r\n                    _vec4.set(pos[ipos + 2], pos[ipos + 3], pos[ipos], pos[ipos + 1]);\r\n                    _vec4.adds(q);\r\n                    _vec4.writeBuffer(positions, offset);\r\n                    _vec4.set(normal.x, normal.y);\r\n                    _vec4.writeBuffer(normals, offset);\r\n                    _vec4.set(uv[iuv], uv[iuv + 1], uv[iuv + 2], 1);\r\n                    _vec4.writeBuffer(uvws, offset);\r\n                    offset += 4;\r\n                }\r\n                ptr -= 3;\r\n                let doffset = offset - 24;\r\n                pushTetra(doffset, 0, 1, 2, 3);\r\n                pushTetra(doffset, 1, 2, 3, 5);\r\n                pushTetra(doffset, 3, 4, 1, 5);\r\n            }\r\n        }\r\n    }\r\n    function pushTetra(offset: number, a: number, b: number, c: number, d: number) {\r\n        a = offset + (a << 2);\r\n        b = offset + (b << 2);\r\n        c = offset + (c << 2);\r\n        d = offset + (d << 2);\r\n        pushIdx(a); pushIdx(b); pushIdx(c); pushIdx(d);\r\n    }\r\n    function pushIdx(i: number) {\r\n        position[idxPtr++] = positions[i];\r\n        position[idxPtr++] = positions[i + 1];\r\n        position[idxPtr++] = positions[i + 2];\r\n        position[idxPtr++] = positions[i + 3];\r\n        idxPtr -= 4;\r\n        normal[idxPtr++] = normals[i];\r\n        normal[idxPtr++] = normals[i + 1];\r\n        normal[idxPtr++] = normals[i + 2];\r\n        normal[idxPtr++] = normals[i + 3];\r\n        idxPtr -= 4;\r\n        uvw[idxPtr++] = uvws[i];\r\n        uvw[idxPtr++] = uvws[i + 1];\r\n        uvw[idxPtr++] = uvws[i + 2];\r\n        uvw[idxPtr++] = uvws[i + 3];\r\n    }\r\n    return new TetraMesh({ position, normal, uvw, count: position.length >> 4 });\r\n}\r\nexport function cwmesh(cwmesh: CWMesh, notClosed?: boolean) {\r\n    let simplexes: number[][];\r\n    const borders = cwmesh.findBorder(4);\r\n    if (!borders) notClosed = true;\r\n    if (!notClosed) {\r\n        // closed 4d object's surface\r\n        const cells = [];\r\n        const cellsO = [];\r\n        for (const [cellId, border] of borders.entries()) {\r\n            if (border !== 1 && border !== -1) continue;\r\n            cells.push(cellId);\r\n            cellsO.push(border === 1);\r\n        }\r\n        simplexes = cwmesh.triangulate(3, cells, cellsO).flat();\r\n    } else {\r\n        simplexes = cwmesh.triangulate(3, cwmesh.data[3].map((_, idx) => idx)).flat();\r\n    }\r\n    const arrLen = simplexes.length << 4;\r\n    const tetramesh = new TetraMesh({\r\n        position: new Float32Array(arrLen),\r\n        normal: new Float32Array(arrLen),\r\n        count: simplexes.length\r\n    });\r\n    let offset = 0;\r\n    const vertices = cwmesh.data[0] as Vec4[];\r\n    const v1 = new Vec4, v2 = new Vec4, v3 = new Vec4;\r\n    for (const s of simplexes) {\r\n\r\n        const a0 = vertices[s[0]];\r\n        const a1 = vertices[s[1]];\r\n        const a2 = vertices[s[2]];\r\n        const a3 = vertices[s[3]];\r\n\r\n        const normal = v1.subset(a0, a1).wedge(v2.subset(a0, a2)).wedgev(v3.subset(a0, a3)).norms();\r\n\r\n        a0.writeBuffer(tetramesh.position, offset);\r\n        normal.writeBuffer(tetramesh.normal, offset); offset += 4;\r\n        a1.writeBuffer(tetramesh.position, offset);\r\n        normal.writeBuffer(tetramesh.normal, offset); offset += 4;\r\n        a2.writeBuffer(tetramesh.position, offset);\r\n        normal.writeBuffer(tetramesh.normal, offset); offset += 4;\r\n        a3.writeBuffer(tetramesh.position, offset);\r\n        normal.writeBuffer(tetramesh.normal, offset); offset += 4;\r\n    }\r\n    return tetramesh;\r\n}"],"names":["face.polygon","face.circle","face.findBorder"],"mappings":"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AA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AAEpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;QACpB,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACrB,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACrB,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACrB,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AAGrB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;AACnB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;QACpB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;AAErB,QAAA,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AACpB,QAAA,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;QACpB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;QACrB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACtB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACtB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;QACtB,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG;KACzB,CAAC;IACF,GAAG,EAAE,IAAI,YAAY,CAAC;AACld,CAAC;AACF,IAAA,KAAK,EAAE,EAAE;AACZ,CAAA,EAAE;AACG,SAAU,KAAK,CAAC,MAAc,EAAE,SAAiB,EAAE,SAAiB,EAAE,eAAuB,EAAA;IAC/F,IAAI,SAAS,GAAG,CAAC;QAAE,SAAS,GAAG,CAAC,CAAC;IACjC,IAAI,SAAS,GAAG,CAAC;QAAE,SAAS,GAAG,CAAC,CAAC;IACjC,IAAI,eAAe,GAAG,CAAC;QAAE,eAAe,GAAG,CAAC,CAAC;IAC7C,OAAO,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;AACxC,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QACpB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QAC/B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;AAC/B,QAAA,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;AACrF,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnB,KAAC,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;AAC9C,CAAC;AAEK,SAAU,WAAW,CACvB,YAAoB,EAAE,gBAAwB,EAAE,eAAuB,EACvE,YAAoB,EAAE,aAAqB,EAAA;IAE3C,IAAI,gBAAgB,GAAG,CAAC;QAAE,gBAAgB,GAAG,CAAC,CAAC;IAC/C,IAAI,eAAe,GAAG,CAAC;QAAE,eAAe,GAAG,CAAC,CAAC;IAC7C,IAAI,aAAa,GAAG,CAAC;QAAE,aAAa,GAAG,CAAC,CAAC;IACzC,OAAO,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;AACxC,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,QAAA,IAAI,MAAM,GAAG,YAAY,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;QAC5D,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QAC9B,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;AAC9B,QAAA,GAAG,CAAC,GAAG,CACH,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,EAAE,CACvE,CAAC;QACF,IAAI,CAAC,GAAG,CACJ,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC/B,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EACX,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACjC,CAAC;AACN,KAAC,EAAE,gBAAgB,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;AACzD,CAAC;AACK,SAAU,UAAU,CACtB,YAAoB,EAAE,aAAqB,EAC3C,YAAoB,EAAE,gBAAwB,EAAE,eAAuB,EAAA;IAEvE,IAAI,gBAAgB,GAAG,CAAC;QAAE,gBAAgB,GAAG,CAAC,CAAC;IAC/C,IAAI,eAAe,GAAG,CAAC;QAAE,eAAe,GAAG,CAAC,CAAC;IAC7C,IAAI,aAAa,GAAG,CAAC;QAAE,aAAa,GAAG,CAAC,CAAC;IACzC,OAAO,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;QACxC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACtB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,QAAA,IAAI,MAAM,GAAG,YAAY,GAAG,EAAE,GAAG,YAAY,CAAC;AAC9C,QAAA,GAAG,CAAC,GAAG,CACH,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,EACzB,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC1B,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,EACzB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CACvB,CAAC;AACF,QAAA,IAAI,CAAC,GAAG,CACJ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EACrB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EACX,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EACrB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CACnB,CAAC;AACN,KAAC,EAAE,gBAAgB,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;AACzD,CAAC;AACe,SAAA,cAAc,CAAC,OAAe,EAAE,OAAe,EAAE,gBAAwB,EAAE,eAAuB,EAAE,MAAc,EAAE,gBAAwB,CAAC,EAAA;IACzJ,IAAI,gBAAgB,GAAG,CAAC;QAAE,gBAAgB,GAAG,CAAC,CAAC;IAC/C,IAAI,eAAe,GAAG,CAAC;QAAE,eAAe,GAAG,CAAC,CAAC;IAC7C,IAAI,aAAa,GAAG,CAAC;QAAE,aAAa,GAAG,CAAC,CAAC;IACzC,MAAM,SAAS,GAAG,CAAC,OAAO,GAAG,OAAO,IAAI,GAAG,CAAC;AAC5C,IAAA,MAAM,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,EAAE,MAAM,CAAC,CAAC;;IAEtD,MAAM,IAAI,GAAG,CAAC,OAAO,GAAG,OAAO,IAAI,GAAG,CAAC;AACvC,IAAA,MAAM,IAAI,GAAG,MAAM,GAAG,GAAG,CAAC;IAC1B,OAAO,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;AACxC,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QACpB,IAAI,MAAM,GAAG,SAAS,GAAG,CAAC,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;QACjD,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,QAAA,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC;QACxF,EAAE,IAAI,IAAI,CAAC;;AAEX,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;AACpE,KAAC,EAAE,gBAAgB,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;AACzD,CAAC;SACe,MAAM,CAAC,MAAc,EAAE,CAAS,EAAE,CAAS,EAAA;AACvD,IAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAEA,OAAY,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KACjE,IAAI,IAAI,CACJ,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,EACrC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CACxC,CACJ,CAAC,CAAC,cAAc,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACtD,CAAC;AACe,SAAA,KAAK,CAAC,QAAgB,EAAE,SAAiB,EAAE,QAAgB,EAAE,SAAiB,EAAE,eAAuB,EAAE,gBAAwB,EAAA;IAC7I,IAAI,SAAS,GAAG,CAAC;QAAE,SAAS,GAAG,CAAC,CAAC;IACjC,IAAI,SAAS,GAAG,CAAC;QAAE,SAAS,GAAG,CAAC,CAAC;IACjC,IAAI,gBAAgB,GAAG,CAAC;QAAE,gBAAgB,GAAG,CAAC,CAAC;IAC/C,OAAO,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;AAExC,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAErB,QAAA,GAAG,CAAC,GAAG,CACH,CAAC,EAAE,GAAG,eAAe,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC/C,CAAC,EAAE,GAAG,eAAe,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC/C,CAAC,EAAE,GAAG,eAAe,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC/C,CAAC,EAAE,GAAG,eAAe,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAClD,CAAC;AACF,QAAA,IAAI,CAAC,GAAG,CACJ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACnB,CAAC;AACN,KAAC,EAAE,SAAS,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC;AAC/C,CAAC;AAEe,SAAA,OAAO,CAAC,WAAmB,EAAE,YAAoB,EAAE,YAAoB,EAAE,aAAqB,EAAE,WAAmB,EAAE,YAAoB,EAAA;IACrJ,IAAI,YAAY,GAAG,CAAC;QAAE,YAAY,GAAG,CAAC,CAAC;IACvC,IAAI,aAAa,GAAG,CAAC;QAAE,aAAa,GAAG,CAAC,CAAC;IACzC,IAAI,YAAY,GAAG,CAAC;QAAE,YAAY,GAAG,CAAC,CAAC;IACvC,OAAO,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;AAExC,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,QAAA,MAAM,EAAE,GAAG,YAAY,GAAG,WAAW,GAAG,EAAE,CAAC;AAC3C,QAAA,MAAM,EAAE,GAAG,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1C,QAAA,GAAG,CAAC,GAAG,CACH,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAC5B,CAAC;QACF,IAAI,CAAC,GAAG,CACJ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC9B,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAC9B,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAChB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACd,CAAC;AACN,KAAC,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;AAClD,CAAC;AAEK,SAAU,iBAAiB,CAC7B,EAAsE,EACtE,QAAgB,EAAE,QAAgB,EAAE,QAAgB,EAAA;IAEpD,IAAI,QAAQ,GAAG,CAAC;QAAE,QAAQ,GAAG,CAAC,CAAC;IAC/B,IAAI,QAAQ,GAAG,CAAC;QAAE,QAAQ,GAAG,CAAC,CAAC;IAC/B,IAAI,QAAQ,GAAG,CAAC;QAAE,QAAQ,GAAG,CAAC,CAAC;IAC/B,IAAI,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC;AAC/C,IAAA,IAAI,SAAS,GAAG,KAAK,IAAI,CAAC,CAAC;AAC3B,IAAA,QAAQ,EAAE,CAAC;AAAC,IAAA,QAAQ,EAAE,CAAC;AAAC,IAAA,QAAQ,EAAE,CAAC;AACnC,IAAA,IAAI,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjC,IAAA,IAAI,OAAO,GAAG,QAAQ,GAAG,MAAM,CAAC;IAChC,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC;IACjD,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC;IAC/C,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC;AAC5C,IAAA,IAAI,QAAQ,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AAC3C,IAAA,IAAI,MAAM,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC,IAAA,IAAI,GAAG,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACtC,IAAA,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC;AACxB,IAAA,IAAI,SAAS,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AACnC,IAAA,IAAI,YAAY,GAAG,IAAI,IAAI,CAAC;AAC5B,IAAA,IAAI,YAAY,GAAG,IAAI,IAAI,CAAC;IAC5B,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,SAAS,OAAO,CAAC,CAAS,EAAA;QACtB,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAClC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,CAAC;QACZ,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,IAAI,CAAC,CAAC;QACZ,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC/B;IACD,SAAS,SAAS,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;AACzD,QAAA,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACjB,QAAA,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACjB,QAAA,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACjB,QAAA,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACjB,QAAA,SAAS,IAAI,CAAC,OAAe,EAAE,OAAe,EAAA;YAC1C,OAAO,SAAS,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC,OAAO,CAAC;gBAC5C,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC;gBACjD,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC;AACjD,gBAAA,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;SACzD;AACD,QAAA,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;YACvE,OAAO,CAAC,CAAC,CAAC,CAAC;YAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAClD,SAAA;KACJ;IACD,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,QAAQ,EAAE,OAAO,EAAE,EAAE;QACjD,QAAQ,CAAC,CAAC,GAAG,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;AACtC,QAAA,IAAI,QAAQ,GAAG,QAAQ,GAAG,OAAO,CAAC;QAClC,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,QAAQ,EAAE,OAAO,EAAE,EAAE;YACjD,QAAQ,CAAC,CAAC,GAAG,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;YACtC,IAAI,QAAQ,GAAG,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC;YAC/C,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,QAAQ,EAAE,OAAO,EAAE,EAAE;gBACjD,QAAQ,CAAC,CAAC,GAAG,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;AACtC,gBAAA,EAAE,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;gBACzC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAClC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAClC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAClC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAClC,GAAG,IAAI,CAAC,CAAC;gBACT,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBAChC,GAAG,IAAI,CAAC,CAAC;gBACT,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;AACzB,gBAAA,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;AAChB,gBAAA,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,EAAE;AAC/B,oBAAA,IAAI,MAAM,GAAG,OAAO,GAAG,QAAQ,CAAC;AAChC,oBAAA,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC;oBAC3B,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC/B,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,QAAQ,IAAI,CAAC,CAAC;oBACtC,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC1C,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;oBACpC,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;oBACxC,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,GAAG,QAAQ,IAAI,CAAC,CAAC;AAC/C,oBAAA,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;oBACnD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACtB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACtB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACtB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACtB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,iBAAA;AACJ,aAAA;AACJ,SAAA;AACJ,KAAA;AACD,IAAA,OAAO,IAAI,SAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;AAC3D,CAAC;AACK,SAAU,UAAU,CAAC,MAAc,EAAA;;AAErC,IAAA,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;QAAE,OAAO;AAC9B,IAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;AAC3C,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;;AAExB,IAAA,IAAI,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,OAAO,GAAG,IAAI,CAAC;AACnB,IAAA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACtC,IAAI,OAAO,GAAG,KAAK,CAAC;AACpB,IAAA,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE;AAC3C,QAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE;AAC/C,YAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE;AAC/C,gBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE;AAC/C,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,wBAAA,WAAW,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;wBACjC,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,OAAO,EAAE;4BACjC,OAAO,GAAG,KAAK,CAAC;4BAChB,MAAM;AACT,yBAAA;AACJ,qBAAA;AACJ,iBAAA;AACJ,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,IAAI,WAAW,KAAK,CAAC;QAAE,OAAO;AAC9B,IAAA,IAAI,IAAU,CAAC;AAAC,IAAA,CAAC,EAAE,CAAC;AAAC,IAAA,CAAC,EAAE,CAAC;AAAC,IAAA,CAAC,EAAE,CAAC;AAAC,IAAA,CAAC,EAAE,CAAC;AACnC,IAAA,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAAC,IAAA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAC1D,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;AAC/E,IAAA,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAAC,IAAA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAC1D,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;AAC3D,IAAA,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAAC,IAAA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAC1D,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;AACvC,IAAA,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAAC,IAAA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAC1D,IAAI,CAAC,KAAK,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;AACnB,IAAA,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAAC,IAAA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAC1D,IAAA,IAAI,KAAK,GAAG,CAAC,CAAC;AACd,IAAA,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACzB,IAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChC,IAAA,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;AAChC,QAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE5D,YAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjE,SAAS,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;AAC9D,QAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAClB,OAAO,KAAK,CAAC,UAAU,CACnB,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAC3B,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAC3B,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAC3B,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAC9B,CAAC,GAAG,EAAE,CAAC;KACX;AACD,IAAA,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;QACnD,IAAI,UAAU,GAAG,EAAE,CAAC;;;QAGpB,IAAI,MAAM,GAAe,EAAE,CAAC;AAC5B,QAAA,SAAS,WAAW,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;YAChD,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACzE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/D,IAAI,KAAK,GAAG,KAAK,CAAC;AAClB,YAAA,KAAK,IAAI,CAAC,IAAI,MAAM,EAAE;AAClB,gBAAA,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;AAC1D,oBAAA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBACT,KAAK,GAAG,IAAI,CAAC;oBACb,MAAM;AACT,iBAAA;AACJ,aAAA;YACD,IAAI,CAAC,KAAK,EAAE;AACR,gBAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB,aAAA;SACJ;QACD,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,EAAE,EAAE;YACrC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;AAC3B,YAAA,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,YAAA,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,YAAA,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,YAAA,IAAI,WAAW,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YAC1C,IAAI,WAAW,GAAG,OAAO,EAAE;AACvB,gBAAA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrB,gBAAA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrB,gBAAA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrB,gBAAA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,aAAA;AAAM,iBAAA;gBACH,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,aAAA;AACJ,SAAA;AACD,QAAA,KAAK,IAAI,CAAC,IAAI,MAAM,EAAE;AAClB,YAAA,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAE,SAAS;AACpB,iBAAA,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC1D,iBAAA,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAClE,SAAA;QACD,OAAO,GAAG,UAAU,CAAC;AACrB,QAAA,KAAK,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;AAC/B,KAAA;IACD,IAAI,QAAQ,GAAG,IAAI,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;IAC5C,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;AAC5B,QAAA,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAAC,QAAQ,IAAI,CAAC,CAAC;AACzE,QAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAAC,QAAQ,IAAI,CAAC,CAAC;AAC7E,QAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAAC,QAAQ,IAAI,CAAC,CAAC;AAC7E,QAAA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAAC,QAAQ,IAAI,CAAC,CAAC;AAChF,KAAA;IACD,OAAO,IAAI,SAAS,CAAC;QACjB,QAAQ;QACR,KAAK;AACR,KAAA,CAAC,CAAC;AACP,CAAC;AAEK,SAAU,WAAW,CAAC,QAAgB,EAAE,SAAiB,EAAE,QAAgB,EAAE,SAAiB,EAAA;IAChG,IAAI,EAAE,GAAG,aAAa,CAACC,MAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAEA,MAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;AAC3F,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AACvC,QAAA,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7I,KAAA;AACD,IAAA,OAAO,EAAE,CAAC;AACd,CAAC;SACe,IAAI,CAAC,EAAU,EAAE,OAA0B,EAAE,IAAY,EAAA;AACrE,IAAA,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,SAAS,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;AACrE,IAAA,IAAI,MAAM,GAAG,SAAS,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACjD,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC;AAC5E,IAAA,IAAI,MAAM,GAAG,QAAQ,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAChD,IAAA,IAAI,SAAS,GAAG,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;IACrC,IAAI,MAAM,GAAG,SAAS,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC;IAC5C,IAAI,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;IAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACrC,IAAA,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACxC,IAAA,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACnC,IAAA,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACtC,IAAA,IAAI,QAAQ,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AAC3C,IAAA,IAAI,GAAG,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACtC,IAAA,IAAI,MAAM,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC,IAAA,IAAI,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAO,CAAC,IAAI,EAAE;AACd,QAAA,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChC,QAAA,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;AAC/B,QAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAC1B,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE;AACjD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAClB,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAClB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE;AAClC,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC9D,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzB,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACjB,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,EAAE,CAAC;AACV,gBAAA,IAAI,CAAC,EAAE;AACH,oBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;oBAC1B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,iBAAA;AACJ,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,IAAI,OAAO,CAAC,QAAQ,EAAE;QAClB,MAAM,GAAG,CAAC,CAAC;AACX,QAAA,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACpC,QAAA,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;AACnC,QAAA,IAAI,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC;AAC9B,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE;AACrD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAClB,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAClB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE;AAClC,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC9D,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzB,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACjB,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,EAAE,CAAC;AACV,gBAAA,IAAI,CAAC,EAAE;AACH,oBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;oBAC1B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,iBAAA;AACJ,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,SAAS,SAAS,CAAC,MAAc,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;QACzE,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAClD;IACD,SAAS,OAAO,CAAC,CAAS,EAAA;QACtB,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAClC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,CAAC;QACZ,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,IAAI,CAAC,CAAC;QACZ,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC/B;AACD,IAAA,OAAO,IAAI,SAAS,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC;AAC5E,CAAC;AACD;AACM,SAAU,QAAQ,CAAC,EAAS,EAAE,OAA0B,EAAE,IAAY,EAAE,KAAA,GAAgB,IAAI,EAAA;IAC9F,IAAI,UAAU,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;AACpC,IAAA,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAClF,IAAI,SAAS,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACrE,IAAI,MAAM,GAAG,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5E,IAAI,MAAM,GAAG,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5C,IAAA,IAAI,SAAS,GAAG,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;IACrC,IAAI,MAAM,GAAG,SAAS,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC;IAC5C,IAAI,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;IAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACrC,IAAA,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACxC,IAAA,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACnC,IAAA,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACtC,IAAA,IAAI,QAAQ,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AAC3C,IAAA,IAAI,GAAG,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACtC,IAAA,IAAI,MAAM,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC,IAAA,IAAI,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAO,CAAC,IAAI,EAAE;AACd,QAAA,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChC,QAAA,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;AAC/B,QAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAC1B,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE;AACjD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAClB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE;AAClC,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9D,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACjB,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,IAAI,IAAI,EAAE;AACN,wBAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrE,qBAAA;AAAM,yBAAA;wBAAE,KAAK,CAAC,GAAG,EAAE,CAAC;AAAE,qBAAA;AACvB,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACjB,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;AAC7D,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,EAAE,CAAC;AACV,gBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;AAC1B,gBAAA,IAAI,CAAC,EAAE;oBACH,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,iBAAA;AACJ,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,IAAI,OAAO,CAAC,QAAQ,EAAE;QAClB,MAAM,GAAG,CAAC,CAAC;AACX,QAAA,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACpC,QAAA,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;AACnC,QAAA,IAAI,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC;AAC9B,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE;AACrD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAClB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE;AAClC,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9D,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACjB,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,IAAI,IAAI,EAAE;AACN,wBAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrE,qBAAA;AAAM,yBAAA;wBAAE,KAAK,CAAC,GAAG,EAAE,CAAC;AAAE,qBAAA;AACvB,oBAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACjB,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;AAC7D,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,EAAE,CAAC;AACV,gBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;AAC1B,gBAAA,IAAI,CAAC,EAAE;oBACH,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,iBAAA;AACJ,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,SAAS,SAAS,CAAC,MAAc,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;QACzE,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAClD;IACD,SAAS,OAAO,CAAC,CAAS,EAAA;QACtB,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAClC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,CAAC;QACZ,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,IAAI,CAAC,CAAC;QACZ,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC/B;AACD,IAAA,OAAO,IAAI,SAAS,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC;AAC5E,CAAC;AACe,SAAA,aAAa,CAAC,MAA8B,EAAE,MAA8B,EAAA;;IAExF,IAAI,KAAK,GAAGC,UAAe,CAAC,MAAM,CAAC,CAAC;IACpC,IAAI,KAAK,GAAGA,UAAe,CAAC,MAAM,CAAC,CAAC;;IAEpC,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACpE,IAAI,OAAO,GAAG,UAAU,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5C,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1E,IAAI,OAAO,GAAG,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;;IAGrF,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACpE,IAAI,OAAO,GAAG,UAAU,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5C,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1E,IAAI,OAAO,GAAG,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;IAErF,IAAI,SAAS,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;IAC3D,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACrC,IAAA,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACxC,IAAA,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACnC,IAAA,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;AACtC,IAAA,IAAI,QAAQ,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AAC3C,IAAA,IAAI,GAAG,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACtC,IAAA,IAAI,MAAM,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC,IAAA,IAAI,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;AACvB,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;AACxB,IAAA,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,CAAC,IAAI,EAAE;AACb,QAAA,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AAClC,QAAA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;AAC5B,QAAA,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC1B,QAAA,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;AACpB,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;AACpD,YAAA,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;gBACjB,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;AAEnB,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAChD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAC/C,CAAC;AACF,gBAAA,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACf,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAChD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAC/C,CAAC;AACF,gBAAA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACzC,gBAAA,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;gBAC1B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,MAAM,GAAG,CAAC,CAAC;IACX,IAAI,MAAM,CAAC,QAAQ,EAAE;AACjB,QAAA,IAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACtC,QAAA,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;AAChC,QAAA,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC1B,QAAA,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;AACpB,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;AACpD,YAAA,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;gBACjB,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;AAEnB,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAChD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAC/C,CAAC;AACF,gBAAA,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACf,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAChD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAC/C,CAAC;AACF,gBAAA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACzC,gBAAA,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACrC,oBAAA,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACpC,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;gBAC1B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,MAAM,GAAG,CAAC,CAAC;IACX,IAAI,MAAM,CAAC,IAAI,EAAE;AACb,QAAA,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AAClC,QAAA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;AAC5B,QAAA,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC1B,QAAA,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;AACpB,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;AACpD,YAAA,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;gBACjB,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;AAEnB,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAC5C,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CACnD,CAAC;AACF,gBAAA,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACf,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAC5C,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CACnD,CAAC;AACF,gBAAA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACzC,gBAAA,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;oBACrC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;oBACrC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;gBAC1B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,MAAM,GAAG,CAAC,CAAC;IACX,IAAI,MAAM,CAAC,QAAQ,EAAE;AACjB,QAAA,IAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACtC,QAAA,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;AAChC,QAAA,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC1B,QAAA,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;AACpB,QAAA,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;AACpD,YAAA,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;gBACjB,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;AAEnB,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAC5C,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CACnD,CAAC;AACF,gBAAA,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACf,gBAAA,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CACd,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAC5C,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CACnD,CAAC;AACF,gBAAA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACzC,gBAAA,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;oBACrC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,oBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,oBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,oBAAA,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;oBACrC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,oBAAA,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,oBAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAChC,MAAM,IAAI,CAAC,CAAC;AACf,iBAAA;gBACD,GAAG,IAAI,CAAC,CAAC;AACT,gBAAA,IAAI,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC;gBAC1B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,aAAA;AACJ,SAAA;AACJ,KAAA;IACD,SAAS,SAAS,CAAC,MAAc,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;QACzE,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAClD;IACD,SAAS,OAAO,CAAC,CAAS,EAAA;QACtB,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAClC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,CAAC;QACZ,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,IAAI,CAAC,CAAC;QACZ,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC/B;AACD,IAAA,OAAO,IAAI,SAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;AACjF,CAAC;AACe,SAAA,MAAM,CAAC,MAAc,EAAE,SAAmB,EAAA;AACtD,IAAA,IAAI,SAAqB,CAAC;IAC1B,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACrC,IAAA,IAAI,CAAC,OAAO;QAAE,SAAS,GAAG,IAAI,CAAC;IAC/B,IAAI,CAAC,SAAS,EAAE;;QAEZ,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAK,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,OAAO,CAAC,OAAO,EAAE,EAAE;AAC9C,YAAA,IAAI,MAAM,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,CAAC;gBAAE,SAAS;AAC5C,YAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnB,YAAA,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;AAC7B,SAAA;AACD,QAAA,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;AAC3D,KAAA;AAAM,SAAA;AACH,QAAA,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACjF,KAAA;AACD,IAAA,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC;AACrC,IAAA,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC;AAC5B,QAAA,QAAQ,EAAE,IAAI,YAAY,CAAC,MAAM,CAAC;AAClC,QAAA,MAAM,EAAE,IAAI,YAAY,CAAC,MAAM,CAAC;QAChC,KAAK,EAAE,SAAS,CAAC,MAAM;AAC1B,KAAA,CAAC,CAAC;IACH,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAW,CAAC;AAC1C,IAAA,MAAM,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,GAAG,IAAI,IAAI,CAAC;AAClD,IAAA,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;QAEvB,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1B,QAAA,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAE5F,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAAC,MAAM,IAAI,CAAC,CAAC;QAC1D,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAAC,MAAM,IAAI,CAAC,CAAC;QAC1D,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAAC,MAAM,IAAI,CAAC,CAAC;QAC1D,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAAC,MAAM,IAAI,CAAC,CAAC;AAC7D,KAAA;AACD,IAAA,OAAO,SAAS,CAAC;AACrB;;;;"}