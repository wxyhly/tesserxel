{"version":3,"file":"tetramesh.js","sources":["../../../../src/mesh/tetra/tetramesh.ts"],"sourcesContent":["import { AffineMat4, Obj4 } from \"../../math/algebra/affine.js\";\r\nimport { Vec4 } from \"../../math/algebra/vec4.js\";\r\nimport { _180, _360, _90 } from \"../../math/const.js\";\r\nimport { toIndexbuffer, toNonIndex } from \"../index.js\";\r\n\r\n/** Tetramesh store 4D mesh as tetrahedral list\r\n *  Each tetrahedral uses four vertices in the position list\r\n */\r\nexport interface TetraMeshData {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    count?: number;\r\n}\r\n/** TetraIndexMesh is not supported for tetraslice rendering\r\n *  It is only used in data storage and mesh construction\r\n */\r\nexport interface TetraIndexMeshData {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    positionIndex: Uint32Array;\r\n    normalIndex?: Uint32Array;\r\n    uvwIndex?: Uint32Array;\r\n    count?: number;\r\n}\r\nexport class TetraMesh implements TetraMeshData {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    count?: number;\r\n    constructor(d: TetraMeshData) {\r\n        this.position = d.position;\r\n        this.normal = d.normal;\r\n        this.uvw = d.uvw;\r\n        this.count = d.count;\r\n    }\r\n    applyAffineMat4(am: AffineMat4) {\r\n        applyAffineMat4(this, am);\r\n        return this;\r\n    }\r\n    applyObj4(obj4: Obj4) {\r\n        applyObj4(this, obj4);\r\n        return this;\r\n    }\r\n    clone(): TetraMesh {\r\n        let ret = new TetraMesh({\r\n            position: this.position.slice(0),\r\n            count: this.count\r\n        });\r\n        if (this.uvw) ret.uvw = this.uvw.slice(0);\r\n        if (this.normal) ret.normal = this.normal.slice(0);\r\n        return ret;\r\n    }\r\n    toIndexMesh() {\r\n        let position = [];\r\n        let normal = [];\r\n        let uvw = [];\r\n        let posIdx = [];\r\n        let normalIdx = [];\r\n        let uvwIdx = [];\r\n        toIndexbuffer(this.position, position, posIdx, 4);\r\n        if (this.normal) toIndexbuffer(this.normal, normal, normalIdx, 4);\r\n        if (this.uvw) toIndexbuffer(this.uvw, uvw, uvwIdx, 4);\r\n\r\n        let out = new TetraIndexMesh({\r\n            position: new Float32Array(position),\r\n            positionIndex: new Uint32Array(posIdx)\r\n        });\r\n        if (this.normal) out.normalIndex = new Uint32Array(normalIdx);\r\n        if (this.uvw) out.uvwIndex = new Uint32Array(uvwIdx);\r\n        if (normal.length) out.normal = new Float32Array(normal);\r\n        if (uvw.length) out.uvw = new Float32Array(uvw);\r\n        return out;\r\n    }\r\n    /// this function will copy data and not modify original data\r\n    concat(mesh2: TetraMesh): TetraMesh {\r\n        let position = new Float32Array(this.position.length + mesh2.position.length);\r\n        position.set(this.position);\r\n        position.set(mesh2.position, this.position.length);\r\n        let ret = new TetraMesh({ position, count: position.length >> 4 });\r\n        if (this.normal && mesh2.normal) {\r\n            let normal = new Float32Array(this.normal.length + mesh2.normal.length);\r\n            normal.set(this.normal);\r\n            normal.set(mesh2.normal, this.normal.length);\r\n            ret.normal = normal;\r\n        }\r\n        if (this.uvw && mesh2.uvw) {\r\n            let uvw = new Float32Array(this.uvw.length + mesh2.uvw.length);\r\n            uvw.set(this.uvw);\r\n            uvw.set(mesh2.uvw, this.uvw.length);\r\n            ret.uvw = uvw;\r\n        }\r\n        return ret;\r\n    }\r\n    /// this function will copy data and not modify original data\r\n    deleteTetras(tetras: number[]): TetraMesh {\r\n        let count = this.count ?? (this.position?.length >> 4);\r\n        let newCount = (count - tetras.length) << 4;\r\n        let p = new Float32Array(newCount);\r\n        let n: Float32Array;\r\n        let u: Float32Array;\r\n        if (this.normal) n = new Float32Array(newCount);\r\n        if (this.uvw) u = new Float32Array(newCount);\r\n        let offset = 0;\r\n        for (let i = 0; i < this.count; i++) {\r\n            if (!tetras.includes(i)) {\r\n                p.set(this.position.subarray(i << 4, (i + 1) << 4), offset);\r\n                if (n) n.set(this.normal.subarray(i << 4, (i + 1) << 4), offset);\r\n                if (u) u.set(this.uvw.subarray(i << 4, (i + 1) << 4), offset);\r\n                offset += 16;\r\n            }\r\n        }\r\n        return new TetraMesh({\r\n            position: p, normal: n, uvw: u, count: newCount >> 4\r\n        });\r\n    }\r\n    generateNormal(splitThreshold?: number): this {\r\n        if (!this.normal) {\r\n            this.normal = new Float32Array(this.count << 4);\r\n            const v1 = new Vec4, v2 = new Vec4, v3 = new Vec4;\r\n            for (let i = 0, offset = 0; i < this.position.length;) {\r\n                const a0 = new Vec4(this.position[i++], this.position[i++], this.position[i++], this.position[i++]);\r\n                const a1 = new Vec4(this.position[i++], this.position[i++], this.position[i++], this.position[i++]);\r\n                const a2 = new Vec4(this.position[i++], this.position[i++], this.position[i++], this.position[i++]);\r\n                const a3 = new Vec4(this.position[i++], this.position[i++], this.position[i++], this.position[i++]);\r\n                const normal = v1.subset(a0, a1).wedge(v2.subset(a0, a2)).wedgev(v3.subset(a0, a3)).norms();\r\n                normal.writeBuffer(this.normal, offset); offset += 4;\r\n                normal.writeBuffer(this.normal, offset); offset += 4;\r\n                normal.writeBuffer(this.normal, offset); offset += 4;\r\n                normal.writeBuffer(this.normal, offset); offset += 4;\r\n            }\r\n        }\r\n        if (!splitThreshold) return this; // shade flat, complete\r\n        // then for shade smooth\r\n        const threshold = Math.cos(splitThreshold);\r\n        let position: number[] = [];\r\n        let posIdx: number[] = [];\r\n        let point2clusterTable: number[][] = [];\r\n        toIndexbuffer(this.position, position, posIdx, 4);\r\n        for (let i = 0; i < posIdx.length; i++) {\r\n            const a0 = posIdx[i];\r\n            point2clusterTable[a0] ??= []; point2clusterTable[a0].push(i);\r\n        }\r\n        const newNormal = new Float32Array(this.count << 4);\r\n        const tempNormal = new Vec4;\r\n        for (let i = 0, i4 = 0; i < posIdx.length; i++, i4 += 4) {\r\n            const a0 = posIdx[i];\r\n            let thisNormal = new Vec4(this.normal[i4], this.normal[i4 + 1], this.normal[i4 + 2], this.normal[i4 + 3]);\r\n            let sum = thisNormal.clone();\r\n            for (const idx of point2clusterTable[a0]) {\r\n                if (i === idx) continue;\r\n                const idx4 = idx << 2;\r\n                tempNormal.set(this.normal[idx4], this.normal[idx4 + 1], this.normal[idx4 + 2], this.normal[idx4 + 3]);\r\n                if (thisNormal.dot(tempNormal) > threshold) {\r\n                    sum.adds(tempNormal);\r\n                }\r\n            }\r\n            sum.norms();\r\n            sum.writeBuffer(newNormal, i << 2);\r\n        }\r\n        this.normal = newNormal;\r\n        return this;\r\n    }\r\n    inverseNormal(): TetraMesh {\r\n        let count = this.count ?? this.position.length >> 4;\r\n        let temp: number;\r\n        for (let i = 0; i < count; i++) {\r\n            let offset = i << 4;\r\n            temp = this.position[offset + 0]; this.position[offset + 0] = this.position[offset + 4]; this.position[offset + 4] = temp;\r\n            temp = this.position[offset + 1]; this.position[offset + 1] = this.position[offset + 5]; this.position[offset + 5] = temp;\r\n            temp = this.position[offset + 2]; this.position[offset + 2] = this.position[offset + 6]; this.position[offset + 6] = temp;\r\n            temp = this.position[offset + 3]; this.position[offset + 3] = this.position[offset + 7]; this.position[offset + 7] = temp;\r\n            if (this.uvw) {\r\n                temp = this.uvw[offset + 0]; this.uvw[offset + 0] = this.uvw[offset + 4]; this.uvw[offset + 4] = temp;\r\n                temp = this.uvw[offset + 1]; this.uvw[offset + 1] = this.uvw[offset + 5]; this.uvw[offset + 5] = temp;\r\n                temp = this.uvw[offset + 2]; this.uvw[offset + 2] = this.uvw[offset + 6]; this.uvw[offset + 6] = temp;\r\n                temp = this.uvw[offset + 3]; this.uvw[offset + 3] = this.uvw[offset + 7]; this.uvw[offset + 7] = temp;\r\n            }\r\n            if (this.normal) {\r\n                temp = this.normal[offset + 0]; this.normal[offset + 0] = this.normal[offset + 4]; this.normal[offset + 4] = temp;\r\n                temp = this.normal[offset + 1]; this.normal[offset + 1] = this.normal[offset + 5]; this.normal[offset + 5] = temp;\r\n                temp = this.normal[offset + 2]; this.normal[offset + 2] = this.normal[offset + 6]; this.normal[offset + 6] = temp;\r\n                temp = this.normal[offset + 3]; this.normal[offset + 3] = this.normal[offset + 7]; this.normal[offset + 7] = temp;\r\n            }\r\n        }\r\n        this.position\r\n        if (this.normal) {\r\n            for (let i = 0, l = this.normal.length; i < l; i++) {\r\n                this.normal[i] = -this.normal[i];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    setUVWAsPosition() {\r\n        if (!this.uvw) this.uvw = this.position.slice(0);\r\n        else {\r\n            this.uvw.set(this.position);\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexport class TetraIndexMesh implements TetraIndexMeshData {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    positionIndex: Uint32Array;\r\n    normalIndex?: Uint32Array;\r\n    uvwIndex?: Uint32Array;\r\n    count?: number;\r\n    constructor(d: TetraIndexMeshData) {\r\n        this.position = d.position;\r\n        this.normal = d.normal;\r\n        this.uvw = d.uvw;\r\n        this.positionIndex = d.positionIndex;\r\n        this.normalIndex = d.normalIndex;\r\n        this.uvwIndex = d.uvwIndex;\r\n        this.count = d.count;\r\n    }\r\n    applyAffineMat4(am: AffineMat4) {\r\n        applyAffineMat4(this, am);\r\n        return this;\r\n    }\r\n    applyObj4(obj4: Obj4) {\r\n        applyObj4(this, obj4);\r\n        return this;\r\n    }\r\n    toNonIndexMesh() {\r\n        let count = this.position.length << 2;\r\n        let out = new TetraMesh({\r\n            position: new Float32Array(count),\r\n            count: count >> 4\r\n        });\r\n        toNonIndex(this.position, this.positionIndex, out.position, 4);\r\n        if (this.normal) {\r\n            out.normal = new Float32Array(count);\r\n            toNonIndex(this.normal, this.normalIndex, out.normal, 4);\r\n        }\r\n        if (this.uvw) {\r\n            out.uvw = new Float32Array(count);\r\n            toNonIndex(this.uvw, this.uvwIndex, out.uvw, 4);\r\n        }\r\n\r\n        return out;\r\n    }\r\n}\r\n\r\nfunction applyAffineMat4(mesh: TetraMeshData, am: AffineMat4) {\r\n    let vp = new Vec4();\r\n    for (let i = 0; i < mesh.position.length; i += 4) {\r\n        vp.set(\r\n            mesh.position[i],\r\n            mesh.position[i + 1],\r\n            mesh.position[i + 2],\r\n            mesh.position[i + 3],\r\n        ).mulmatls(am.mat).adds(am.vec).writeBuffer(mesh.position, i);\r\n        if (mesh.normal) {\r\n            vp.set(\r\n                mesh.normal[i],\r\n                mesh.normal[i + 1],\r\n                mesh.normal[i + 2],\r\n                mesh.normal[i + 3],\r\n            ).mulmatls(am.mat).writeBuffer(mesh.position, i);\r\n        }\r\n    }\r\n    return mesh;\r\n}\r\nfunction applyObj4(mesh: TetraMeshData, obj: Obj4) {\r\n    let vp = new Vec4();\r\n    let scaleinv: Vec4;\r\n    if (obj.scale && mesh.normal) {\r\n        scaleinv = new Vec4(1 / obj.scale.x, 1 / obj.scale.y, 1 / obj.scale.z, 1 / obj.scale.w);\r\n    }\r\n    for (let i = 0; i < mesh.position.length; i += 4) {\r\n        if (obj.scale) {\r\n            vp.set(\r\n                mesh.position[i] * obj.scale.x,\r\n                mesh.position[i + 1] * obj.scale.y,\r\n                mesh.position[i + 2] * obj.scale.z,\r\n                mesh.position[i + 3] * obj.scale.w,\r\n            ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.position, i);\r\n            if (mesh.normal) {\r\n                vp.set(\r\n                    mesh.normal[i] * scaleinv.x,\r\n                    mesh.normal[i + 1] * scaleinv.y,\r\n                    mesh.normal[i + 2] * scaleinv.z,\r\n                    mesh.normal[i + 3] * scaleinv.w,\r\n                ).rotates(obj.rotation).norms().writeBuffer(mesh.normal, i);\r\n            }\r\n        } else {\r\n            vp.set(\r\n                mesh.position[i],\r\n                mesh.position[i + 1],\r\n                mesh.position[i + 2],\r\n                mesh.position[i + 3],\r\n            ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.position, i);\r\n            if (mesh.normal) {\r\n                vp.set(\r\n                    mesh.normal[i],\r\n                    mesh.normal[i + 1],\r\n                    mesh.normal[i + 2],\r\n                    mesh.normal[i + 3],\r\n                ).rotates(obj.rotation).writeBuffer(mesh.normal, i);\r\n            }\r\n        }\r\n    }\r\n    return mesh;\r\n}\r\nexport function concat(meshes: TetraMeshData[]): TetraMesh {\r\n    let length = 0;\r\n    let hasNormal = true;\r\n    let hasUvw = true;\r\n    for (let i = 0; i < meshes.length; i++) {\r\n        length += meshes[i].position.length;\r\n        hasUvw = hasUvw && (meshes[i].uvw ? true : false);\r\n        hasNormal = hasNormal && (meshes[i].normal ? true : false);\r\n    }\r\n    let position = new Float32Array(length);\r\n    let ret = new TetraMesh({ position, count: length >> 4 });\r\n    let normal: Float32Array, uvw: Float32Array;\r\n    if (hasNormal) {\r\n        normal = new Float32Array(length);\r\n        ret.normal = normal;\r\n    }\r\n    if (hasUvw) {\r\n        uvw = new Float32Array(length);\r\n        ret.uvw = uvw;\r\n    }\r\n    length = 0;\r\n    for (let i = 0; i < meshes.length; i++) {\r\n        position.set(meshes[i].position, length);\r\n        if (hasNormal) {\r\n            normal.set(meshes[i].normal, length);\r\n        }\r\n        if (hasUvw) {\r\n            uvw.set(meshes[i].uvw, length);\r\n        }\r\n        length += meshes[i].position.length;\r\n    }\r\n    return ret;\r\n}\r\n\r\n"],"names":[],"mappings":"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"}