{"version":3,"file":"facemesh.js","sources":["../../../../src/mesh/face/facemesh.ts"],"sourcesContent":["import { toIndexbuffer, toNonIndex } from \"../index\";\r\nimport { AffineMat4, Obj4 } from \"../../math/algebra/affine\";\r\nimport { Vec4 } from \"../../math/algebra/vec4\";\r\n\r\n/** FaceMesh store traditional 2-face mesh as triangle or quad list\r\n *  This mesh is for constructing complex tetrameshes\r\n *  It is not aimed for rendering purpose\r\n */\r\nexport interface FaceMeshData {\r\n    quad?: {\r\n        position: Float32Array;\r\n        normal?: Float32Array;\r\n        uvw?: Float32Array;\r\n        count?: number;\r\n    };\r\n    triangle?: {\r\n        position: Float32Array;\r\n        normal?: Float32Array;\r\n        uvw?: Float32Array;\r\n        count?: number;\r\n    };\r\n}\r\nexport class FaceMesh implements FaceMeshData {\r\n    quad?: {\r\n        position: Float32Array;\r\n        normal?: Float32Array;\r\n        uvw?: Float32Array;\r\n        count?: number;\r\n    };\r\n    triangle?: {\r\n        position: Float32Array;\r\n        normal?: Float32Array;\r\n        uvw?: Float32Array;\r\n        count?: number;\r\n    };\r\n    constructor(d: FaceMeshData) {\r\n        this.quad = d.quad;\r\n        this.triangle = d.triangle;\r\n    }\r\n    applyAffineMat4(am: AffineMat4) {\r\n        applyAffineMat4(this, am);\r\n        return this;\r\n    }\r\n    applyObj4(obj4: Obj4) {\r\n        applyObj4(this, obj4);\r\n        return this;\r\n    }\r\n    toIndexMesh() {\r\n        let position = [];\r\n        let normal = [];\r\n        let uvw = [];\r\n        let posIdx4 = [];\r\n        let normalIdx4 = [];\r\n        let uvwIdx4 = [];\r\n        let posIdx3 = [];\r\n        let normalIdx3 = [];\r\n        let uvwIdx3 = [];\r\n        if (this.quad) {\r\n            toIndexbuffer(this.quad.position, position, posIdx4, 4);\r\n            if (this.quad.normal) toIndexbuffer(this.quad.normal, normal, normalIdx4, 4);\r\n            if (this.quad.uvw) toIndexbuffer(this.quad.uvw, uvw, uvwIdx4, 4);\r\n        }\r\n        if (this.triangle) {\r\n            toIndexbuffer(this.triangle.position, position, posIdx3, 4);\r\n            if (this.triangle.normal) toIndexbuffer(this.triangle.normal, normal, normalIdx3, 4);\r\n            if (this.triangle.uvw) toIndexbuffer(this.triangle.uvw, uvw, uvwIdx3, 4);\r\n        }\r\n        let out = new FaceIndexMesh({\r\n            position: new Float32Array(position)\r\n        });\r\n        if (this.quad) {\r\n            out.quad = {\r\n                position: new Uint32Array(posIdx4)\r\n            }\r\n            if (this.quad.normal) out.quad.normal = new Uint32Array(normalIdx4);\r\n            if (this.quad.uvw) out.quad.uvw = new Uint32Array(uvwIdx4);\r\n        }\r\n        if (this.triangle) {\r\n            out.triangle = {\r\n                position: new Uint32Array(posIdx4)\r\n            }\r\n            if (this.triangle.normal) out.triangle.normal = new Uint32Array(normalIdx4);\r\n            if (this.triangle.uvw) out.triangle.uvw = new Uint32Array(uvwIdx4);\r\n        }\r\n        if (normal.length) out.normal = new Float32Array(normal);\r\n        if (uvw.length) out.uvw = new Float32Array(uvw);\r\n        return out;\r\n    }\r\n    clone(): FaceMesh {\r\n        let ret = new FaceMesh({});\r\n        if (this.quad) {\r\n            ret.quad = {\r\n                position: this.quad.position.slice(0)\r\n            };\r\n            if (this.quad.count) ret.quad.count = this.quad.count;\r\n            if (this.quad.normal) ret.quad.normal = this.quad.normal.slice(0);\r\n            if (this.quad.uvw) ret.quad.uvw = this.quad.uvw.slice(0);\r\n        }\r\n        if (this.triangle) {\r\n            ret.triangle = {\r\n                position: this.triangle.position.slice(0)\r\n            };\r\n            if (this.triangle.count) ret.triangle.count = this.triangle.count;\r\n            if (this.triangle.normal) ret.triangle.normal = this.triangle.normal.slice(0);\r\n            if (this.triangle.uvw) ret.triangle.uvw = this.triangle.uvw.slice(0);\r\n        }\r\n        return ret;\r\n    }\r\n    concat(m2: FaceMesh): FaceMesh {\r\n        let quad_position = new Float32Array(\r\n            (this.quad?.position?.length ?? 0) + (m2.quad?.position?.length ?? 0)\r\n        );\r\n        if (this.quad?.position) quad_position.set(this.quad.position);\r\n        if (m2.quad?.position) quad_position.set(m2.quad.position, this.quad.position?.length ?? 0);\r\n\r\n        let tri_position = new Float32Array(\r\n            (this.triangle?.position?.length ?? 0) + (m2.triangle?.position?.length ?? 0)\r\n        );\r\n        if (this.triangle?.position) tri_position.set(this.triangle.position);\r\n        if (m2.triangle?.position) tri_position.set(m2.triangle.position, this.triangle.position?.length ?? 0);\r\n\r\n        let ret = new FaceMesh({});\r\n        if (quad_position.length) ret.quad = { position: quad_position };\r\n        if (tri_position.length) ret.triangle = { position: tri_position };\r\n        if (this.quad?.normal && m2.quad?.normal) {\r\n            let normal = new Float32Array((this.quad?.normal?.length ?? 0) + (m2.quad?.normal?.length ?? 0));\r\n            if (this.quad?.normal) normal.set(this.quad.normal);\r\n            if (m2.quad?.normal) normal.set(m2.quad.normal, this.quad?.normal?.length ?? 0);\r\n            ret.quad.normal = normal;\r\n        }\r\n        if (this.triangle?.normal && m2.triangle?.normal) {\r\n            let normal = new Float32Array((this.triangle?.normal?.length ?? 0) + (m2.triangle?.normal?.length ?? 0));\r\n            if (this.triangle?.normal) normal.set(this.triangle.normal);\r\n            if (m2.triangle?.normal) normal.set(m2.triangle.normal, this.triangle?.normal?.length ?? 0);\r\n            ret.triangle.normal = normal;\r\n        }\r\n        if (this.quad?.uvw && m2.quad?.uvw) {\r\n            let uvw = new Float32Array((this.quad?.uvw?.length ?? 0) + (m2.quad?.uvw?.length ?? 0));\r\n            if (this.quad?.uvw) uvw.set(this.quad.uvw);\r\n            if (m2.quad?.uvw) uvw.set(m2.quad.uvw, this.quad?.uvw?.length ?? 0);\r\n            ret.quad.uvw = uvw;\r\n        }\r\n        if (this.triangle?.uvw && m2.triangle?.uvw) {\r\n            let uvw = new Float32Array((this.triangle?.uvw?.length ?? 0) + (m2.triangle?.uvw?.length ?? 0));\r\n            if (this.triangle?.uvw) uvw.set(this.triangle.uvw);\r\n            if (m2.triangle?.uvw) uvw.set(m2.triangle.uvw, this.triangle?.uvw?.length ?? 0);\r\n            ret.triangle.uvw = uvw;\r\n        }\r\n        return ret;\r\n    }\r\n    setConstantNormal(n: Vec4) {\r\n        if (this.quad) {\r\n            let len = this.quad.count << 4;\r\n            this.quad.normal ??= new Float32Array(len);\r\n            for (let i = 0; i < len; i += 4) n.writeBuffer(this.quad.normal, i);\r\n        }\r\n        if (this.triangle) {\r\n            let len = this.triangle.count * 12;\r\n            this.triangle.normal ??= new Float32Array(len);\r\n            for (let i = 0; i < len; i += 4) n.writeBuffer(this.triangle.normal, i);\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexport interface FaceIndexMeshData {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    quad?: {\r\n        position: Uint32Array;\r\n        normal?: Uint32Array;\r\n        uvw?: Uint32Array;\r\n        count?: number;\r\n    };\r\n    triangle?: {\r\n        position: Uint32Array;\r\n        normal?: Uint32Array;\r\n        uvw?: Uint32Array;\r\n        count?: number;\r\n    };\r\n}\r\nexport class FaceIndexMesh implements FaceIndexMeshData {\r\n    position: Float32Array;\r\n    normal?: Float32Array;\r\n    uvw?: Float32Array;\r\n    quad?: {\r\n        position: Uint32Array;\r\n        normal?: Uint32Array;\r\n        uvw?: Uint32Array;\r\n        count?: number;\r\n    };\r\n    triangle?: {\r\n        position: Uint32Array;\r\n        normal?: Uint32Array;\r\n        uvw?: Uint32Array;\r\n        count?: number;\r\n    };\r\n    constructor(d: FaceIndexMeshData) {\r\n        this.quad = d.quad;\r\n        this.triangle = d.triangle;\r\n        this.position = d.position;\r\n        this.normal = d.normal;\r\n        this.uvw = d.uvw;\r\n    }\r\n\r\n    applyAffineMat4(am: AffineMat4) {\r\n        applyAffineMat4(this, am);\r\n        return this;\r\n    }\r\n    applyObj4(obj4: Obj4) {\r\n        applyObj4(this, obj4);\r\n        return this;\r\n    }\r\n    toNonIndexMesh() {\r\n        let out = new FaceMesh({});\r\n        if (this.quad) {\r\n            let count = this.quad.position.length << 2;\r\n            out.quad = {\r\n                position: new Float32Array(count),\r\n                count: count >> 4\r\n            };\r\n            toNonIndex(this.position, this.quad.position, out.quad.position, 4);\r\n            if (this.normal) {\r\n                out.quad.normal = new Float32Array(count);\r\n                toNonIndex(this.normal, this.quad.normal, out.quad.normal, 4);\r\n            }\r\n            if (this.uvw) {\r\n                out.quad.uvw = new Float32Array(count);\r\n                toNonIndex(this.uvw, this.quad.uvw, out.quad.uvw, 4);\r\n            }\r\n        }\r\n        if (this.triangle) {\r\n            let count = this.triangle.position.length << 2;\r\n            out.triangle = {\r\n                position: new Float32Array(count),\r\n                count: count / 12\r\n            };\r\n            toNonIndex(this.position, this.triangle.position, out.triangle.position, 4);\r\n            if (this.normal) {\r\n                out.triangle.normal = new Float32Array(count);\r\n                toNonIndex(this.normal, this.triangle.normal, out.triangle.normal, 4);\r\n            }\r\n            if (this.uvw) {\r\n                out.triangle.uvw = new Float32Array(count);\r\n                toNonIndex(this.uvw, this.triangle.uvw, out.triangle.uvw, 4);\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    clone(): FaceIndexMesh {\r\n        let ret = new FaceIndexMesh({ position: this.position.slice(0) });\r\n        if (this.uvw) ret.uvw = this.uvw.slice(0);\r\n        if (this.normal) ret.normal = this.normal.slice(0);\r\n        if (this.quad) {\r\n            ret.quad = {\r\n                position: this.quad.position.slice(0)\r\n            };\r\n            if (this.quad.count) ret.quad.count = this.quad.count;\r\n            if (this.quad.normal) ret.quad.normal = this.quad.normal.slice(0);\r\n            if (this.quad.uvw) ret.quad.uvw = this.quad.uvw.slice(0);\r\n        }\r\n        if (this.triangle) {\r\n            ret.triangle = {\r\n                position: this.triangle.position.slice(0)\r\n            };\r\n            if (this.triangle.count) ret.triangle.count = this.triangle.count;\r\n            if (this.triangle.normal) ret.triangle.normal = this.triangle.normal.slice(0);\r\n            if (this.triangle.uvw) ret.triangle.uvw = this.triangle.uvw.slice(0);\r\n        }\r\n        return ret;\r\n    }\r\n    setConstantNormal(n: Vec4) {\r\n        this.normal = new Float32Array([n.x, n.y, n.z, n.w]);\r\n        if (this.quad) {\r\n            this.quad.normal ??= new Uint32Array(this.quad.count << 2);\r\n            this.quad.normal.fill(0);\r\n        }\r\n        if (this.triangle) {\r\n            this.triangle.normal ??= new Uint32Array(this.triangle.count * 3);\r\n            this.triangle.normal.fill(0);\r\n        }\r\n        return this;\r\n    }\r\n    concat(m2: FaceIndexMesh): FaceIndexMesh {\r\n        let position = new Float32Array(this.position.length + m2.position.length);\r\n        position.set(this.position);\r\n        position.set(m2.position, this.position.length);\r\n        let ret = new FaceIndexMesh({ position });\r\n        if (this.normal && m2.normal) {\r\n            let normal = new Float32Array(this.normal.length + m2.normal.length);\r\n            normal.set(this.normal);\r\n            normal.set(m2.normal, this.normal.length);\r\n            ret.normal = normal;\r\n        }\r\n        if (this.uvw && m2.uvw) {\r\n            let uvw = new Float32Array(this.uvw.length + m2.uvw.length);\r\n            uvw.set(this.uvw);\r\n            uvw.set(m2.uvw, this.uvw.length);\r\n            ret.uvw = uvw;\r\n        }\r\n        // index array concat\r\n        if (this.quad || m2.quad) {\r\n            let quadCount1 = (this.quad?.count << 2) || (this.quad?.position?.length ?? 0);\r\n            let quadCount2 = (this.quad?.count << 2) || (this.quad?.position?.length ?? 0);\r\n            let quadCount = quadCount1 + quadCount2;\r\n            let qp = new Uint32Array(quadCount);\r\n            let hasN = !((this.quad && !this.quad.normal) || (m2.quad && !m2.quad.normal));\r\n            let hasU = !((this.quad && !this.quad.uvw) || (m2.quad && !m2.quad.uvw));\r\n            let qn = hasN ? new Uint32Array(quadCount) : null;\r\n            let qu = hasU ? new Uint32Array(quadCount) : null;\r\n            ret.quad = { position: qp, count: quadCount >> 2 };\r\n            if (this.quad?.position) {\r\n                qp.set(this.quad.position.subarray(0, quadCount1));\r\n                if (hasN) { qn.set(this.quad.normal.subarray(0, quadCount1)); ret.quad.normal = qn; }\r\n                if (hasU) { qu.set(this.quad.uvw.subarray(0, quadCount1)); ret.quad.uvw = qu; }\r\n            }\r\n            if (m2.quad?.position) {\r\n                qp.set(m2.quad.position.subarray(0, quadCount2), quadCount1);\r\n                if (hasN) qn.set(m2.quad.normal.subarray(0, quadCount2), quadCount1);\r\n                if (hasU) qu.set(m2.quad.uvw.subarray(0, quadCount2), quadCount1);\r\n                if (quadCount1) {\r\n                    for (let i = quadCount1; i < quadCount; i++) {\r\n                        qp[i] += this.position.length >> 2;\r\n                        if (hasN) qn[i] += this.normal.length >> 2;\r\n                        if (hasU) qu[i] += this.uvw.length >> 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.triangle || m2.triangle) {\r\n            let triangleCount1 = (this.triangle?.count * 3) || (this.triangle?.position?.length ?? 0);\r\n            let triangleCount2 = (this.triangle?.count * 3) || (this.triangle?.position?.length ?? 0);\r\n            let triangleCount = triangleCount1 + triangleCount2;\r\n            let qp = new Uint32Array(triangleCount);\r\n            let hasN = !((this.triangle && !this.triangle.normal) || (m2.triangle && !m2.triangle.normal));\r\n            let hasU = !((this.triangle && !this.triangle.uvw) || (m2.triangle && !m2.triangle.uvw));\r\n            let qn = hasN ? new Uint32Array(triangleCount) : null;\r\n            let qu = hasU ? new Uint32Array(triangleCount) : null;\r\n            ret.triangle = { position: qp, count: Math.round(triangleCount / 3) };\r\n            if (this.triangle?.position) {\r\n                qp.set(this.triangle.position.subarray(0, triangleCount1));\r\n                if (hasN) { qn.set(this.triangle.normal.subarray(0, triangleCount1)); ret.triangle.normal = qn; }\r\n                if (hasU) { qu.set(this.triangle.uvw.subarray(0, triangleCount1)); ret.triangle.uvw = qu; }\r\n            }\r\n            if (m2.triangle?.position) {\r\n                qp.set(m2.triangle.position.subarray(0, triangleCount2), triangleCount1);\r\n                if (hasN) qn.set(m2.triangle.normal.subarray(0, triangleCount2), triangleCount1);\r\n                if (hasU) qu.set(m2.triangle.uvw.subarray(0, triangleCount2), triangleCount1);\r\n                if (triangleCount1) {\r\n                    for (let i = triangleCount1; i < triangleCount; i++) {\r\n                        qp[i] += this.position.length >> 2;\r\n                        if (hasN) qn[i] += this.normal.length >> 2;\r\n                        if (hasU) qu[i] += this.uvw.length >> 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return ret;\r\n    }\r\n}\r\nfunction applyAffineMat4(m: FaceIndexMeshData | FaceMeshData, am: AffineMat4) {\r\n    let vp = new Vec4();\r\n    if ((m as FaceIndexMesh).position) {\r\n        const mesh = m as FaceIndexMesh;\r\n        for (let i = 0; i < mesh.position.length; i += 4) {\r\n            vp.set(\r\n                mesh.position[i],\r\n                mesh.position[i + 1],\r\n                mesh.position[i + 2],\r\n                mesh.position[i + 3],\r\n            ).mulmatls(am.mat).adds(am.vec).writeBuffer(mesh.position, i);\r\n            if (mesh.normal) {\r\n                vp.set(\r\n                    mesh.normal[i],\r\n                    mesh.normal[i + 1],\r\n                    mesh.normal[i + 2],\r\n                    mesh.normal[i + 3],\r\n                ).mulmatls(am.mat).writeBuffer(mesh.position, i);\r\n            }\r\n        }\r\n        return mesh;\r\n    } else {\r\n        const mesh = m as FaceMesh;\r\n        let position = mesh.triangle?.position;\r\n        for (let i = 0; i < position?.length; i += 4) {\r\n            vp.set(\r\n                position[i],\r\n                position[i + 1],\r\n                position[i + 2],\r\n                position[i + 3],\r\n            ).mulmatls(am.mat).adds(am.vec).writeBuffer(position, i);\r\n            let normal = mesh.triangle?.normal;\r\n            if (normal) {\r\n                vp.set(\r\n                    normal[i],\r\n                    normal[i + 1],\r\n                    normal[i + 2],\r\n                    normal[i + 3],\r\n                ).mulmatls(am.mat).writeBuffer(normal, i);\r\n            }\r\n        }\r\n        position = mesh.quad?.position;\r\n        for (let i = 0; i < position?.length; i += 4) {\r\n            vp.set(\r\n                position[i],\r\n                position[i + 1],\r\n                position[i + 2],\r\n                position[i + 3],\r\n            ).mulmatls(am.mat).adds(am.vec).writeBuffer(position, i);\r\n            let normal = mesh.quad?.normal;\r\n            if (normal) {\r\n                vp.set(\r\n                    normal[i],\r\n                    normal[i + 1],\r\n                    normal[i + 2],\r\n                    normal[i + 3],\r\n                ).mulmatls(am.mat).writeBuffer(normal, i);\r\n            }\r\n        }\r\n        return mesh;\r\n    }\r\n}\r\nfunction applyObj4(mesh: FaceIndexMeshData | FaceMeshData, obj: Obj4) {\r\n    let vp = new Vec4();\r\n    let scaleinv: Vec4;\r\n    if (obj.scale && ((mesh as FaceIndexMesh).normal || mesh.quad?.normal || mesh.triangle?.normal)) {\r\n        scaleinv = new Vec4(1 / obj.scale.x, 1 / obj.scale.y, 1 / obj.scale.z, 1 / obj.scale.w);\r\n    }\r\n    if ((mesh as FaceIndexMesh).position) {\r\n        const m = mesh as FaceIndexMesh;\r\n        for (let i = 0; i < m.position.length; i += 4) {\r\n            if (obj.scale) {\r\n                vp.set(\r\n                    m.position[i] * obj.scale.x,\r\n                    m.position[i + 1] * obj.scale.y,\r\n                    m.position[i + 2] * obj.scale.z,\r\n                    m.position[i + 3] * obj.scale.w,\r\n                ).rotates(obj.rotation).adds(obj.position).writeBuffer(m.position, i);\r\n                if (m.normal) {\r\n                    vp.set(\r\n                        m.normal[i] * scaleinv.x,\r\n                        m.normal[i + 1] * scaleinv.y,\r\n                        m.normal[i + 2] * scaleinv.z,\r\n                        m.normal[i + 3] * scaleinv.w,\r\n                    ).rotates(obj.rotation).norms().writeBuffer(m.normal, i);\r\n                }\r\n            } else {\r\n                vp.set(\r\n                    m.position[i],\r\n                    m.position[i + 1],\r\n                    m.position[i + 2],\r\n                    m.position[i + 3],\r\n                ).rotates(obj.rotation).adds(obj.position).writeBuffer(m.position, i);\r\n                if (m.normal) {\r\n                    vp.set(\r\n                        m.normal[i],\r\n                        m.normal[i + 1],\r\n                        m.normal[i + 2],\r\n                        m.normal[i + 3],\r\n                    ).rotates(obj.rotation).writeBuffer(m.normal, i);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < mesh.quad?.position.length; i += 4) {\r\n            if (obj.scale) {\r\n                vp.set(\r\n                    mesh.quad.position[i] * obj.scale.x,\r\n                    mesh.quad.position[i + 1] * obj.scale.y,\r\n                    mesh.quad.position[i + 2] * obj.scale.z,\r\n                    mesh.quad.position[i + 3] * obj.scale.w,\r\n                ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.quad.position as Float32Array, i);\r\n                if (mesh.quad.normal) {\r\n                    vp.set(\r\n                        mesh.quad.normal[i] * scaleinv.x,\r\n                        mesh.quad.normal[i + 1] * scaleinv.y,\r\n                        mesh.quad.normal[i + 2] * scaleinv.z,\r\n                        mesh.quad.normal[i + 3] * scaleinv.w,\r\n                    ).rotates(obj.rotation).norms().writeBuffer(mesh.quad.normal as Float32Array, i);\r\n                }\r\n            } else {\r\n                vp.set(\r\n                    mesh.quad.position[i],\r\n                    mesh.quad.position[i + 1],\r\n                    mesh.quad.position[i + 2],\r\n                    mesh.quad.position[i + 3],\r\n                ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.quad.position as Float32Array, i);\r\n                if (mesh.quad.normal) {\r\n                    vp.set(\r\n                        mesh.quad.normal[i],\r\n                        mesh.quad.normal[i + 1],\r\n                        mesh.quad.normal[i + 2],\r\n                        mesh.quad.normal[i + 3],\r\n                    ).rotates(obj.rotation).writeBuffer(mesh.quad.normal as Float32Array, i);\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < mesh.triangle?.position.length; i += 4) {\r\n            if (obj.scale) {\r\n                vp.set(\r\n                    mesh.triangle.position[i] * obj.scale.x,\r\n                    mesh.triangle.position[i + 1] * obj.scale.y,\r\n                    mesh.triangle.position[i + 2] * obj.scale.z,\r\n                    mesh.triangle.position[i + 3] * obj.scale.w,\r\n                ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.triangle.position as Float32Array, i);\r\n                if (mesh.triangle.normal) {\r\n                    vp.set(\r\n                        mesh.triangle.normal[i] * scaleinv.x,\r\n                        mesh.triangle.normal[i + 1] * scaleinv.y,\r\n                        mesh.triangle.normal[i + 2] * scaleinv.z,\r\n                        mesh.triangle.normal[i + 3] * scaleinv.w,\r\n                    ).rotates(obj.rotation).norms().writeBuffer(mesh.triangle.normal as Float32Array, i);\r\n                }\r\n            } else {\r\n                vp.set(\r\n                    mesh.triangle.position[i],\r\n                    mesh.triangle.position[i + 1],\r\n                    mesh.triangle.position[i + 2],\r\n                    mesh.triangle.position[i + 3],\r\n                ).rotates(obj.rotation).adds(obj.position).writeBuffer(mesh.triangle.position as Float32Array, i);\r\n                if (mesh.triangle.normal) {\r\n                    vp.set(\r\n                        mesh.triangle.normal[i],\r\n                        mesh.triangle.normal[i + 1],\r\n                        mesh.triangle.normal[i + 2],\r\n                        mesh.triangle.normal[i + 3],\r\n                    ).rotates(obj.rotation).writeBuffer(mesh.triangle.normal as Float32Array, i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return mesh;\r\n}\r\n// todo\r\n// export function concat(meshes: (FaceMesh | FaceIndexMesh)[]): FaceMesh | FaceIndexMesh {\r\n//     let hasPosition = false;\r\n//     for (let i = 0; i < meshes.length; i++) {\r\n//         let cur = typeof (meshes[i] as FaceIndexMesh).position !== \"undefined\";\r\n//         if (i) {\r\n//             if (hasPosition !== cur) {\r\n//                 console.error(\"Meshes must all be indexed or non-indexed.\");\r\n//                 return {};\r\n//             }\r\n//         }\r\n//         hasPosition = cur;\r\n//     }\r\n//     if (!meshes.length) return {};\r\n//     if ((meshes[0] as FaceIndexMesh).position) {\r\n//         let length = 0;\r\n//         let hasNormal = true;\r\n//         let hasUvw = true;\r\n//         const ms = meshes as FaceIndexMesh[];\r\n//         for (let i = 0; i < ms.length; i++) {\r\n//             length += ms[i].position.length;\r\n//             hasUvw = hasUvw && (ms[i].uvw ? true : false);\r\n//             hasNormal = hasNormal && (ms[i].normal ? true : false);\r\n//         }\r\n//         let position = new Float32Array(length);\r\n//         let ret: FaceIndexMesh = { position };\r\n//         let normal: Float32Array, uvw: Float32Array;\r\n//         if (hasNormal) {\r\n//             normal = new Float32Array(length);\r\n//             ret.normal = normal;\r\n//         }\r\n//         if (hasUvw) {\r\n//             uvw = new Float32Array(length);\r\n//             ret.uvw = uvw;\r\n//         }\r\n//         length = 0;\r\n//         for (let i = 0; i < meshes.length; i++) {\r\n//             position.set(meshes[i].position, length);\r\n//             if (hasNormal) {\r\n//                 normal.set(meshes[i].normal, length);\r\n//             }\r\n//             if (hasUvw) {\r\n//                 uvw.set(meshes[i].uvw, length);\r\n//             }\r\n//             length += meshes[i].position.length;\r\n//         }\r\n//         return ret;\r\n//     }\r\n\r\n// }"],"names":[],"mappings":"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"}