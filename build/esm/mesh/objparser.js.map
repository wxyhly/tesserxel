{"version":3,"file":"objparser.js","sources":["../../../src/mesh/objparser.ts"],"sourcesContent":["import { FaceIndexMesh, FaceIndexMeshData } from \"./face/facemesh.js\";\r\nimport { TetraIndexMesh } from \"./tetra/tetramesh.js\";\r\n\r\ninterface IndexMesh extends FaceIndexMeshData {\r\n    positionIndex?: Uint32Array;\r\n    normalIndex?: Uint32Array;\r\n    uvwIndex?: Uint32Array;\r\n    count?: number;\r\n}\r\nexport class ObjFile {\r\n    data: string;\r\n    constructor(data: string | TetraIndexMesh | FaceIndexMesh) {\r\n        this.data = this.stringify(data);\r\n    }\r\n    private stringify(data: string | TetraIndexMesh | FaceIndexMesh) {\r\n        if (typeof data === \"string\") return data;\r\n        let out = \"# Tesserxel ObjFile Parser\\n# github.com/wxyhly/tesserxel\\n\";\r\n        out += writeVertexLike(\"v\", data.position);\r\n        if (data.normal) out += writeVertexLike(\"vn\", data.normal);\r\n        if (data.uvw) out += writeVertexLike(\"vt\", data.uvw);\r\n        if ((data as TetraIndexMesh).positionIndex) {\r\n            let m = data as TetraIndexMesh;\r\n            out += writeFaceLike(\"t\", m.positionIndex, m.uvwIndex, m.normalIndex, 4);\r\n            return out;\r\n        }\r\n        let m = data as FaceIndexMesh;\r\n        if (m.triangle) {\r\n            out += writeFaceLike(\"f\", m.triangle.position, m.triangle.uvw, m.triangle.normal, 3);\r\n        }\r\n        if (m.quad) {\r\n            out += writeFaceLike(\"f\", m.quad.position, m.quad.uvw, m.quad.normal, 4);\r\n        }\r\n        return out;\r\n        function writeVertexLike(identifier: string, data: Float32Array) {\r\n            let out = \"\\n\";\r\n            const reg = new RegExp(\" \" + (0).toPrecision(7) + \"$\", \"g\");\r\n            for (let i = 0, l = data.length; i < l; i += 4) {\r\n                let line = identifier;\r\n                for (let q = 0; q < 4; q++) {\r\n                    line += \" \" + data[i + q].toPrecision(7);\r\n                }\r\n                line = line.trim().replace(reg, \"\");\r\n                if (identifier === \"vt\") line = line.replace(reg, \"\");\r\n                out += line + \"\\n\";\r\n            }\r\n            return out;\r\n        }\r\n        function writeFaceLike(identifier: string, v: Uint32Array, vt: Uint32Array, vn: Uint32Array, stride: number) {\r\n            let out = \"\\n\";\r\n            for (let i = 0, l = v.length; i < l; i += stride) {\r\n                let line = identifier;\r\n                for (let q = 0; q < stride; q++) {\r\n                    line += \" \" + (v[i + q] + 1);\r\n                    if (vt) line += \"/\" + (vt[i + q] + 1);\r\n                    if (vn) line += \"/\" + (vn[i + q] + 1);\r\n                    line = line.replace(/\\/+$/, \"\");\r\n                }\r\n                out += line + \"\\n\";\r\n            }\r\n            return out;\r\n        }\r\n    }\r\n    parse() {\r\n        let lines = this.data.split(\"\\n\");\r\n        let v = [];\r\n        let vt = [];\r\n        let vn = [];\r\n        let quad = {\r\n            v: [],\r\n            vt: [],\r\n            vn: [],\r\n        }\r\n        let tetra = {\r\n            v: [],\r\n            vt: [],\r\n            vn: [],\r\n        }\r\n        let triangle = {\r\n            v: [],\r\n            vt: [],\r\n            vn: [],\r\n        }\r\n        for (let i = 0, l = lines.length; i < l; i++) {\r\n            let line = lines[i].trim();\r\n            if (isCommentOrEmpty(line)) continue;\r\n            let splitArr = line.toLowerCase().split(/\\s/g);\r\n            switch (splitArr[0]) {\r\n                case \"o\":\r\n                    // parseObj(splitArr);\r\n                    break;\r\n                case \"v\":\r\n                    parseVertexLike(v, splitArr);\r\n                    break;\r\n                case \"vt\":\r\n                    parseVertexLike(vt, splitArr);\r\n                    break;\r\n                case \"vn\":\r\n                    parseVertexLike(vn, splitArr);\r\n                    break;\r\n                case \"f\":\r\n                    if (splitArr.length === 5) {\r\n                        parseFaceLike(quad, splitArr);\r\n                    } else if (splitArr.length === 4) {\r\n                        parseFaceLike(triangle, splitArr);\r\n                    } else {\r\n                        error(i, \"Unsupported polygonal face: Only triangles and quads are allowed.\");\r\n                    }\r\n                    break;\r\n                case \"t\":\r\n                    if (splitArr.length === 5) {\r\n                        parseFaceLike(tetra, splitArr);\r\n                    } else {\r\n                        error(i, `Vertices of tetrahedron must be 4, found ${splitArr.length - 1} vertices.`);\r\n                    }\r\n            }\r\n        }\r\n\r\n        let out: IndexMesh = tetra.v.length ? {\r\n            position: new Float32Array(v),\r\n            positionIndex: new Uint32Array(tetra.v)\r\n        } : {\r\n            position: new Float32Array(v)\r\n        }\r\n        if (vt.length) out.uvw = new Float32Array(vt);\r\n        if (vn.length) out.normal = new Float32Array(vn);\r\n        if (triangle.v.length) {\r\n            out.triangle = {\r\n                position: new Uint32Array(triangle.v)\r\n            }\r\n            if (triangle.vt.length) out.triangle.uvw = new Uint32Array(triangle.vt);\r\n            if (triangle.vn.length) out.triangle.normal = new Uint32Array(triangle.vn);\r\n        }\r\n        if (quad.v.length) {\r\n            out.quad = {\r\n                position: new Uint32Array(quad.v)\r\n            }\r\n            if (quad.vt.length) out.quad.uvw = new Uint32Array(quad.vt);\r\n            if (quad.vn.length) out.quad.normal = new Uint32Array(quad.vn);\r\n        }\r\n\r\n        if (tetra.v.length) {\r\n            if (tetra.vt.length) out.uvwIndex = new Uint32Array(tetra.vt);\r\n            if (tetra.vn.length) out.normalIndex = new Uint32Array(tetra.vn);\r\n\r\n        }\r\n        return out;\r\n        function parseVertexLike(dst: number[], splitArr: string[]) {\r\n            while (splitArr.length < 5) { splitArr.push(\"0\"); }\r\n            for (let i = 1, l = splitArr.length; i < l; i++) {\r\n                dst.push(Number(splitArr[i]));\r\n            }\r\n        }\r\n        function parseFaceLike(dst: { v: number[], vt: number[], vn: number[] }, splitArr: string[]) {\r\n            for (let i = 1, l = splitArr.length; i < l; i++) {\r\n                let attrs = splitArr[i].split(\"/\");\r\n                dst.v.push(Number(attrs[0]) - 1);\r\n                if (attrs[1]) dst.vt.push(Number(attrs[1]) - 1);\r\n                if (attrs[2]) dst.vn.push(Number(attrs[2]) - 1);\r\n            }\r\n        }\r\n        function isCommentOrEmpty(line: string) {\r\n            return line === \"\" || line[0] === \"#\";\r\n        }\r\n        function error(line: number, msg: string) {\r\n            console.error(\"ObjFileParser: \" + msg + \"\\n at line \" + line + `\"${lines[line]}\"`);\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"MASa,OAAO,CAAA;AAChB,IAAA,IAAI;AACJ,IAAA,WAAA,CAAY,IAA6C,EAAA;QACrD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IACpC;AACQ,IAAA,SAAS,CAAC,IAA6C,EAAA;QAC3D,IAAI,OAAO,IAAI,KAAK,QAAQ;AAAE,YAAA,OAAO,IAAI;QACzC,IAAI,GAAG,GAAG,6DAA6D;QACvE,GAAG,IAAI,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC;QAC1C,IAAI,IAAI,CAAC,MAAM;YAAE,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;QAC1D,IAAI,IAAI,CAAC,GAAG;YAAE,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;AACpD,QAAA,IAAK,IAAuB,CAAC,aAAa,EAAE;YACxC,IAAI,CAAC,GAAG,IAAsB;AAC9B,YAAA,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;AACxE,YAAA,OAAO,GAAG;QACd;QACA,IAAI,CAAC,GAAG,IAAqB;AAC7B,QAAA,IAAI,CAAC,CAAC,QAAQ,EAAE;YACZ,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACxF;AACA,QAAA,IAAI,CAAC,CAAC,IAAI,EAAE;YACR,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5E;AACA,QAAA,OAAO,GAAG;AACV,QAAA,SAAS,eAAe,CAAC,UAAkB,EAAE,IAAkB,EAAA;YAC3D,IAAI,GAAG,GAAG,IAAI;YACd,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;AAC3D,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC5C,IAAI,IAAI,GAAG,UAAU;AACrB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACxB,oBAAA,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC5C;AACA,gBAAA,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;gBACnC,IAAI,UAAU,KAAK,IAAI;oBAAE,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;AACrD,gBAAA,GAAG,IAAI,IAAI,GAAG,IAAI;YACtB;AACA,YAAA,OAAO,GAAG;QACd;QACA,SAAS,aAAa,CAAC,UAAkB,EAAE,CAAc,EAAE,EAAe,EAAE,EAAe,EAAE,MAAc,EAAA;YACvG,IAAI,GAAG,GAAG,IAAI;AACd,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;gBAC9C,IAAI,IAAI,GAAG,UAAU;AACrB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7B,oBAAA,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC5B,oBAAA,IAAI,EAAE;AAAE,wBAAA,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACrC,oBAAA,IAAI,EAAE;AAAE,wBAAA,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBACrC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;gBACnC;AACA,gBAAA,GAAG,IAAI,IAAI,GAAG,IAAI;YACtB;AACA,YAAA,OAAO,GAAG;QACd;IACJ;IACA,KAAK,GAAA;QACD,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE;QACV,IAAI,EAAE,GAAG,EAAE;QACX,IAAI,EAAE,GAAG,EAAE;AACX,QAAA,IAAI,IAAI,GAAG;AACP,YAAA,CAAC,EAAE,EAAE;AACL,YAAA,EAAE,EAAE,EAAE;AACN,YAAA,EAAE,EAAE,EAAE;SACT;AACD,QAAA,IAAI,KAAK,GAAG;AACR,YAAA,CAAC,EAAE,EAAE;AACL,YAAA,EAAE,EAAE,EAAE;AACN,YAAA,EAAE,EAAE,EAAE;SACT;AACD,QAAA,IAAI,QAAQ,GAAG;AACX,YAAA,CAAC,EAAE,EAAE;AACL,YAAA,EAAE,EAAE,EAAE;AACN,YAAA,EAAE,EAAE,EAAE;SACT;AACD,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;YAC1B,IAAI,gBAAgB,CAAC,IAAI,CAAC;gBAAE;YAC5B,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;AAC9C,YAAA,QAAQ,QAAQ,CAAC,CAAC,CAAC;AACf,gBAAA,KAAK,GAAG;;oBAEJ;AACJ,gBAAA,KAAK,GAAG;AACJ,oBAAA,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAC;oBAC5B;AACJ,gBAAA,KAAK,IAAI;AACL,oBAAA,eAAe,CAAC,EAAE,EAAE,QAAQ,CAAC;oBAC7B;AACJ,gBAAA,KAAK,IAAI;AACL,oBAAA,eAAe,CAAC,EAAE,EAAE,QAAQ,CAAC;oBAC7B;AACJ,gBAAA,KAAK,GAAG;AACJ,oBAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,wBAAA,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;oBACjC;AAAO,yBAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9B,wBAAA,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC;oBACrC;yBAAO;AACH,wBAAA,KAAK,CAAC,CAAC,EAAE,mEAAmE,CAAC;oBACjF;oBACA;AACJ,gBAAA,KAAK,GAAG;AACJ,oBAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,wBAAA,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC;oBAClC;yBAAO;wBACH,KAAK,CAAC,CAAC,EAAE,CAAA,yCAAA,EAA4C,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA,UAAA,CAAY,CAAC;oBACzF;;QAEZ;QAEA,IAAI,GAAG,GAAc,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG;AAClC,YAAA,QAAQ,EAAE,IAAI,YAAY,CAAC,CAAC,CAAC;AAC7B,YAAA,aAAa,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;AACzC,SAAA,GAAG;AACA,YAAA,QAAQ,EAAE,IAAI,YAAY,CAAC,CAAC;SAC/B;QACD,IAAI,EAAE,CAAC,MAAM;YAAE,GAAG,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,EAAE,CAAC;QAC7C,IAAI,EAAE,CAAC,MAAM;YAAE,GAAG,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,EAAE,CAAC;AAChD,QAAA,IAAI,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE;YACnB,GAAG,CAAC,QAAQ,GAAG;AACX,gBAAA,QAAQ,EAAE,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;aACvC;AACD,YAAA,IAAI,QAAQ,CAAC,EAAE,CAAC,MAAM;AAAE,gBAAA,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;AACvE,YAAA,IAAI,QAAQ,CAAC,EAAE,CAAC,MAAM;AAAE,gBAAA,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC9E;AACA,QAAA,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;YACf,GAAG,CAAC,IAAI,GAAG;AACP,gBAAA,QAAQ,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;aACnC;AACD,YAAA,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM;AAAE,gBAAA,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;AAC3D,YAAA,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM;AAAE,gBAAA,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QAClE;AAEA,QAAA,IAAI,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE;AAChB,YAAA,IAAI,KAAK,CAAC,EAAE,CAAC,MAAM;gBAAE,GAAG,CAAC,QAAQ,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;AAC7D,YAAA,IAAI,KAAK,CAAC,EAAE,CAAC,MAAM;gBAAE,GAAG,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;QAEpE;AACA,QAAA,OAAO,GAAG;AACV,QAAA,SAAS,eAAe,CAAC,GAAa,EAAE,QAAkB,EAAA;AACtD,YAAA,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AAAE,gBAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE;AAClD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC7C,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC;QACJ;AACA,QAAA,SAAS,aAAa,CAAC,GAAgD,EAAE,QAAkB,EAAA;AACvF,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC7C,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAClC,gBAAA,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAChC,IAAI,KAAK,CAAC,CAAC,CAAC;AAAE,oBAAA,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC/C,IAAI,KAAK,CAAC,CAAC,CAAC;AAAE,oBAAA,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACnD;QACJ;QACA,SAAS,gBAAgB,CAAC,IAAY,EAAA;YAClC,OAAO,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG;QACzC;AACA,QAAA,SAAS,KAAK,CAAC,IAAY,EAAE,GAAW,EAAA;AACpC,YAAA,OAAO,CAAC,KAAK,CAAC,iBAAiB,GAAG,GAAG,GAAG,aAAa,GAAG,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA,CAAA,CAAG,CAAC;QACtF;IACJ;AACH;;;;"}