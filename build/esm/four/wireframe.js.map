{"version":3,"file":"wireframe.js","sources":["../../../src/four/wireframe.ts"],"sourcesContent":["import { Vec4 } from \"../math/algebra/vec4\";\r\nimport { Obj4 } from \"../math/algebra/affine\";\r\nimport { Camera, PerspectiveCamera } from \"./scene\";\r\nimport { AABB, Plane } from \"../math/geometry/primitive\";\r\nimport { IWireframeRenderState, RenderState } from \"../render/slice/interfaces\";\r\nimport { Vec3, _vec3_4 } from \"../math/algebra/vec3\";\r\nimport { _90, _DEG2RAD } from \"../math/const\";\r\nimport { WireFrameRenderPass } from \"../render/slice/renderer\";\r\nimport { CWMesh } from \"../mesh/mesh\";\r\nimport { CWMeshSelection, Face } from \"../mesh/cwmesh/cwmesh\";\r\nexport interface WireFrameObject extends Obj4 {\r\n    lines: [Vec4, Vec4][];\r\n    visible?: boolean;\r\n    _jsBuffer?: [Vec4, Vec4][];\r\n    obb?: AABB;\r\n}\r\nconst WireFrameTesseractoid_SubCells: [number, number][] = [\r\n    [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7],\r\n    [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7],\r\n    [2, 4], [2, 5], [2, 6], [2, 7],\r\n    [3, 4], [3, 5], [3, 6], [3, 7],\r\n    [4, 6], [4, 7],\r\n    [5, 6], [5, 7]\r\n];\r\nexport class WireFrameTesseractoid extends Obj4 implements WireFrameObject, WireFrameOccluder {\r\n    lines: [Vec4, Vec4][];// GPUBuffer; // linelist\r\n    cells: Plane[];\r\n    subCells: [number, number][] = WireFrameTesseractoid_SubCells;\r\n    obb: AABB;\r\n    visible = true;\r\n    transparent = false;\r\n    constructor(size: Vec4) {\r\n        super(); let x = size.x, y = size.y, z = size.z, w = size.w;\r\n        this.obb = new AABB(size.neg(), size);\r\n        this.lines = [\r\n            [new Vec4(x, y, z, w), new Vec4(x, y, z, -w)],\r\n            [new Vec4(x, y, -z, w), new Vec4(x, y, -z, -w)],\r\n            [new Vec4(x, -y, z, w), new Vec4(x, -y, z, -w)],\r\n            [new Vec4(x, -y, -z, w), new Vec4(x, -y, -z, -w)],\r\n            [new Vec4(-x, y, z, w), new Vec4(-x, y, z, -w)],\r\n            [new Vec4(-x, y, -z, w), new Vec4(-x, y, -z, -w)],\r\n            [new Vec4(-x, -y, z, w), new Vec4(-x, -y, z, -w)],\r\n            [new Vec4(-x, -y, -z, w), new Vec4(-x, -y, -z, -w)],\r\n\r\n            [new Vec4(x, y, z, w), new Vec4(-x, y, z, w)],\r\n            [new Vec4(x, y, z, -w), new Vec4(-x, y, z, -w)],\r\n            [new Vec4(x, y, -z, w), new Vec4(-x, y, -z, w)],\r\n            [new Vec4(x, y, -z, -w), new Vec4(-x, y, -z, -w)],\r\n            [new Vec4(x, -y, z, w), new Vec4(-x, -y, z, w)],\r\n            [new Vec4(x, -y, z, -w), new Vec4(-x, -y, z, -w)],\r\n            [new Vec4(x, -y, -z, w), new Vec4(-x, -y, -z, w)],\r\n            [new Vec4(x, -y, -z, -w), new Vec4(-x, -y, -z, -w)],\r\n\r\n            [new Vec4(x, y, z, w), new Vec4(x, -y, z, w)],\r\n            [new Vec4(-x, y, z, w), new Vec4(-x, -y, z, w)],\r\n            [new Vec4(x, y, z, -w), new Vec4(x, -y, z, -w)],\r\n            [new Vec4(-x, y, z, -w), new Vec4(-x, -y, z, -w)],\r\n            [new Vec4(x, y, -z, w), new Vec4(x, -y, -z, w)],\r\n            [new Vec4(-x, y, -z, w), new Vec4(-x, -y, -z, w)],\r\n            [new Vec4(x, y, -z, -w), new Vec4(x, -y, -z, -w)],\r\n            [new Vec4(-x, y, -z, -w), new Vec4(-x, -y, -z, -w)],\r\n\r\n            [new Vec4(x, y, z, w), new Vec4(x, y, -z, w)],\r\n            [new Vec4(-x, y, z, w), new Vec4(-x, y, -z, w)],\r\n            [new Vec4(x, y, z, -w), new Vec4(x, y, -z, -w)],\r\n            [new Vec4(-x, y, z, -w), new Vec4(-x, y, -z, -w)],\r\n            [new Vec4(x, -y, z, w), new Vec4(x, -y, -z, w)],\r\n            [new Vec4(-x, -y, z, w), new Vec4(-x, -y, -z, w)],\r\n            [new Vec4(x, -y, z, -w), new Vec4(x, -y, -z, -w)],\r\n            [new Vec4(-x, -y, z, -w), new Vec4(-x, -y, -z, -w)],\r\n        ]\r\n        this.cells = [\r\n            new Plane(Vec4.x, x), new Plane(Vec4.xNeg, x),\r\n            new Plane(Vec4.y, y), new Plane(Vec4.yNeg, y),\r\n            new Plane(Vec4.z, z), new Plane(Vec4.zNeg, z),\r\n            new Plane(Vec4.w, w), new Plane(Vec4.wNeg, w),\r\n        ];\r\n    }\r\n}\r\nexport class WireFrameConvexPolytope extends Obj4 implements WireFrameObject, WireFrameOccluder {\r\n    lines: [Vec4, Vec4][];// GPUBuffer; // linelist\r\n    cells: Plane[];\r\n    subCells: [number, number][];\r\n    obb: AABB;\r\n    visible = true;\r\n    transparent = false;\r\n    constructor(cwmesh: CWMesh) {\r\n        super();\r\n        const vertices = cwmesh.data[0] as Vec4[];\r\n        this.lines = (cwmesh.data[1] as Face[]).map(face => [vertices[face[0]], vertices[face[1]]]);\r\n        const subCells: number[][] = (cwmesh.data[2] as Face[]).map(_ => []);\r\n        for (const [idx, cell] of (cwmesh.data[3] as Face[]).entries()) {\r\n            for (const faceIdx of cell) {\r\n                subCells[faceIdx].push(idx);\r\n            }\r\n        }\r\n        let simplexes: number[][][];\r\n        const borders = cwmesh.findBorder(4);\r\n        if (borders) {\r\n            // closed 4d object's surface\r\n            const cells = [];\r\n            const cellsO = [];\r\n            for (const [cellId, border] of borders.entries()) {\r\n                if (border !== 1 && border !== -1) continue;\r\n                cells.push(cellId);\r\n                cellsO.push(border === 1);\r\n            }\r\n            simplexes = cwmesh.triangulate(3, cells, cellsO);\r\n        } else {\r\n            simplexes = cwmesh.triangulate(3, cwmesh.data[3].map((_, idx) => idx));\r\n        }\r\n        const v1 = new Vec4, v2 = new Vec4, v3 = new Vec4;\r\n        this.cells = simplexes.map(ss => {\r\n            const s = ss[0];\r\n            const a0 = vertices[s[0]];\r\n            const a1 = vertices[s[1]];\r\n            const a2 = vertices[s[2]];\r\n            const a3 = vertices[s[3]];\r\n            const normal = v1.subset(a0, a1).wedge(v2.subset(a0, a2)).wedgev(v3.subset(a0, a3)).norms();\r\n            return new Plane(normal, a1.dot(normal));\r\n        });\r\n        this.subCells = subCells as [number, number][];\r\n        this.obb = AABB.fromPoints(vertices);\r\n    }\r\n}\r\nconst _vec4 = new Vec4;\r\nconst _vec3 = new Vec3;\r\nconst _vec42 = new Vec4;\r\nexport class WireFrameScene {\r\n    occluders: WireFrameOccluder[] = [];\r\n    objects: WireFrameObject[] = [];\r\n    camera = new PerspectiveCamera;\r\n    jsBuffer: Float32Array;\r\n    gpuBuffer: GPUBuffer;\r\n    maxGpuBufferSize: number = 0x10000;\r\n    clipEpsilon = 1e-5;\r\n    add(...o: (WireFrameObject | WireFrameOccluder)[]) {\r\n        for (const obj of o) {\r\n            if ((obj as WireFrameObject).lines) {\r\n                this.objects.push(obj as WireFrameObject);\r\n            }\r\n            if ((obj as WireFrameOccluder).cells) {\r\n                this.occluders.push(obj as WireFrameOccluder);\r\n            }\r\n        }\r\n    }\r\n    private occludeFrustum(renderState: RenderState) {\r\n        const frustumRange = renderState.getFrustumRange(this.camera, true);\r\n        for (const obj of this.objects) {\r\n            if (obj.visible === false) continue;\r\n            let relP = _vec4.copy(this.camera.position).subs(obj.position);\r\n            let visible = true;\r\n            let clipFaces: Plane[] = [];\r\n            let borderIdx = 0;\r\n            for (let f of frustumRange) {\r\n                const p = new Plane(f.clone().rotatesconj(obj.rotation), f.dot(relP));\r\n                const pos = obj.obb.testPlane(p);\r\n                if (pos === 1) {\r\n                    visible = false; break;\r\n                }\r\n                if (pos === 0) {\r\n                    clipFaces.push(p);\r\n                }\r\n                borderIdx++;\r\n            }\r\n            obj._jsBuffer = visible ? obj.lines.map(([pa, pb]) => [pa.clone(), pb.clone()]) : [];\r\n            if (!visible) continue;\r\n            clipFaces.map(p => {\r\n                for (const [pa, pb] of obj._jsBuffer) {\r\n                    const la = pa.dot(p.normal) - p.offset;\r\n                    const lb = pb.dot(p.normal) - p.offset;\r\n                    if (la > 0 !== lb > 0) {\r\n                        const l = lb / (lb - la);\r\n                        const p = _vec4.copy(pa).subs(pb).mulfs(l).adds(pb);\r\n                        if (la > 0) {\r\n                            pa.copy(p);\r\n                        } else {\r\n                            pb.copy(p);\r\n                        }\r\n                    } else if (la > 0 && lb > 0) {\r\n                        pa.set(NaN);\r\n                        pb.set(NaN);\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n    private calcViewBoundary(c1: Plane, c2: Plane): Vec4;\r\n    private calcViewBoundary(c1: Plane, c2: Plane, origin: Vec4): Plane;\r\n    private calcViewBoundary(c1: Plane, c2: Plane, origin?: Vec4) {\r\n        if (origin) {\r\n            const k1 = c1.normal.dot(origin) - c1.offset;\r\n            const k2 = c2.normal.dot(origin) - c2.offset;\r\n            const l = k1 / (k1 - k2);\r\n            const n = c1.normal.mulf(1 - l).addmulfs(c2.normal, l);\r\n            return new Plane(n, (1 - l) * c1.offset + l * c2.offset);\r\n        } else {\r\n            const l = c1.offset / (c1.offset - c2.offset);\r\n            const n = _vec4.copy(c1.normal).mulfs(1 - l).addmulfs(c2.normal, l);\r\n            return n;\r\n        }\r\n    }\r\n    private occludeOccluders() {\r\n        for (const ocd of this.occluders) {\r\n            if (ocd.transparent) continue;\r\n            // todo: obb frustum test, if not visible, skip all\r\n            const relP = _vec4.subset(this.camera.position, ocd.position).rotatesconj(ocd.rotation);\r\n            const faceDir = ocd.cells.map(p => p.normal.dot(relP) - p.offset > -this.clipEpsilon);\r\n            const inside = !faceDir.includes(true);\r\n            let worldBorders: Plane[];\r\n            if (inside) {\r\n                worldBorders = ocd.cells.map(p => p.clone().applyObj4(ocd));\r\n            } else {\r\n                const border = ocd.subCells.filter(([a, b]) => faceDir[a] !== faceDir[b]).map(\r\n                    ([a, b]) => faceDir[a] ? this.calcViewBoundary(ocd.cells[a], ocd.cells[b], relP) : this.calcViewBoundary(ocd.cells[b], ocd.cells[a], relP)\r\n                );\r\n                worldBorders = border.map(p => p.applyObj4(ocd));\r\n                for (let i = 0; i < faceDir.length; i++) {\r\n                    if (faceDir[i]) {\r\n                        worldBorders.push(ocd.cells[i].clone().applyObj4(ocd));\r\n                    }\r\n                }\r\n            }\r\n            ocd._inside = inside; ocd._worldBorders = worldBorders;\r\n        }\r\n        for (const obj of this.objects) {\r\n            if (obj.visible === false) continue;\r\n            for (let i = 0; i < obj._jsBuffer.length; i++) {\r\n                let [pa, pb] = obj._jsBuffer[i];\r\n                if (!isNaN(pa.x)) {\r\n                    obj._jsBuffer[i][0].copy(pa.applyObj4(obj));\r\n                    obj._jsBuffer[i][1].copy(pb.applyObj4(obj));\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const ocd of this.occluders) {\r\n            if (ocd.transparent) continue;\r\n            for (const obj of this.objects) {\r\n                if (obj.visible === false) continue;\r\n                const nBuffer: [Vec4, Vec4][] = [];\r\n                for (const [pa, pb] of obj._jsBuffer) {\r\n                    // write new fn here, attention jsbuffer size\r\n                    if (isNaN(pa.x)) continue;\r\n                    this.clipLine(ocd._inside, pa, pb, ocd._worldBorders, nBuffer);\r\n                }\r\n                obj._jsBuffer.push(...nBuffer);\r\n            }\r\n        }\r\n    }\r\n    // refeerence: Blockv6 Clip.java\r\n    private clipLine(isInside: boolean, pa: Vec4, pb: Vec4, borders: Plane[], nBuffer: [Vec4, Vec4][]) {\r\n\r\n        if (isInside) {\r\n            // pa=cliparea=ra----rb=cliparea==pb\r\n            let ra = 0, rb = 1;\r\n            for (const p of borders) {\r\n                const la = pa.dot(p.normal) - p.offset - this.clipEpsilon;\r\n                const lb = pb.dot(p.normal) - p.offset - this.clipEpsilon;\r\n                if (lb > 0) {\r\n                    if (la > 0) {\r\n                        pa.set(NaN); pb.set(NaN); return;\r\n                    }\r\n                    const l = lb / (lb - la);\r\n                    if (l > ra) ra = l;\r\n                } else if (la > 0) {\r\n                    const l = lb / (lb - la);\r\n                    if (l < rb) rb = l;\r\n                }\r\n                if (ra >= rb) {\r\n                    pa.set(NaN); pb.set(NaN); return;\r\n                }\r\n            }\r\n        } else {\r\n            // pa====ra--cliparea--rb====pb\r\n            let ra = 0, rb = 1;\r\n            for (const p of borders) {\r\n                const la = pa.dot(p.normal) - p.offset + this.clipEpsilon;\r\n                const lb = pb.dot(p.normal) - p.offset + this.clipEpsilon;\r\n                if (la > 0) {\r\n                    if (lb > 0) return;\r\n                    const l = la / (la - lb);\r\n                    if (l > ra) ra = l;\r\n                } else if (lb > 0) {\r\n                    const l = la / (la - lb);\r\n                    if (l < rb) rb = l;\r\n                }\r\n                if (ra >= rb) return;\r\n            }\r\n            if (ra === 0) {\r\n                if (rb === 1) {\r\n                    pa.set(NaN); pb.set(NaN);\r\n                } else {\r\n                    pa.copy(_vec4.copy(pb).subs(pa).mulfs(rb).adds(pa));\r\n                }\r\n            } else if (rb === 1) {\r\n                pb.copy(_vec4.copy(pb).subs(pa).mulfs(ra).adds(pa));\r\n            } else {\r\n                nBuffer.push([pb.clone(), pb.sub(pa).mulfs(rb).adds(pa)]);\r\n                pb.subs(pa).mulfs(ra).adds(pa);\r\n            }\r\n        }\r\n    }\r\n    render(rs: IWireframeRenderState, objs?: WireFrameObject[]) {\r\n        const renderState = (rs as WireFrameRenderPass).renderState;\r\n        const gpu = (rs as WireFrameRenderPass).gpu;\r\n\r\n        this.jsBuffer ??= new Float32Array(this.maxGpuBufferSize);\r\n        this.gpuBuffer ??= gpu.createBuffer(GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST, this.maxGpuBufferSize);\r\n        let offset = 0;\r\n        const fovCoeff = -renderState.sliceBuffers.camProjJsBuffer[1];\r\n        const _r = new Obj4;\r\n        // copy data to temp jsbuffer and do retina frustum clip, all data are under object's coord\r\n        this.occludeFrustum(renderState);\r\n        // when do occlusion, all data are converted in world coord\r\n        this.occludeOccluders();\r\n        // when draw, only need to convert to camera's coord\r\n        for (const obj of objs ?? this.objects) {\r\n            if (obj.visible === false) continue;\r\n            // _r.rotation.copy(obj.rotation).mulslconj(this.camera.rotation);\r\n            // _r.position.copy(obj.position).subs(this.camera.position).rotatesconj(this.camera.rotation);\r\n            _r.rotation.copy(this.camera.rotation).conjs();\r\n            _r.position.copy(this.camera.position).negs().rotatesconj(this.camera.rotation);\r\n            //ax+b-B=Ay\r\n            for (const [pa, pb] of obj._jsBuffer) {\r\n                if (isNaN(pa.x)) continue;\r\n                _vec4.copy(pa).applyObj4(_r);\r\n                _vec4.mulfs(fovCoeff / _vec4.w);\r\n                _vec4.writeBuffer(this.jsBuffer, offset);\r\n\r\n                _vec4.copy(pb).applyObj4(_r);\r\n                _vec4.mulfs(fovCoeff / _vec4.w);\r\n                _vec4.writeBuffer(this.jsBuffer, offset + 4);\r\n                offset += 8;\r\n            }\r\n        }\r\n        gpu.device.queue.writeBuffer(this.gpuBuffer, 0, this.jsBuffer, 0, offset);\r\n        rs.render(this.gpuBuffer, offset >> 2);\r\n    }\r\n}\r\n\r\nexport interface WireFrameOccluder extends Obj4 {\r\n    obb?: AABB;\r\n    cells: Plane[];\r\n    /** if transparent is true, this occluder will be disabled */\r\n    transparent?: boolean;\r\n    // one subcell contains two cell idx numbers, which is used for generating view bondaries\r\n    subCells: [number, number][];\r\n    _inside?: boolean;\r\n    _worldBorders?: Plane[];\r\n}"],"names":[],"mappings":"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"}