{"version":3,"file":"renderer.js","sources":["../../../src/four/renderer.ts"],"sourcesContent":["import { SliceRenderer, TetraSlicePipeline } from \"../render/slice/slice.js\";\r\nimport { GPU } from \"../render/gpu.js\";\r\nimport { AmbientLight, DirectionalLight, PointLight, SpotLight, _initLightShader, _updateWorldLight } from \"./light.js\";\r\nimport { Camera, Mesh, Object, Scene } from \"./scene.js\";\r\nimport { Material } from \"./material.js\";\r\nimport { Vec3 } from \"../math/algebra/vec3.js\";\r\nexport interface RendererConfig {\r\n    posdirLightsNumber?: number;\r\n    spotLightsNumber?: number;\r\n}\r\n/** threejs like 4D lib */\r\nexport class Renderer {\r\n    core: SliceRenderer;\r\n    gpu: GPU;\r\n    canvas: HTMLCanvasElement;\r\n    pipelines: { [label: string]: TetraSlicePipeline | \"compiling\" } = {};\r\n    jsBuffer = new Float32Array(1024);\r\n    uCamMatBuffer: GPUBuffer; // contain inv and uninv affineMat\r\n    uWorldLightBuffer: GPUBuffer;\r\n    lightShaderInfomation = _initLightShader();\r\n    autoSetSizeHandler: () => void;\r\n    private cameraInScene: boolean;\r\n    private safeTetraNumInOnePass: number;\r\n    private tetraNumOccupancyRatio: number = 0.08;\r\n    private maxTetraNumInOnePass: number;\r\n    private context: GPUCanvasContext;\r\n    constructor(canvas: HTMLCanvasElement, config?: RendererConfig) {\r\n        this.canvas = canvas;\r\n        this.lightShaderInfomation = _initLightShader(config);\r\n    }\r\n    setBackgroudColor(color: GPUColor) {\r\n        this.core.setDisplayConfig({ screenBackgroundColor: color });\r\n    }\r\n    async init() {\r\n        this.gpu = await new GPU().init();\r\n        if (!this.gpu) {\r\n            throw \"No availiable GPU device found. Please check whether WebGPU is enabled on your browser.\";\r\n            return null;\r\n        }\r\n        this.context = this.gpu.getContext(this.canvas);\r\n        this.core = new SliceRenderer(this.gpu);\r\n        this.uCamMatBuffer = this.gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, (4 * 5 * 2) * 4, \"uCamMat\");\r\n        this.uWorldLightBuffer = this.gpu.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, this.lightShaderInfomation.uWorldLightBufferSize, \"uWorldLight\");\r\n        this.core.setDisplayConfig({ canvasSize: { width: this.canvas.width * devicePixelRatio, height: this.canvas.height * devicePixelRatio } });\r\n        this.safeTetraNumInOnePass = this.core.getSafeTetraNumInOnePass();\r\n\r\n        await this.core.init();\r\n        return this;\r\n    }\r\n    // todo: add computePipeLinePool\r\n    fetchPipelineName(identifier: string): string {\r\n        return identifier;\r\n    }\r\n    fetchPipeline(identifier: string): TetraSlicePipeline | \"compiling\" {\r\n        return this.pipelines[this.fetchPipelineName(identifier)];\r\n    }\r\n    pullPipeline(identifier: string, pipeline: TetraSlicePipeline | \"compiling\") {\r\n        if (this.pipelines[identifier] && this.pipelines[identifier] !== \"compiling\")\r\n            throw \"FOUR Renderer: Repetitive material pipeline creation occured.\";\r\n        this.pipelines[identifier] = pipeline;\r\n    }\r\n    updateObject(o: Object) {\r\n        for (let c of o.child) {\r\n            if (c.alwaysUpdateCoord) {\r\n                c.needsUpdateCoord = true;\r\n            }\r\n            if (c.needsUpdateCoord || o.needsUpdateCoord) {\r\n                c.worldCoord.setFromObj4(c).mulsl(o.worldCoord);\r\n\r\n                c.needsUpdateCoord = true;\r\n            }\r\n            if (c.visible) {\r\n                this.updateObject(c);\r\n                c.needsUpdateCoord = false;\r\n            }\r\n        }\r\n        if (o instanceof Mesh) {\r\n            this.updateMesh(o);\r\n        } else if (o instanceof AmbientLight && o.visible) {\r\n            this.ambientLightDensity.adds(o.density);\r\n        } else if (o instanceof PointLight && o.visible) {\r\n            this.pointLights.push(o);\r\n        } else if (o instanceof SpotLight && o.visible) {\r\n            if (o.needsUpdateCoord) {\r\n                o.worldDirection.mulmatvset(o.worldCoord.mat, o.direction);\r\n            }\r\n            this.spotLights.push(o);\r\n        } else if (o instanceof DirectionalLight && o.visible) {\r\n            if (o.needsUpdateCoord) {\r\n                o.worldDirection.mulmatvset(o.worldCoord.mat, o.direction);\r\n            }\r\n            this.directionalLights.push(o);\r\n        } else if (o.needsUpdateCoord && o === this.activeCamera) {\r\n            this.cameraInScene = true;\r\n            o.worldCoord.inv().writeBuffer(this.jsBuffer);\r\n            o.worldCoord.writeBuffer(this.jsBuffer, 20);\r\n            this.gpu.device.queue.writeBuffer(this.uCamMatBuffer, 0, this.jsBuffer, 0, 40);\r\n        }\r\n    }\r\n    // this may fail to add to drawlist if pipeline creation is not finished yet\r\n    addToDrawList(m: Mesh) {\r\n        let pipeline = this.fetchPipeline(m.material.identifier);\r\n        // attention: this is an async function, rendering will be in the future tick\r\n        if (!pipeline) { m.material.bindGroup = null; m.bindGroup = null; m.material.compile(this); return; }\r\n        if (pipeline === \"compiling\") return;\r\n        // if this material can use other's pipeline, it hasn't compiled but also need some initiations\r\n        if (!m.material.compiled) { m.material.init(this); }\r\n        let groupName = m.material.uuid;\r\n        let group = m.material.declUniformLocation ? 1 : 0;\r\n        if (!this.drawList[groupName]) {\r\n            let bindGroup = this.core.createFragmentShaderBindGroup(pipeline, group, [this.uWorldLightBuffer], \"WorldLightGroup\");\r\n            this.drawList[groupName] = {\r\n                pipeline: pipeline, meshes: [],\r\n                bindGroup: { group, binding: bindGroup }, tetraCount: 0\r\n            };\r\n        }\r\n        let list = this.drawList[groupName];\r\n        // while (list.next) {\r\n        //     list = this.drawList[list.next]; //go to the end of chain table\r\n        // }\r\n        // list.tetraCount += m.geometry.jsBuffer.tetraCount;\r\n        list.meshes.push(m);\r\n        // if (list.tetraCount > this.maxTetraNumInOnePass) {\r\n        //     // append a new node to chain, wait for accept new objects next time\r\n        //     groupName = list.next = math.generateUUID();\r\n        //     this.drawList[groupName] = {\r\n        //         pipeline: pipeline, meshes: [],\r\n        //         bindGroup: list.bindGroup, tetraCount: 0\r\n        //     };\r\n        // }\r\n        if (!m.bindGroup) {\r\n            let buffers = [\r\n                ...m.material.fetchBuffer(m.geometry),\r\n                m.uObjMatBuffer,\r\n                this.uCamMatBuffer\r\n            ];\r\n            m.bindGroup = this.core.createVertexShaderBindGroup(pipeline, 1, buffers, m.material.identifier);\r\n        }\r\n        if (!m.material.bindGroup) {\r\n            m.material.createBindGroup(this, pipeline);\r\n        }\r\n        m.material.update(this);\r\n    }\r\n\r\n    async compileMaterials(mats: Iterable<Material> | Scene) {\r\n        let promises = [];\r\n        if (mats instanceof Scene) {\r\n            addMaterialInObject(this, promises, mats.child);\r\n        } else {\r\n            for (let m of mats) {\r\n                promises.push(m.compile(this));\r\n            }\r\n        }\r\n        await Promise.all(promises);\r\n        function addMaterialInObject(self: Renderer, promises: Promise<void>[], child: Object[]) {\r\n            for (let m of child) {\r\n                if (m instanceof Mesh) {\r\n                    let pipeline = self.fetchPipeline(m.material.identifier);\r\n                    if (!pipeline) {\r\n                        m.material.bindGroup = null; m.bindGroup = null;\r\n                        promises.push(m.material.compile(self));\r\n                    }\r\n                    if (!m.material.compiled) { m.material.init(self); }\r\n                }\r\n                addMaterialInObject(self, promises, m.child);\r\n            }\r\n        }\r\n    }\r\n    updateMesh(m: Mesh) {\r\n        if (m.needsUpdateCoord) {\r\n            m.worldCoord.writeBuffer(this.jsBuffer, 0);\r\n            m.worldCoord.mat.inv().ts().writeBuffer(this.jsBuffer, 20);\r\n            if (!m.uObjMatBuffer) {\r\n                m.uObjMatBuffer = this.gpu.createBuffer(\r\n                    GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, (20 + 16) * 4, \"uObjMatBuffer\"\r\n                );\r\n            }\r\n            this.gpu.device.queue.writeBuffer(m.uObjMatBuffer, 0, this.jsBuffer, 0, 20 + 16);\r\n        }\r\n        if (m.geometry.needsUpdate) {\r\n            let g = m.geometry;\r\n            g.needsUpdate = false;\r\n            g.updateOBB();\r\n            if (!g.gpuBuffer) {\r\n                g.gpuBuffer = {};\r\n                let dyn = g.dynamic ? GPUBufferUsage.COPY_DST : 0;\r\n                for (let [label, value] of globalThis.Object.entries(g.jsBuffer)) {\r\n                    if (value instanceof Float32Array) {\r\n                        g.gpuBuffer[label] = this.gpu.createBuffer(\r\n                            GPUBufferUsage.STORAGE | dyn, value, \"AttributeBuffer.\" + label\r\n                        );\r\n                    }\r\n                }\r\n            } else if (g.dynamic) {\r\n                for (let [label, buffer] of globalThis.Object.entries(g.gpuBuffer)) {\r\n                    this.gpu.device.queue.writeBuffer(buffer, 0, g.jsBuffer[label]);\r\n                }\r\n            }\r\n        }\r\n        if (m.visible) this.addToDrawList(m);\r\n    }\r\n    updateScene(scene: Scene) {\r\n        this.core.setDisplayConfig({ retinaClearColor: scene.backGroundColor });\r\n        this.cameraInScene = false;\r\n        this.maxTetraNumInOnePass = this.safeTetraNumInOnePass / this.tetraNumOccupancyRatio;\r\n        for (let c of scene.child) {\r\n            if (c.alwaysUpdateCoord) {\r\n                c.needsUpdateCoord = true;\r\n            }\r\n            if (c.visible) {\r\n                if (c.needsUpdateCoord) {\r\n                    c.worldCoord.setFromObj4(c);\r\n                }\r\n                this.updateObject(c);\r\n                c.needsUpdateCoord = false;\r\n            }\r\n        }\r\n        if (this.cameraInScene === false) console.error(\"Target camera is not in the scene. Forget to add it?\");\r\n        _updateWorldLight(this);\r\n        this.updateSkyBox(scene);\r\n    }\r\n    updateSkyBox(scene: Scene) {\r\n        const skyBox = scene.skyBox;\r\n        if (!skyBox) return;\r\n        if (!skyBox.compiled) {\r\n            if (!skyBox.compiling) {\r\n                skyBox.compile(this);\r\n            }\r\n            return;\r\n        }\r\n        if (!skyBox.bindGroups) {\r\n            skyBox.getBindgroups(this);\r\n        }\r\n        skyBox.update(this);\r\n    }\r\n    ambientLightDensity = new Vec3;\r\n    directionalLights: DirectionalLight[];\r\n    spotLights: SpotLight[];\r\n    pointLights: PointLight[];\r\n\r\n    drawList: DrawList;\r\n    activeCamera: Camera;\r\n    setCamera(camera: Camera) {\r\n        if (camera.needsUpdate) {\r\n            this.core.setDisplayConfig({ camera4D: camera });\r\n            camera.needsUpdate = false;\r\n        }\r\n        this.activeCamera = camera;\r\n    }\r\n    render(scene: Scene, camera: Camera) {\r\n        this.clearState();\r\n        this.setCamera(camera);\r\n        scene.wireframe?.camera?.copyObj4(camera);\r\n        this.updateScene(scene);\r\n        this.core.render(this.context, (renderState) => {\r\n            for (let { pipeline, meshes, bindGroup } of globalThis.Object.values(this.drawList)) {\r\n                if (!meshes.length) continue; // skip empty (may caused by safe tetranum check)\r\n                let tetraState = false;\r\n                let tetraCount = 0;\r\n                let binding = [\r\n                    ...meshes[0].material.bindGroup.map((bg, binding) => ({ group: binding, binding: bg })),\r\n                    bindGroup\r\n                ];\r\n                for (let mesh of meshes) {\r\n                    if (!renderState.testWithFrustumData(mesh.geometry.obb, this.activeCamera.worldCoord, mesh.worldCoord)) continue;\r\n                    if (tetraState === false) {\r\n                        renderState.beginTetras(pipeline);\r\n                        tetraCount = 0;\r\n                        tetraState = true;\r\n                    }\r\n                    renderState.sliceTetras(mesh.bindGroup, mesh.geometry.jsBuffer.count);\r\n                    tetraCount += mesh.geometry.jsBuffer.count;\r\n                    if (tetraCount > this.maxTetraNumInOnePass) {\r\n                        renderState.drawTetras(binding);\r\n                        tetraState = false;\r\n                        tetraCount = 0;\r\n                    }\r\n                }\r\n                if (tetraState === true) {\r\n                    renderState.drawTetras(binding);\r\n                }\r\n            }\r\n            if (scene.skyBox?.bindGroups) {\r\n                renderState.drawRaytracing(scene.skyBox.pipeline, scene.skyBox.bindGroups);\r\n            }\r\n        }, scene.wireframe ? rs => scene.wireframe.render(rs) : undefined);\r\n    }\r\n    setSize(size: GPUExtent3DStrict) {\r\n        if ((size as GPUExtent3DDict).height) {\r\n            this.canvas.width = (size as GPUExtent3DDict).width;\r\n            this.canvas.height = (size as GPUExtent3DDict).height;\r\n        } else {\r\n            this.canvas.width = size[0];\r\n            this.canvas.height = size[1];\r\n        }\r\n        this.core.setDisplayConfig({ canvasSize: size });\r\n    }\r\n    private clearState() {\r\n        this.ambientLightDensity.set();\r\n        this.directionalLights = [];\r\n        this.spotLights = [];\r\n        this.pointLights = [];\r\n        this.drawList = {};\r\n    }\r\n}\r\ninterface DrawList {\r\n    [group: string]: {\r\n        pipeline: TetraSlicePipeline,\r\n        meshes: Mesh[],\r\n        bindGroup: { group: number, binding: GPUBindGroup },\r\n        tetraCount: number\r\n        next?: string // if too many objs in drawlist, split into a list table\r\n    }\r\n}"],"names":[],"mappings":";;;;;;;AAUA;MACa,QAAQ,CAAA;AACjB,IAAA,IAAI;AACJ,IAAA,GAAG;AACH,IAAA,MAAM;IACN,SAAS,GAA0D,EAAE;AACrE,IAAA,QAAQ,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC;IACjC,aAAa,CAAY;AACzB,IAAA,iBAAiB;IACjB,qBAAqB,GAAG,gBAAgB,EAAE;AAC1C,IAAA,kBAAkB;AACV,IAAA,aAAa;AACb,IAAA,qBAAqB;IACrB,sBAAsB,GAAW,IAAI;AACrC,IAAA,oBAAoB;AACpB,IAAA,OAAO;IACf,WAAA,CAAY,MAAyB,EAAE,MAAuB,EAAA;AAC1D,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;AACpB,QAAA,IAAI,CAAC,qBAAqB,GAAG,gBAAgB,CAAC,MAAM,CAAC;IACzD;AACA,IAAA,iBAAiB,CAAC,KAAe,EAAA;QAC7B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC;IAChE;AACA,IAAA,MAAM,IAAI,GAAA;QACN,IAAI,CAAC,GAAG,GAAG,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE;AACjC,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;AACX,YAAA,MAAM,yFAAyF;QAEnG;AACA,QAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;QAC/C,IAAI,CAAC,IAAI,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;AACvC,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC;QACxH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,EAAE,aAAa,CAAC;AACjK,QAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,gBAAgB,EAAE,EAAE,CAAC;QAC1I,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;AAEjE,QAAA,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACtB,QAAA,OAAO,IAAI;IACf;;AAEA,IAAA,iBAAiB,CAAC,UAAkB,EAAA;AAChC,QAAA,OAAO,UAAU;IACrB;AACA,IAAA,aAAa,CAAC,UAAkB,EAAA;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAC7D;IACA,YAAY,CAAC,UAAkB,EAAE,QAA0C,EAAA;AACvE,QAAA,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,WAAW;AACxE,YAAA,MAAM,+DAA+D;AACzE,QAAA,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,QAAQ;IACzC;AACA,IAAA,YAAY,CAAC,CAAS,EAAA;AAClB,QAAA,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE;AACnB,YAAA,IAAI,CAAC,CAAC,iBAAiB,EAAE;AACrB,gBAAA,CAAC,CAAC,gBAAgB,GAAG,IAAI;YAC7B;YACA,IAAI,CAAC,CAAC,gBAAgB,IAAI,CAAC,CAAC,gBAAgB,EAAE;AAC1C,gBAAA,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC;AAE/C,gBAAA,CAAC,CAAC,gBAAgB,GAAG,IAAI;YAC7B;AACA,YAAA,IAAI,CAAC,CAAC,OAAO,EAAE;AACX,gBAAA,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;AACpB,gBAAA,CAAC,CAAC,gBAAgB,GAAG,KAAK;YAC9B;QACJ;AACA,QAAA,IAAI,CAAC,YAAY,IAAI,EAAE;AACnB,YAAA,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACtB;aAAO,IAAI,CAAC,YAAY,YAAY,IAAI,CAAC,CAAC,OAAO,EAAE;YAC/C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC;QAC5C;aAAO,IAAI,CAAC,YAAY,UAAU,IAAI,CAAC,CAAC,OAAO,EAAE;AAC7C,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5B;aAAO,IAAI,CAAC,YAAY,SAAS,IAAI,CAAC,CAAC,OAAO,EAAE;AAC5C,YAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACpB,gBAAA,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS,CAAC;YAC9D;AACA,YAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3B;aAAO,IAAI,CAAC,YAAY,gBAAgB,IAAI,CAAC,CAAC,OAAO,EAAE;AACnD,YAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACpB,gBAAA,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS,CAAC;YAC9D;AACA,YAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAClC;aAAO,IAAI,CAAC,CAAC,gBAAgB,IAAI,CAAC,KAAK,IAAI,CAAC,YAAY,EAAE;AACtD,YAAA,IAAI,CAAC,aAAa,GAAG,IAAI;AACzB,YAAA,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC7C,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;QAClF;IACJ;;AAEA,IAAA,aAAa,CAAC,CAAO,EAAA;AACjB,QAAA,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;;QAExD,IAAI,CAAC,QAAQ,EAAE;AAAE,YAAA,CAAC,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI;AAAE,YAAA,CAAC,CAAC,SAAS,GAAG,IAAI;AAAE,YAAA,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;YAAE;QAAQ;QACpG,IAAI,QAAQ,KAAK,WAAW;YAAE;;AAE9B,QAAA,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE;AAAE,YAAA,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAAE;AACnD,QAAA,IAAI,SAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI;AAC/B,QAAA,IAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,mBAAmB,GAAG,CAAC,GAAG,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC3B,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,iBAAiB,CAAC;AACrH,YAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG;AACvB,gBAAA,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE;gBAC9B,SAAS,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE;aACzD;QACL;QACA,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;;;;;AAKnC,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;;;AASnB,QAAA,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE;AACd,YAAA,IAAI,OAAO,GAAG;gBACV,GAAG,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;AACrC,gBAAA,CAAC,CAAC,aAAa;AACf,gBAAA,IAAI,CAAC;aACR;YACD,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;QACpG;AACA,QAAA,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE;YACvB,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC;QAC9C;AACA,QAAA,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;IAC3B;IAEA,MAAM,gBAAgB,CAAC,IAAgC,EAAA;QACnD,IAAI,QAAQ,GAAG,EAAE;AACjB,QAAA,IAAI,IAAI,YAAY,KAAK,EAAE;YACvB,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC;QACnD;aAAO;AACH,YAAA,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;gBAChB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAClC;QACJ;AACA,QAAA,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;AAC3B,QAAA,SAAS,mBAAmB,CAAC,IAAc,EAAE,QAAyB,EAAE,KAAe,EAAA;AACnF,YAAA,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;AACjB,gBAAA,IAAI,CAAC,YAAY,IAAI,EAAE;AACnB,oBAAA,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;oBACxD,IAAI,CAAC,QAAQ,EAAE;AACX,wBAAA,CAAC,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI;AAAE,wBAAA,CAAC,CAAC,SAAS,GAAG,IAAI;AAC/C,wBAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC3C;AACA,oBAAA,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE;AAAE,wBAAA,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;oBAAE;gBACvD;gBACA,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC;YAChD;QACJ;IACJ;AACA,IAAA,UAAU,CAAC,CAAO,EAAA;AACd,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;YACpB,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1C,YAAA,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;AAC1D,YAAA,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE;gBAClB,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CACnC,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,eAAe,CACnF;YACL;YACA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC;QACpF;AACA,QAAA,IAAI,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE;AACxB,YAAA,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ;AAClB,YAAA,CAAC,CAAC,WAAW,GAAG,KAAK;YACrB,CAAC,CAAC,SAAS,EAAE;AACb,YAAA,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE;AACd,gBAAA,CAAC,CAAC,SAAS,GAAG,EAAE;AAChB,gBAAA,IAAI,GAAG,GAAG,CAAC,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ,GAAG,CAAC;AACjD,gBAAA,KAAK,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;AAC9D,oBAAA,IAAI,KAAK,YAAY,YAAY,EAAE;wBAC/B,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CACtC,cAAc,CAAC,OAAO,GAAG,GAAG,EAAE,KAAK,EAAE,kBAAkB,GAAG,KAAK,CAClE;oBACL;gBACJ;YACJ;AAAO,iBAAA,IAAI,CAAC,CAAC,OAAO,EAAE;AAClB,gBAAA,KAAK,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE;oBAChE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACnE;YACJ;QACJ;QACA,IAAI,CAAC,CAAC,OAAO;AAAE,YAAA,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IACxC;AACA,IAAA,WAAW,CAAC,KAAY,EAAA;AACpB,QAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,gBAAgB,EAAE,KAAK,CAAC,eAAe,EAAE,CAAC;AACvE,QAAA,IAAI,CAAC,aAAa,GAAG,KAAK;QAC1B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,sBAAsB;AACpF,QAAA,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE;AACvB,YAAA,IAAI,CAAC,CAAC,iBAAiB,EAAE;AACrB,gBAAA,CAAC,CAAC,gBAAgB,GAAG,IAAI;YAC7B;AACA,YAAA,IAAI,CAAC,CAAC,OAAO,EAAE;AACX,gBAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACpB,oBAAA,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC/B;AACA,gBAAA,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;AACpB,gBAAA,CAAC,CAAC,gBAAgB,GAAG,KAAK;YAC9B;QACJ;AACA,QAAA,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK;AAAE,YAAA,OAAO,CAAC,KAAK,CAAC,sDAAsD,CAAC;QACvG,iBAAiB,CAAC,IAAI,CAAC;AACvB,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAC5B;AACA,IAAA,YAAY,CAAC,KAAY,EAAA;AACrB,QAAA,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM;AAC3B,QAAA,IAAI,CAAC,MAAM;YAAE;AACb,QAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;AAClB,YAAA,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;AACnB,gBAAA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YACxB;YACA;QACJ;AACA,QAAA,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;AACpB,YAAA,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;QAC9B;AACA,QAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IACvB;IACA,mBAAmB,GAAG,IAAI,IAAI;AAC9B,IAAA,iBAAiB;AACjB,IAAA,UAAU;AACV,IAAA,WAAW;AAEX,IAAA,QAAQ;AACR,IAAA,YAAY;AACZ,IAAA,SAAS,CAAC,MAAc,EAAA;AACpB,QAAA,IAAI,MAAM,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AAChD,YAAA,MAAM,CAAC,WAAW,GAAG,KAAK;QAC9B;AACA,QAAA,IAAI,CAAC,YAAY,GAAG,MAAM;IAC9B;IACA,MAAM,CAAC,KAAY,EAAE,MAAc,EAAA;QAC/B,IAAI,CAAC,UAAU,EAAE;AACjB,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QACtB,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;AACzC,QAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;AACvB,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,WAAW,KAAI;YAC3C,KAAK,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACjF,IAAI,CAAC,MAAM,CAAC,MAAM;AAAE,oBAAA,SAAS;gBAC7B,IAAI,UAAU,GAAG,KAAK;gBACtB,IAAI,UAAU,GAAG,CAAC;AAClB,gBAAA,IAAI,OAAO,GAAG;AACV,oBAAA,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,OAAO,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;oBACvF;iBACH;AACD,gBAAA,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;oBACrB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;wBAAE;AACxG,oBAAA,IAAI,UAAU,KAAK,KAAK,EAAE;AACtB,wBAAA,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,CAAC;wBACd,UAAU,GAAG,IAAI;oBACrB;AACA,oBAAA,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;oBACrE,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;AAC1C,oBAAA,IAAI,UAAU,GAAG,IAAI,CAAC,oBAAoB,EAAE;AACxC,wBAAA,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC;wBAC/B,UAAU,GAAG,KAAK;wBAClB,UAAU,GAAG,CAAC;oBAClB;gBACJ;AACA,gBAAA,IAAI,UAAU,KAAK,IAAI,EAAE;AACrB,oBAAA,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC;gBACnC;YACJ;AACA,YAAA,IAAI,KAAK,CAAC,MAAM,EAAE,UAAU,EAAE;AAC1B,gBAAA,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC;YAC9E;QACJ,CAAC,EAAE,KAAK,CAAC,SAAS,GAAG,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;IACtE;AACA,IAAA,OAAO,CAAC,IAAuB,EAAA;AAC3B,QAAA,IAAK,IAAwB,CAAC,MAAM,EAAE;YAClC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAI,IAAwB,CAAC,KAAK;YACnD,IAAI,CAAC,MAAM,CAAC,MAAM,GAAI,IAAwB,CAAC,MAAM;QACzD;aAAO;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;QAChC;QACA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IACpD;IACQ,UAAU,GAAA;AACd,QAAA,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE;AAC9B,QAAA,IAAI,CAAC,iBAAiB,GAAG,EAAE;AAC3B,QAAA,IAAI,CAAC,UAAU,GAAG,EAAE;AACpB,QAAA,IAAI,CAAC,WAAW,GAAG,EAAE;AACrB,QAAA,IAAI,CAAC,QAAQ,GAAG,EAAE;IACtB;AACH;;;;"}