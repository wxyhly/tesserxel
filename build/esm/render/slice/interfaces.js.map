{"version":3,"file":"interfaces.js","sources":["../../../../src/render/slice/interfaces.ts"],"sourcesContent":["import { AffineMat4, Obj4 } from \"../../math/algebra/affine.js\";\r\nimport { Vec4 } from \"../../math/algebra/vec4.js\";\r\nimport { AABB } from \"../../math/geometry/primitive.js\";\r\nimport { Mat4, OrthographicCamera, PerspectiveCamera } from \"../../math/math.js\";\r\nimport { RaytracingPipeline, TetraSlicePipeline } from \"./pipeline.js\";\r\n\r\n/** Base Configs for SliceRenderer, This can't be changed after renderer creation */\r\nexport interface SliceRendererConfig {\r\n    /** Must be power of 2, this includes retina slices and cross sections */\r\n    maxSlicesNumber?: number;\r\n    /** Must be power of 2, large number can waste lots GPU memory;\r\n     *  Used to preallocate gpu memory for intermediate data of cross section\r\n     */\r\n    maxCrossSectionBufferSize?: number;\r\n    /** Size for one parallel unit to calculate retina slices and cross sections\r\n     */\r\n    sliceGroupSize?: number;\r\n    /** Enable this to improve retina render quality, but this may cause performance issue */\r\n    enableFloat16Blend?: boolean;\r\n    /** Use this default value when workgroup size is not specified within a tetraslice pipeline */\r\n    defaultWorkGroupSize?: number;\r\n\r\n}\r\n\r\n/** An enum for stereo's eye option */\r\nexport enum EyeStereo {\r\n    LeftEye,\r\n    None,\r\n    RightEye,\r\n}\r\nexport enum RetinaSliceFacing {\r\n    POSZ,\r\n    NEGZ,\r\n    POSY,\r\n    NEGY,\r\n    POSX,\r\n    NEGX,\r\n}\r\n/** Config for displaying one cross section */\r\nexport interface SectionConfig {\r\n    /** Cross section's offset from origin, default is 0 */\r\n    slicePos?: number;\r\n    /** Cross section's direction */\r\n    facing: RetinaSliceFacing;\r\n    /** Wether this cross section enables stereo eye offset, default is None */\r\n    eyeStereo?: EyeStereo;\r\n    /** A viewport to draw cross section on 2D screen */\r\n    viewport: { x: number; y: number; width: number; height: number };\r\n    /** cross section's horizontal resolution in pixel */\r\n    resolution?: number;\r\n}\r\n// const DefaultRetinaResolution = 512;\r\n// const DefaultOpacity = 1;\r\nexport interface DisplayConfig {\r\n    /** canvas size for render destination */\r\n    canvasSize?: GPUExtent3DStrict;\r\n    /** An array representing all cross sections for rendering */\r\n    sections?: Array<SectionConfig>;\r\n    /** Number of Slice Layers for rendering retina voxel */\r\n    retinaLayers?: number;\r\n    /** Resolution in pixel for each slice layers of retina */\r\n    retinaResolution?: number;\r\n    /** Opacity for retina voxel */\r\n    opacity?: number;\r\n    /** Retina 3D depth stereo. if one stereo eye offset is not zero, stereo mode will turn on */\r\n    retinaStereoEyeOffset?: number;\r\n    /** Cross section 4D depth stereo. if one stereo eye offset is not zero, stereo mode will turn on */\r\n    sectionStereoEyeOffset?: number;\r\n    /** size of center crosshair in the retina, non-zero value to enable it */\r\n    crosshair?: number;\r\n    /** background color for rendering transparent retina */\r\n    screenBackgroundColor?: GPUColor;\r\n    /** clear color for retina's voxel */\r\n    retinaClearColor?: GPUColor;\r\n    /** camera4d is in 4d scene */\r\n    camera4D?: PerspectiveCamera | OrthographicCamera;\r\n    /** camera3D is for rendering 3d retina */\r\n    camera3D?: PerspectiveCamera | OrthographicCamera;\r\n    /** this matrix determine camera's position and rotation for rendering 3d retina */\r\n    retinaViewMatrix?: Mat4;\r\n}\r\nexport const DefaultDisplayConfig: DisplayConfig = {\r\n    retinaLayers: 64,\r\n    sectionStereoEyeOffset: 0.1,\r\n    retinaStereoEyeOffset: 0.2,\r\n    retinaResolution: 512,\r\n    opacity: 1,\r\n    canvasSize: {\r\n        width: typeof window !== \"undefined\" ? window.innerWidth * window.devicePixelRatio : 1024,\r\n        height: typeof window !== \"undefined\" ? window.innerHeight * window.devicePixelRatio : 512\r\n    },\r\n    camera3D: { fov: 40, near: 0.2, far: 20 },\r\n    camera4D: { fov: 90, near: 0.01, far: 10 },\r\n    retinaViewMatrix: new Mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -5, 0, 0, 0, 1),\r\n    sections: [\r\n        {\r\n            facing: RetinaSliceFacing.NEGX,\r\n            eyeStereo: EyeStereo.LeftEye,\r\n            viewport: { x: -0.2, y: -0.8, width: 0.2, height: 0.2 }\r\n        },\r\n        {\r\n            facing: RetinaSliceFacing.NEGX,\r\n            eyeStereo: EyeStereo.RightEye,\r\n            viewport: { x: 0.8, y: -0.8, width: 0.2, height: 0.2 }\r\n        },\r\n        {\r\n            facing: RetinaSliceFacing.NEGY,\r\n            eyeStereo: EyeStereo.LeftEye,\r\n            viewport: { x: -0.2, y: 0.8, width: 0.2, height: 0.2 }\r\n        },\r\n        {\r\n            facing: RetinaSliceFacing.NEGY,\r\n            eyeStereo: EyeStereo.RightEye,\r\n            viewport: { x: 0.8, y: 0.8, width: 0.2, height: 0.2 }\r\n        },\r\n        {\r\n            facing: RetinaSliceFacing.POSZ,\r\n            eyeStereo: EyeStereo.LeftEye,\r\n            viewport: { x: -0.8, y: -0.8, width: 0.2, height: 0.2 }\r\n        },\r\n        {\r\n            facing: RetinaSliceFacing.POSZ,\r\n            eyeStereo: EyeStereo.RightEye,\r\n            viewport: { x: 0.2, y: 0.2 - 1, width: 0.2, height: 0.2 }\r\n        },\r\n    ]\r\n}\r\nexport type DisplayConfigName = keyof DisplayConfig;\r\nexport interface RenderState {\r\n    /** Set TetraSlicePipeline and prepare GPU resources.\r\n     *  Next calls should be function sliceTetras or setBindGroup.\r\n     */\r\n    beginTetras(pipeline: TetraSlicePipeline): void;\r\n    setBindGroup(index: number, bindGroup: GPUBindGroup): void;\r\n    /** Compute slice of given bindgroup attribute data.\r\n     *  beginTetras should be called at first to specify a tetraSlicePipeline\r\n     *  Next calls should be function sliceTetras, setBindGroup or drawTetras.\r\n     */\r\n    sliceTetras(vertexBindGroup: GPUBindGroup, tetraCount: number, instanceCount?: number): void;\r\n    /** This function draw slices on a internal framebuffer\r\n     *  Every beginTetras call should be end with drawTetras call\r\n     */\r\n    drawTetras(bindGroups?: { group: number, binding: GPUBindGroup }[]): void;\r\n    drawRaytracing(pipeline: RaytracingPipeline, bindGroups?: GPUBindGroup[]): void;\r\n\r\n    testWithFrustumData(obb: AABB, camMat: AffineMat4 | Obj4, modelMat?: AffineMat4 | Obj4): boolean;\r\n    getFrustumRange(camMat: AffineMat4 | Obj4, allRange?: boolean): Vec4[];\r\n}\r\nexport interface RetinaRenderPass {\r\n    /**\r\n   * Nominal type branding.\r\n   * https://github.com/microsoft/TypeScript/pull/33038\r\n   * @internal\r\n   */\r\n    readonly __brand: \"RetinaRenderPass\";\r\n    init(): Promise<this>;\r\n}\r\n\r\n\r\nexport interface RaytracingPipelineDescriptor {\r\n    code: string;\r\n    rayEntryPoint: string;\r\n    fragmentEntryPoint: string;\r\n    // viewport can be used in sprite shader\r\n    viewport?: { x: number, y: number, width: number, height: number };\r\n}\r\nexport interface GeneralShaderState {\r\n    code: string;\r\n    entryPoint: string;\r\n}\r\nexport interface TetraVertexState extends GeneralShaderState {\r\n    workgroupSize?: number;\r\n}\r\ntype SinglePipelineLayout = GPUPipelineLayout | GPUAutoLayoutMode | GPUBindGroupLayoutDescriptor[];\r\nexport type SlicePipelineLayout = GPUAutoLayoutMode | {\r\n    computeLayout: SinglePipelineLayout;\r\n    renderLayout: SinglePipelineLayout;\r\n}\r\nexport interface TetraSlicePipelineDescriptor {\r\n    vertex: TetraVertexState;\r\n    fragment: GeneralShaderState;\r\n    cullMode?: GPUCullMode;\r\n    layout?: SlicePipelineLayout;\r\n}\r\nexport interface RetinaRenderPassDescriptor {\r\n    /** here only bindgroup(1) is avaliable */\r\n    alphaShader?: GeneralShaderState;\r\n    alphaShaderBindingResources?: GPUBindingResource[];\r\n}\r\nexport interface IWireframeRenderState {\r\n    render(buffer: GPUBuffer, vertices: number): void;\r\n}"],"names":[],"mappings":"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"}