{"version":3,"file":"forces.js","sources":["../../../src/physics/forces.ts"],"sourcesContent":["import { Bivec, bivecPool } from \"../math/algebra/bivec\";\r\nimport { Mat4, mat4Pool } from \"../math/algebra/mat4\";\r\nimport { Matrix } from \"../math/algebra/matrix\";\r\nimport { Rotor } from \"../math/algebra/rotor\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4\";\r\nimport { mulBivec, World } from \"./engine\";\r\nimport { Rigid } from \"./rigid\";\r\n\r\nexport interface ForceAccumulatorConstructor {\r\n    new(): ForceAccumulator;\r\n};\r\nexport abstract class ForceAccumulator {\r\n    abstract run(world: World, dt: number): void;\r\n    private _biv1 = new Bivec;\r\n    private _biv2 = new Bivec;\r\n    private readonly _bivec0 = new Bivec;\r\n    getState(world: World) {\r\n        // clear\r\n        for (let o of world.rigids) {\r\n            if (!o.invMass) continue;\r\n            o.force.set();\r\n            o.torque.set();\r\n        }\r\n        // apply force\r\n        for (let f of world.forces) {\r\n            f.apply(world.time);\r\n        }\r\n        for (let o of world.rigids) {\r\n            if (!o.invMass) continue;\r\n            o.acceleration.copy(world.gravity);\r\n            if (o.force.norm1() > 0) {\r\n                o.acceleration.addmulfs(o.force, o.invMass);\r\n            }\r\n            if (o.inertiaIsotroy) {\r\n                if (o.torque.norm1() > 0) o.angularAcceleration.set().addmulfs(o.torque, o.invInertia.xy);\r\n            } else {\r\n                // Euler equation of motion\r\n                let localT = (o.torque.norm1() > 0) ? this._biv2.rotateconjset(o.torque, o.rotation) : this._bivec0;\r\n                let localW = this._biv1.rotateconjset(o.angularVelocity, o.rotation);\r\n                let localL = mulBivec(o.angularAcceleration, localW, o.inertia);\r\n                mulBivec(o.angularAcceleration, localL.crossrs(localW).negs().adds(localT), o.invInertia);\r\n                o.angularAcceleration.rotates(o.rotation);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport namespace force_accumulator {\r\n    export class Euler2 extends ForceAccumulator {\r\n        private _bivec = new Bivec;\r\n        private _rotor = new Rotor;\r\n        run(world: World, dt: number) {\r\n            for (let o of world.rigids) {\r\n                if (!o.invMass) continue;\r\n                o.rotation.norms();\r\n            }\r\n            this.getState(world);\r\n            world.time += dt;\r\n            let dtsqrhalf = dt * dt / 2;\r\n            for (let o of world.rigids) {\r\n                if (o.sleep || !o.position) continue;\r\n                // x1 = x0 + v0 t + a0 t^2/2\r\n                // v1 = v0 + a0 t/2\r\n                o.position.addmulfs(o.velocity, dt).addmulfs(o.acceleration, dtsqrhalf);\r\n                o.velocity.addmulfs(o.acceleration, dt);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(this._rotor.expset(\r\n                    this._bivec.copy(o.angularVelocity).mulfs(dt).addmulfs(o.angularAcceleration, dtsqrhalf)\r\n                ));\r\n                o.angularVelocity.addmulfs(o.angularAcceleration, dt);\r\n            }\r\n        }\r\n    }\r\n    export class Predict3 extends ForceAccumulator {\r\n        private _bivec1 = new Bivec;\r\n        private _bivec2 = new Bivec;\r\n        private _rotor = new Rotor;\r\n        private _vec = new Vec4;\r\n        run(world: World, dt: number) {\r\n            for (let o of world.rigids) {\r\n                if (!o.invMass) continue;\r\n                o.rotation.norms();\r\n            }\r\n            let prevStates = world.rigids.map(obj => ({\r\n                acceleration: obj.acceleration.clone(),\r\n                angularAcceleration: obj.angularAcceleration.clone(),\r\n            }));\r\n            this.getState(world);\r\n            world.time += dt;\r\n            let dthalf = dt * 0.5;\r\n            let dtsqrdiv6 = dt * dthalf / 3;\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                let prevO = prevStates[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                // if we know a1, then:\r\n                // x1 = x0 + v0 t + (2/3 a0 + 1/3 a1) t^2/2\r\n                // v1 = v0 + (a0 + a1) t/2\r\n                // predict a1 = 2a0 - a{-1}, got:\r\n                // x1 = x0 + v0 t + (4/3 a0 - 1/3 a{-1}) t^2/2\r\n                // v1 = v0 + (3/2 a0 - 1/2 a{-1}) t\r\n                o.position.addmulfs(o.velocity, dt).addmulfs(\r\n                    this._vec.copy(prevO.acceleration).addmulfs(o.acceleration, -4), -dtsqrdiv6\r\n                );\r\n                o.velocity.addmulfs(prevO.acceleration.addmulfs(o.acceleration, -3), -dthalf);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(this._rotor.expset(\r\n                    this._bivec1.copy(o.angularVelocity).mulfs(dt).addmulfs(\r\n                        this._bivec2.copy(prevO.angularAcceleration).addmulfs(o.angularAcceleration, -4), -dtsqrdiv6\r\n                    )\r\n                ));\r\n                o.angularVelocity.addmulfs(prevO.angularAcceleration.addmulfs(o.angularAcceleration, -3), -dthalf);\r\n            }\r\n        }\r\n    }\r\n    interface State {\r\n        position: Vec4;\r\n        rotation: Rotor;\r\n        velocity: Vec4;\r\n        angularVelocity: Bivec;\r\n        acceleration: Vec4;\r\n        angularAcceleration: Bivec;\r\n    }\r\n    export class RK4 extends ForceAccumulator {\r\n        private _bivec1 = new Bivec;\r\n        private _rotor = new Rotor;\r\n        run(world: World, dt: number) {\r\n            for (let o of world.rigids) {\r\n                if (!o.invMass) continue;\r\n                o.rotation.norms();\r\n            }\r\n            let dthalf = dt * 0.5;\r\n            let dtdiv6 = dt / 6;\r\n            let self = this;\r\n            function storeState(states: State[][]) {\r\n                self.getState(world);\r\n                states.push(world.rigids.map(obj => ({\r\n                    position: obj.position?.clone(),\r\n                    rotation: obj.rotation?.clone(),\r\n                    velocity: obj.velocity.clone(),\r\n                    angularVelocity: obj.angularVelocity.clone(),\r\n                    acceleration: obj.acceleration.clone(),\r\n                    angularAcceleration: obj.angularAcceleration.clone(),\r\n                })));\r\n            }\r\n            function loadState(states: State[][], index: number) {\r\n                let state = states[index];\r\n                for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                    let o = world.rigids[idx];\r\n                    let s = state[idx];\r\n                    o.position?.copy(s?.position);\r\n                    o.rotation?.copy(s?.rotation);\r\n                    o.velocity.copy(s.velocity);\r\n                    o.angularVelocity.copy(s.angularVelocity);\r\n                    o.acceleration.copy(s.acceleration);\r\n                    o.angularAcceleration.copy(s.angularAcceleration);\r\n                }\r\n            }\r\n            let states: State[][] = [];\r\n            storeState(states); // 0: k1 = f(yn, tn)\r\n            for (let o of world.rigids) {\r\n                if (o.sleep || !o.position) continue;\r\n                o.position.addmulfs(o.velocity, dthalf);\r\n                o.velocity.addmulfs(o.acceleration, dthalf);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(\r\n                    this._rotor.expset(this._bivec1.copy(o.angularVelocity).mulfs(dthalf))\r\n                );\r\n                o.angularVelocity.addmulfs(o.angularAcceleration, dthalf);\r\n            }\r\n            world.time += dthalf;\r\n            storeState(states); // 1: k2 = f(yn + h/2 k1, tn + h/2)\r\n            loadState(states, 0);\r\n            let state = states[1];\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                let s = state[idx];\r\n                o.position.addmulfs(s.velocity, dthalf);\r\n                o.velocity.addmulfs(s.acceleration, dthalf);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(\r\n                    this._rotor.expset(this._bivec1.copy(s.angularVelocity).mulfs(dthalf))\r\n                );\r\n                o.angularVelocity.addmulfs(s.angularAcceleration, dthalf);\r\n            }\r\n            storeState(states); // 2: k3 = f(yn + h/2 k2, tn + h/2)\r\n            loadState(states, 0);\r\n            state = states[2];\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                let s = state[idx];\r\n                o.position.addmulfs(s.velocity, dt);\r\n                o.velocity.addmulfs(s.acceleration, dt);\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(\r\n                    this._rotor.expset(this._bivec1.copy(s.angularVelocity).mulfs(dt))\r\n                );\r\n                o.angularVelocity.addmulfs(s.angularAcceleration, dt);\r\n            }\r\n            world.time += dthalf;\r\n            storeState(states); // 3: k4 = f(yn + h k3, tn + h)\r\n            loadState(states, 0);\r\n            for (let idx = 0, len = world.rigids.length; idx < len; idx++) {\r\n                let o = world.rigids[idx];\r\n                if (o.sleep || !o.position) continue;\r\n                let k1 = states[0][idx];\r\n                let k2 = states[1][idx];\r\n                let k3 = states[2][idx];\r\n                let k4 = states[3][idx];\r\n                o.position.addmulfs(\r\n                    k1.velocity.adds(k4.velocity).addmulfs(\r\n                        k2.velocity.adds(k3.velocity), 2\r\n                    ), dtdiv6\r\n                );\r\n                o.velocity.addmulfs(\r\n                    k1.acceleration.adds(k4.acceleration).addmulfs(\r\n                        k2.acceleration.adds(k3.acceleration), 2\r\n                    ), dtdiv6\r\n                );\r\n                if (!o.rotation) continue;\r\n                o.rotation.mulsl(this._rotor.expset(\r\n                    k1.angularVelocity.adds(k4.angularVelocity).addmulfs(\r\n                        k2.angularVelocity.adds(k3.angularVelocity), 2\r\n                    ).mulfs(dtdiv6)\r\n                ));\r\n                o.angularVelocity.addmulfs(\r\n                    k1.angularAcceleration.adds(k4.angularAcceleration).addmulfs(\r\n                        k2.angularAcceleration.adds(k3.angularAcceleration), 2\r\n                    ), dtdiv6\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\nexport abstract class Force {\r\n    abstract apply(time: number): void;\r\n}\r\n/** apply a spring force between object a and b\r\n *  pointA and pointB are in local coordinates,\r\n *  refering connect point of spring's two ends.\r\n *  b can be null for attaching spring to a fixed point in the world.\r\n *  f = k dx - damp * dv */\r\nexport class Spring extends Force {\r\n    a: Rigid;\r\n    pointA: Vec4;\r\n    b: Rigid | null;\r\n    pointB: Vec4;\r\n    k: number;\r\n    damp: number;\r\n    length: number;\r\n    private _vec4f = new Vec4();\r\n    private _vec4a = new Vec4();\r\n    private _vec4b = new Vec4();\r\n    private _bivec = new Bivec();\r\n    constructor(\r\n        a: Rigid, b: Rigid | null,\r\n        pointA: Vec4, pointB: Vec4,\r\n        k: number, length: number = 0, damp: number = 0) {\r\n        super();\r\n        this.a = a; this.b = b; this.k = k; this.damp = damp;\r\n        this.pointA = pointA; this.pointB = pointB;\r\n        this.length = length;\r\n    }\r\n    apply(time: number) {\r\n        const pa = this.a.position;\r\n        const pb = this.b?.position;\r\n        this._vec4a.copy(this.pointA).rotates(this.a.rotation).adds(pa);\r\n        this._vec4b.copy(this.pointB);\r\n        if (this.b) this._vec4b.rotates(this.b.rotation).adds(pb);\r\n        let k = this.k;\r\n        this._vec4f.subset(this._vec4b, this._vec4a);\r\n        if (this.length > 0) {\r\n            let len = this._vec4f.norm();\r\n            k *= (len - this.length) / len;\r\n        }\r\n\r\n        if (this.damp) {\r\n            const len2 = this._vec4f.normsqr();\r\n            if (len2 > 1e-9) {\r\n                const va = vec4Pool.pop();\r\n                this.a.getlinearVelocity(va, this._vec4a);\r\n                const vb = vec4Pool.pop().set();\r\n                if (this.b) {\r\n                    this.b.getlinearVelocity(vb, this._vec4b);\r\n                }\r\n                k -= va.subs(vb).dot(this._vec4f) / len2 * this.damp;\r\n                let oma = va.subs(vb).dot(this._vec4f);\r\n                if (Math.abs(oma) > 0.4) console.log(oma);\r\n                va.pushPool(); vb.pushPool();\r\n            }\r\n        }\r\n        this._vec4a.subs(pa);\r\n        if (this.b) this._vec4b.subs(pb);\r\n        //_vec4 is force from a to b\r\n        this._vec4f.mulfs(k);\r\n        // add force\r\n        this.a.force.adds(this._vec4f);\r\n        if (this.b) this.b.force.subs(this._vec4f);\r\n        // add torque\r\n        this.a.torque.subs(this._bivec.wedgevvset(this._vec4f, this._vec4a));\r\n        if (this.b) this.b.torque.adds(this._bivec.wedgevvset(this._vec4f, this._vec4b));\r\n\r\n    }\r\n}\r\n/** apply a spring torque between object a and b\r\n *  planeA and planeB are in local coordinates, must be simple and normalised,\r\n *  b can be null for attaching spring to a fixed plane in the world.\r\n *  torque = k (planeA x planeB) - damp * dw */\r\nexport class TorqueSpring extends Force {\r\n\r\n    a: Rigid;\r\n    planeA: Bivec;\r\n    b: Rigid | null;\r\n    planeB: Bivec;\r\n    k: number;\r\n    damp: number;\r\n    length: number;\r\n    private _bivf = new Bivec();\r\n    private _biva = new Bivec();\r\n    private _bivb = new Bivec();\r\n    private _bivec = new Bivec();\r\n    constructor(\r\n        a: Rigid, b: Rigid | null, planeA: Bivec, planeB: Bivec,\r\n        k: number, damp: number = 0) {\r\n        super();\r\n        this.a = a; this.b = b; this.k = k; this.damp = damp;\r\n        this.planeA = planeA;\r\n        this.planeB = planeB;\r\n    }\r\n    apply(time: number): void {\r\n        const srcB = this._biva.copy(this.planeA).rotates(this.a.rotation);\r\n        const dstB = this._bivb.copy(this.planeB);\r\n        if (this.b) dstB.rotates(this.b.rotation);\r\n        let k = this.k;\r\n        this._bivf.crossset(srcB, dstB);\r\n        if (this.damp && this._bivf.norm1() > 1e-3) {\r\n            let dw = (this.b ? this._bivec.subset(this.a.angularVelocity, this.b.angularVelocity) : this.a.angularVelocity).dot(this._bivf);\r\n            // if (Math.abs(dw) > 0.2) console.log(dw);\r\n            // if (dw > 0.3) dw = 0.3;\r\n            // if (dw < - 0.3) dw = - 0.3;\r\n            // if (Math.abs(dw) > 0.2) console.log(dw);\r\n            // if(this._bivf.norm()>10) console.log(this._bivf.norm());\r\n            k -= dw / this._bivf.normsqr() * this.damp;\r\n        }\r\n        this._bivf.mulfs(k);\r\n        this.a.torque.adds(this._bivf);\r\n        if (this.b) this.b.torque.subs(this._bivf);\r\n    }\r\n}\r\nexport class Damping extends Force {\r\n    objects: Rigid[] = [];\r\n    linearFactor: number;\r\n    // assume angular damp matrix(6x6) has the same eigen vector with inertia matrix\r\n    // this is diagonalized angular damp matrix\r\n    angularFactor: Bivec;\r\n    // todo isotopy simplification\r\n\r\n    private _bivec = new Bivec();\r\n    apply(time: number) {\r\n        for (let o of this.objects) {\r\n            o.force.addmulfs(o.velocity, -this.linearFactor);\r\n            o.torque.subs(mulBivec(this._bivec,\r\n                this._bivec.copy(o.angularVelocity).rotatesconj(o.rotation), this.angularFactor\r\n            ).rotates(o.rotation));\r\n        }\r\n    }\r\n    constructor(linearFactor: number, angularFactor: number | Bivec) {\r\n        super();\r\n        this.linearFactor = linearFactor;\r\n        this.angularFactor = angularFactor instanceof Bivec ? angularFactor : new Bivec(\r\n            angularFactor, angularFactor, angularFactor, angularFactor, angularFactor, angularFactor\r\n        );\r\n    }\r\n    add(...objects: Rigid[]) {\r\n        for (let o of objects) {\r\n            this.objects.push(o);\r\n        }\r\n    }\r\n}\r\nexport type ElectricCharge = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, charge: number };\r\nexport type ElectricDipole = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, moment: Vec4, worldMoment?: Vec4 };\r\nexport type MagneticDipole = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, moment: Bivec, worldMoment?: Bivec };\r\nexport type CurrentElement = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, current: Vec4 };\r\nexport type CurrentCircuit = { rigid: Rigid | null, position: Vec4, worldPos?: Vec4, current: Vec4, radius: number };\r\nexport class MaxWell extends Force {\r\n    electricCharge: ElectricCharge[] = [];\r\n    electricDipole: ElectricDipole[] = [];\r\n    magneticDipole: MagneticDipole[] = [];\r\n    currentElement: CurrentElement[] = [];\r\n    currentCircuit: CurrentCircuit[] = [];\r\n    permittivity = 8.854187817e-12;\r\n    permeability = Math.PI * 4e-7;\r\n    constantElectricField = new Vec4;\r\n    /** magnetic field direction is defined by positive charge's velocity wedge it's lorentz force */\r\n    constantMagneticField = new Bivec;\r\n    private _vecE = new Vec4;\r\n    private _vecdE = new Mat4().set();\r\n    private _vecB = new Bivec;\r\n    private _vecdB = new Matrix(4, 6);\r\n    private _vecP = new Vec4;\r\n    addElectricCharge(s: ElectricCharge) {\r\n        this.electricCharge.push(s);\r\n    }\r\n    addElectricDipole(s: ElectricDipole) {\r\n        this.electricDipole.push(s);\r\n    }\r\n    addMagneticDipole(s: MagneticDipole) {\r\n        this.magneticDipole.push(s);\r\n    }\r\n    getEAt(p: Vec4, dE: boolean, ignore: Rigid | Vec4 | undefined) {\r\n        let electricField = this._vecE.copy(this.constantElectricField);\r\n        this._vecdE.set();\r\n        for (let s of this.electricCharge) {\r\n            if (ignore === s.position || ignore === s?.rigid) continue;\r\n            this.addEOfElectricCharge(electricField, dE ? this._vecdE : undefined, p, s);\r\n        }\r\n        for (let s of this.electricDipole) {\r\n            if (ignore === s.position || ignore === s?.rigid) continue;\r\n            this.addEOfElectricDipole(electricField, dE ? this._vecdE : undefined, p, s);\r\n        }\r\n        return this._vecE;\r\n    }\r\n    getBAt(p: Vec4, dB: boolean, ignore: Rigid | Vec4 | undefined) {\r\n        let magneticField = this._vecB.copy(this.constantMagneticField);\r\n        this._vecdB.elem.fill(0);\r\n        for (let s of this.magneticDipole) {\r\n            if (ignore === s.position || ignore === s?.rigid) continue;\r\n            this.addBOfMagneticDipole(magneticField, dB ? this._vecdB : undefined, p, s);\r\n        }\r\n        return magneticField;\r\n    }\r\n    apply(time: number): void {\r\n        for (let q of this.electricCharge) {\r\n            q.worldPos ??= new Vec4;\r\n            if (q.rigid)\r\n                q.worldPos.copy(q.position).rotates(q.rigid.rotation).adds(q.rigid.position);\r\n            else\r\n                q.worldPos.copy(q.position);\r\n        }\r\n        for (let q of this.electricDipole) {\r\n            q.worldPos ??= new Vec4;\r\n            q.worldMoment ??= new Vec4;\r\n            if (q.rigid) {\r\n                q.worldPos.copy(q.position).rotates(q.rigid.rotation).adds(q.rigid.position);\r\n                q.worldMoment.copy(q.moment).rotates(q.rigid.rotation);\r\n            } else {\r\n                q.worldMoment.copy(q.moment);\r\n            }\r\n        }\r\n        for (let q of this.magneticDipole) {\r\n            q.worldPos ??= new Vec4;\r\n            q.worldMoment ??= new Bivec;\r\n            if (q.rigid) {\r\n                q.worldPos.copy(q.position).rotates(q.rigid.rotation).adds(q.rigid.position);\r\n                q.worldMoment.copy(q.moment).rotates(q.rigid.rotation);\r\n            } else {\r\n                q.worldMoment.copy(q.moment);\r\n            }\r\n        }\r\n        // outter loop: test point, inner loop: source point\r\n\r\n        let force = this._vecP;\r\n        for (let q of this.electricCharge) {\r\n            if (!q.rigid || !q.rigid.mass) continue;\r\n            this.getEAt(q.worldPos!, false, q.rigid ?? q.position);\r\n            this.getBAt(q.worldPos!, false, undefined);\r\n            let zeroB = (this._vecB.norm1() === 0);\r\n            let zeroTorque = q.position.norm1() === 0;\r\n            if (zeroB && zeroTorque) {\r\n                q.rigid.force.addmulfs(this._vecE, q.charge);\r\n                continue;\r\n            }\r\n            if (!zeroB) {\r\n                if (zeroTorque) {\r\n                    force.copy(q.rigid.velocity);\r\n                } else {\r\n                    q.rigid.getlinearVelocity(force, q.worldPos!);\r\n                }\r\n                // F = q(E+B.v)\r\n                force.dotbsr(this._vecB).adds(this._vecE).mulfs(q.charge);\r\n            } else {\r\n                force.copy(this._vecE).mulfs(q.charge);\r\n            }\r\n            q.rigid.force.adds(force);\r\n            q.rigid.torque.adds(this._vecB.wedgevvset(\r\n                this._vecE.subset(q.worldPos!, q.rigid.position), force\r\n            ));\r\n        }\r\n        let v4 = force;\r\n        let biv = bivecPool.pop();\r\n        for (let q of this.electricDipole) {\r\n            if (!q.rigid || !q.rigid.mass) continue;\r\n            this.getEAt(q.worldPos!, true, q.rigid ?? q.position);\r\n            let zeroTorque = q.position.norm1() === 0;\r\n            v4.mulmatvset(this._vecdE, q.worldMoment!);\r\n            biv.wedgevvset(this._vecE, q.worldMoment!);\r\n            q.rigid.torque.adds(biv);\r\n            q.rigid.force.adds(v4);\r\n            if (zeroTorque) continue;\r\n            q.rigid.torque.adds(this._vecB.wedgevvset(\r\n                this._vecE.subset(q.worldPos!, q.rigid.position), v4\r\n            ));\r\n        }\r\n\r\n        for (let q of this.magneticDipole) {\r\n            if (!q.rigid || !q.rigid.mass) continue;\r\n            this.getBAt(q.worldPos!, true, q.rigid ?? q.position);\r\n            let zeroTorque = q.position.norm1() === 0;\r\n\r\n            let db = this._vecdB.elem;\r\n            v4.dotbset(Vec4.x, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[0], db[4], db[8], db[12], db[16], db[20]));\r\n            q.rigid.force.adds(v4);\r\n            v4.dotbset(Vec4.y, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[1], db[5], db[9], db[13], db[17], db[21]));\r\n            q.rigid.force.adds(v4);\r\n            v4.dotbset(Vec4.z, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[2], db[6], db[10], db[14], db[18], db[22]));\r\n            q.rigid.force.adds(v4);\r\n            v4.dotbset(Vec4.w, q.worldMoment!);\r\n            v4.dotbset(v4, biv.set(db[3], db[7], db[11], db[15], db[19], db[23]));\r\n            q.rigid.force.adds(v4);\r\n\r\n            biv.crossset(q.worldMoment!, this._vecB);\r\n            q.rigid.torque.adds(biv);\r\n            if (zeroTorque) continue;\r\n            q.rigid.torque.adds(this._vecB.wedgevvset(\r\n                this._vecE.subset(q.worldPos!, q.rigid.position), v4\r\n            ));\r\n        }\r\n        biv.pushPool();\r\n    }\r\n    private addEOfElectricCharge(vecE: Vec4, dE: Mat4 | undefined, p: Vec4, s: ElectricCharge) {\r\n\r\n        let r = vec4Pool.pop().subset(p, s.worldPos!);\r\n        let r2 = 1 / r.normsqr();\r\n        let qr4 = s.charge * r2 * r2;\r\n        vecE.addmulfs(r, qr4);\r\n        if (!dE) { r.pushPool(); return; }\r\n        let qr6_neg4 = -4 * qr4 * r2;\r\n        let qrr = r.mulfs(qr6_neg4);\r\n        let xy = qrr.x * r.y, xz = qrr.x * r.z, xt = qrr.x * r.w, yz = qrr.y * r.z, yt = qrr.y * r.w, zt = qrr.z * r.w;\r\n        let mat = mat4Pool.pop();\r\n        dE.adds(mat.set(\r\n            qr4 + qrr.x * r.x, xy, xz, xt,\r\n            xy, qr4 + qrr.y * r.y, yz, yt,\r\n            xz, yz, qr4 + qrr.z * r.z, zt,\r\n            xt, yt, zt, qr4 + qrr.w * r.w\r\n        ));\r\n        mat.pushPool();\r\n        r.pushPool();\r\n    }\r\n    private addBOfMagneticDipole(vecB: Bivec, dB: Matrix | undefined, pos: Vec4, s: MagneticDipole) {\r\n        let k = vec4Pool.pop().subset(pos, s.worldPos!);\r\n        let q = s.worldMoment!.dual();\r\n        let x = k.x, y = k.y, z = k.z, w = k.w;\r\n        let xx = x * x, yy = y * y, zz = z * z, ww = w * w;\r\n        let kxy = q.xy, kxz = q.xz, kxw = q.xw, kyz = q.yz, kyw = q.yw, kzw = q.zw;\r\n        let kyx = -q.xy, kzx = -q.xz, kwx = -q.xw, kzy = -q.yz, kwy = -q.yw, kwz = -q.zw;\r\n        let r2 = xx + yy + zz + ww;\r\n        let kxy2 = kzw * (-xx - yy + zz + ww);\r\n        let kxz2 = kyw * (-xx + yy - zz + ww);\r\n        let kxw2 = kyz * (-xx + yy + zz - ww);\r\n        let kyz2 = kxw * (xx - yy - zz + ww);\r\n        let kyw2 = kxz * (xx - yy + zz - ww);\r\n        let kzw2 = kxy * (xx + yy - zz - ww);\r\n\r\n        let rr = 1 / r2;\r\n        let rr2 = rr * rr;\r\n        let rr34 = 4 * rr2 * rr;\r\n        let rr4 = rr34 * rr;\r\n        let xy = x * y,\r\n            xz = x * z,\r\n            xw = x * w,\r\n            yz = y * z,\r\n            yw = y * w,\r\n            zw = z * w;\r\n\r\n        vecB.xy += rr34 * ((-kxz * xw - kyz * yw + kxw * xz + kyw * yz) + 0.5 * kxy2);\r\n        vecB.xz += -rr34 * ((-kxy * xw - kzy * zw + kxw * xy + kzw * yz) + 0.5 * kxz2);\r\n        vecB.xw += -rr34 * ((-kxz * xy - kwz * yw + kxy * xz + kwy * zw) - 0.5 * kxw2);\r\n        vecB.yz += rr34 * ((kxy * yw - kzx * zw + kyw * xy + kzw * xz) + 0.5 * kyz2);\r\n        vecB.yw += -rr34 * ((kxy * yz - kwx * zw + kyz * xy - kzw * xw) + 0.5 * kyw2);\r\n        vecB.zw += rr34 * ((kxz * yz - kwx * yw - kyz * xz - kyw * xw) + 0.5 * kzw2);\r\n        if (!dB) return;\r\n        let r2m6xx = r2 - 6 * xx;\r\n        let r2m6yy = r2 - 6 * yy;\r\n        let r2m6zz = r2 - 6 * zz;\r\n        let r2m6ww = r2 - 6 * ww;\r\n        x *= rr4; y *= rr4; z *= rr4; w *= rr4;\r\n        xy *= 6; xz *= 6; xw *= 6; yz *= 6; yw *= 6; zw *= 6;\r\n        let kxy_x = kxy * x, kxz_x = kxz * x, kxw_x = kxw * x, kyz_x = kyz * x, kyw_x = kyw * x, kzw_x = kzw * x;\r\n        let kxy_y = kxy * y, kxz_y = kxz * y, kxw_y = kxw * y, kyz_y = kyz * y, kyw_y = kyw * y, kzw_y = kzw * y;\r\n        let kxy_z = kxy * z, kxz_z = kxz * z, kxw_z = kxw * z, kyz_z = kyz * z, kyw_z = kyw * z, kzw_z = kzw * z;\r\n        let kxy_w = kxy * w, kxz_w = kxz * w, kxw_w = kxw * w, kyz_w = kyz * w, kyw_w = kyw * w, kzw_w = kzw * w;\r\n\r\n        dB!.adds(new Matrix(4, 6).setElements(\r\n            (xy * (kyz_w - kyw_z) + 2 * kzw_x * (xx + yy - 2 * (zz + ww)) + (kxw_z - kxz_w) * (r2m6xx)),\r\n            (xy * (kxz_w - kxw_z) + 2 * kzw_y * (xx + yy - 2 * (zz + ww)) + (kyw_z - kyz_w) * (r2m6yy)),\r\n            (zw * (kxz_x + kyz_y) - 2 * kzw_z * (zz + ww - 2 * (xx + yy)) + (kxw_x + kyw_y) * (r2m6zz)),\r\n            - (zw * (kxw_x + kyw_y) + 2 * kzw_w * (zz + ww - 2 * (xx + yy)) + (kxz_x + kyz_y) * (r2m6ww)),\r\n\r\n            - (xz * (-kyz_w - kzw_y) + 2 * kyw_x * (xx + zz - 2 * (yy + ww)) + (kxw_y - kxy_w) * (r2m6xx)),\r\n            - (yw * (kxy_x - kyz_z) - 2 * kyw_y * (yy + ww - 2 * (xx + zz)) + (kxw_x + kzw_z) * (r2m6yy)),\r\n            - (xz * (kxy_w - kxw_y) + 2 * kyw_z * (xx + zz - 2 * (yy + ww)) + (kzw_y + kyz_w) * (r2m6zz)),\r\n            (yw * (kxw_x + kzw_z) + 2 * kyw_w * (yy + ww - 2 * (xx + zz)) + (kxy_x - kyz_z) * (r2m6ww)),\r\n\r\n            - (xw * (-kzw_y + kyw_z) - 2 * kyz_x * (xx + ww - 2 * (zz + yy)) + (kxy_z - kxz_y) * (r2m6xx)),\r\n            (yz * (kxy_x - kyw_w) - 2 * kyz_y * (zz + yy - 2 * (xx + ww)) + (kxz_x - kzw_w) * (r2m6yy)),\r\n            -(yz * (kxz_x - kzw_w) + 2 * kyz_z * (zz + yy - 2 * (xx + ww)) + (kxy_x - kyw_w) * (r2m6zz)),\r\n            - (xw * (kxz_y - kxy_z) - 2 * kyz_w * (xx + ww - 2 * (zz + yy)) + (-kyw_z + kzw_y) * (r2m6ww)),\r\n\r\n            (xw * (-kxy_y - kxz_z) - 2 * kxw_x * (xx + ww - 2 * (yy + zz)) + (kyw_y + kzw_z) * (r2m6xx)),\r\n            (yz * (-kxz_w - kzw_x) + 2 * kxw_y * (yy + zz - 2 * (xx + ww)) + (kyw_x + kxy_w) * (r2m6yy)),\r\n            (yz * (-kxy_w - kyw_x) + 2 * kxw_z * (yy + zz - 2 * (xx + ww)) + (kzw_x + kxz_w) * (r2m6zz)),\r\n            - (xw * (kyw_y + kzw_z) + 2 * kxw_w * (xx + ww - 2 * (yy + zz)) + (-kxy_y - kxz_z) * (r2m6ww)),\r\n\r\n            - (xz * (-kxy_y - kxw_w) - 2 * kxz_x * (xx + zz - 2 * (yy + ww)) + (kyz_y - kzw_w) * (r2m6xx)),\r\n            - (yw * (-kxw_z + kzw_x) + 2 * kxz_y * (yy + ww - 2 * (xx + zz)) + (kyz_x + kxy_z) * (r2m6yy)),\r\n            (xz * (kyz_y - kzw_w) + 2 * kxz_z * (xx + zz - 2 * (yy + ww)) + (-kxy_y - kxw_w) * (r2m6zz)),\r\n            - (yw * (-kxy_z - kyz_x) + 2 * kxz_w * (yy + ww - 2 * (xx + zz)) + (-kzw_x + kxw_z) * (r2m6ww)),\r\n\r\n            (xy * (-kxz_z - kxw_w) - 2 * kxy_x * (xx + yy - 2 * (zz + ww)) + (-kyz_z - kyw_w) * (r2m6xx)),\r\n            - (xy * (-kyz_z - kyw_w) + 2 * kxy_y * (xx + yy - 2 * (zz + ww)) + (-kxz_z - kxw_w) * (r2m6yy)),\r\n            (zw * (-kxw_y + kyw_x) + 2 * kxy_z * (zz + ww - 2 * (xx + yy)) + (-kyz_x + kxz_y) * (r2m6zz)),\r\n            (zw * (-kxz_y + kyz_x) + 2 * kxy_w * (zz + ww - 2 * (xx + yy)) + (-kyw_x + kxw_y) * (r2m6ww))\r\n        ));\r\n    }\r\n    private addEOfElectricDipole(vecE: Vec4, dE: Mat4 | undefined, pos: Vec4, s: ElectricDipole) {\r\n        let r = vec4Pool.pop().subset(pos, s.worldPos!);\r\n        let p = s.worldMoment!;\r\n        // u =  r.s / (r.r)^2\r\n        let pxx = p.x * r.x, pyy = p.y * r.y, pzz = p.z * r.z, pww = p.w * r.w;\r\n        let p2 = pxx + pyy + pzz + pww;\r\n        let rxx = r.x * r.x, ryy = r.y * r.y, rzz = r.z * r.z, rww = r.w * r.w;\r\n        let r2 = rxx + ryy + rzz + rww;\r\n        let r2inv = 1 / r2;\r\n        let r4 = r2inv * r2inv;\r\n        let p2_r2_4 = 4 * p2 * r2inv;\r\n        vecE.x += r4 * (p.x - p2_r2_4 * r.x);\r\n        vecE.y += r4 * (p.y - p2_r2_4 * r.y);\r\n        vecE.z += r4 * (p.z - p2_r2_4 * r.z);\r\n        vecE.w += r4 * (p.w - p2_r2_4 * r.w);\r\n\r\n        if (!dE) return; // if no need for calc dE\r\n        let r8_neg4 = -4 * r4 * r4;\r\n        let p2_6 = p2 * 6;\r\n\r\n        let xy = r8_neg4 * ((p.x * r.y + p.y * r.x) * r2 - p2_6 * r.x * r.y),\r\n            xz = r8_neg4 * ((p.x * r.z + p.z * r.x) * r2 - p2_6 * r.x * r.z),\r\n            xw = r8_neg4 * ((p.x * r.w + p.w * r.x) * r2 - p2_6 * r.x * r.w),\r\n            yz = r8_neg4 * ((p.y * r.z + p.z * r.y) * r2 - p2_6 * r.y * r.z),\r\n            yw = r8_neg4 * ((p.y * r.w + p.w * r.y) * r2 - p2_6 * r.y * r.w),\r\n            zw = r8_neg4 * ((p.z * r.w + p.w * r.z) * r2 - p2_6 * r.z * r.w);\r\n        let mat = mat4Pool.pop();\r\n        dE.adds(mat.set(\r\n            (p2 * (r2 - 6 * rxx) + 2 * pxx * r2) * r8_neg4, xy, xz, xw,\r\n            xy, (p2 * (r2 - 6 * ryy) + 2 * pyy * r2) * r8_neg4, yz, yw,\r\n            xz, yz, (p2 * (r2 - 6 * rzz) + 2 * pzz * r2) * r8_neg4, zw,\r\n            xw, yw, zw, (p2 * (r2 - 6 * rww) + 2 * pww * r2) * r8_neg4\r\n        ).negs());\r\n        mat.pushPool();\r\n        r.pushPool();\r\n\r\n    }\r\n}\r\nexport class Gravity extends Force {\r\n    _vecG = new Vec4;\r\n    rigids: Rigid[] = [];\r\n    lawIndex = -3;\r\n    gravitonMass = 0;\r\n    constructor(lawIndex = -3, gravitonMass = 0) {\r\n        super();\r\n        this.lawIndex = lawIndex;\r\n        this.gravitonMass = gravitonMass;\r\n    }\r\n    gain = 10;\r\n    add(s: Rigid) {\r\n        this.rigids.push(s);\r\n    }\r\n    getGAt(p: Vec4, ignore: Rigid | Vec4 | undefined) {\r\n        this._vecG.set();\r\n        for (let s of this.rigids) {\r\n            if (ignore === s.position || ignore === s) continue;\r\n            this.addGOfMass(this._vecG, p, s);\r\n        }\r\n        return this._vecG;\r\n    }\r\n    apply(time: number): void {\r\n\r\n        // outter loop: test point, inner loop: source point\r\n\r\n        for (let q of this.rigids) {\r\n            if (!q || !q.mass) continue;\r\n            q.force.addmulfs(this.getGAt(q.position, q), q.mass);\r\n        }\r\n    }\r\n    data = [-247.562, -213.642, -185.622, -162.273, -142.662, -126.071, -111.941, -99.8327, -89.3977, -80.357, -72.4858, -65.6012, -59.5538, -54.2202, -49.4985, -45.3036, -41.5642, -38.2204, -35.2212, -32.5236, -30.0908, -27.891, -25.8973, -24.0861, -22.4371, -20.9326, -19.5572, -18.2974, -17.1415, -16.0788, -15.1004, -14.198, -13.3644, -12.5933, -11.879, -11.2163, -10.6007, -10.0282, -9.495, -8.99788, -8.53384, -8.10021, -7.69457, -7.3147, -6.95861, -6.62449, -6.31069, -6.01571, -5.73816, -5.4768, -5.23047, -4.99813, -4.7788, -4.5716, -4.37572, -4.1904, -4.01494, -3.84872, -3.69114, -3.54165, -3.39975, -3.26497, -3.13688, -3.01508, -2.89918, -2.78885, -2.68376, -2.5836, -2.4881, -2.39699, -2.31003, -2.22699, -2.14766, -2.07183, -1.99932, -1.92995, -1.86357, -1.8, -1.73911, -1.68077, -1.62484, -1.5712, -1.51974, -1.47036, -1.42295, -1.37742, -1.33367, -1.29163, -1.25121, -1.21234, -1.17494, -1.13896, -1.10432, -1.07097, -1.03884, -1.00789, -0.97806, -0.949304, -0.921575, -0.894829, -0.869024, -0.844121, -0.820083, -0.796872, -0.774456, -0.752801, -0.731877, -0.711655, -0.692106, -0.673203, -0.654921, -0.637236, -0.620125, -0.603565, -0.587535, -0.572016, -0.556987, -0.542431, -0.528329, -0.514665, -0.501423, -0.488587, -0.476143, -0.464076, -0.452373, -0.44102, -0.430007, -0.419319, -0.408947, -0.398879, -0.389104, -0.379613, -0.370395, -0.361442, -0.352745, -0.344294, -0.336082, -0.328101, -0.320343, -0.312801, -0.305467, -0.298335, -0.291399, -0.284652, -0.278088, -0.271702, -0.265487, -0.259438, -0.25355, -0.247819, -0.242238, -0.236804, -0.231513, -0.226359, -0.221338, -0.216447, -0.211682, -0.207038, -0.202513, -0.198103, -0.193803, -0.189612, -0.185526, -0.181542, -0.177656, -0.173867, -0.170171, -0.166566, -0.163048, -0.159617, -0.156268, -0.153, -0.149811, -0.146699, -0.14366, -0.140694, -0.137798, -0.134971, -0.13221, -0.129513, -0.12688, -0.124308, -0.121795, -0.119341, -0.116942, -0.114599, -0.11231, -0.110072, -0.107886, -0.105749, -0.10366, -0.101617, -0.0996211, -0.0976693, -0.0957608, -0.0938947, -0.0920698, -0.0902851, -0.0885396, -0.0868323, -0.0851623, -0.0835285, -0.0819302, -0.0803665, -0.0788364, -0.0773392, -0.075874, -0.0744402, -0.0730369, -0.0716633, -0.0703189, -0.0690028, -0.0677143, -0.066453, -0.065218, -0.0640088, -0.0628247, -0.0616652, -0.0605297, -0.0594176, -0.0583284, -0.0572615, -0.0562164, -0.0551927, -0.0541898, -0.0532073, -0.0522447, -0.0513015, -0.0503772, -0.0494716, -0.0485841, -0.0477143, -0.0468619, -0.0460264, -0.0452075, -0.0444047, -0.0436179, -0.0428465, -0.0420902, -0.0413488, -0.0406218, -0.0399091, -0.0392102, -0.0385248, -0.0378527, -0.0371936, -0.0365472, -0.0359132, -0.0352914, -0.0346815, -0.0340832, -0.0334963, -0.0329206, -0.0323557, -0.0318016, -0.0312579, -0.0307245, -0.0302011, -0.0296875, -0.0291835, -0.0286889, -0.0282036, -0.0277273, -0.0272598, -0.026801, -0.0263506, -0.0259086, -0.0254746, -0.0250487, -0.0246306, -0.0242201, -0.0238171, -0.0234214, -0.023033, -0.0226516, -0.0222771, -0.0219094, -0.0215483, -0.0211937, -0.0208455, -0.0205035, -0.0201676, -0.0198378, -0.0195138, -0.0191956, -0.0188831, -0.0185761, -0.0182745, -0.0179783, -0.0176873, -0.0174014, -0.0171206, -0.0168446, -0.0165736, -0.0163072, -0.0160455, -0.0157884, -0.0155357, -0.0152874, -0.0150434, -0.0148037, -0.0145681, -0.0143365, -0.014109, -0.0138853, -0.0136655, -0.0134495, -0.0132371, -0.0130284, -0.0128232, -0.0126216, -0.0124233, -0.0122285, -0.0120369, -0.0118485, -0.0116634, -0.0114814, -0.0113024, -0.0111264, -0.0109534, -0.0107833, -0.0106161, -0.0104516, -0.0102899, -0.0101309, -0.00997447, -0.00982069, -0.00966946, -0.00952073, -0.00937446, -0.00923061, -0.00908912, -0.00894997, -0.00881311, -0.00867849, -0.00854608, -0.00841584, -0.00828773, -0.0081617, -0.00803774, -0.00791579, -0.00779582, -0.00767781, -0.0075617, -0.00744748, -0.0073351, -0.00722454, -0.00711576, -0.00700874, -0.00690343, -0.00679982, -0.00669787, -0.00659755, -0.00649884, -0.0064017, -0.00630612, -0.00621206, -0.0061195, -0.00602841, -0.00593876, -0.00585054, -0.00576372, -0.00567827, -0.00559417, -0.00551139, -0.00542992, -0.00534974, -0.00527081, -0.00519313, -0.00511666, -0.0050414, -0.00496731, -0.00489437, -0.00482258, -0.00475191, -0.00468234, -0.00461385, -0.00454642, -0.00448004, -0.00441469, -0.00435036, -0.00428701, -0.00422465, -0.00416325, -0.0041028, -0.00404328, -0.00398467, -0.00392697, -0.00387015, -0.0038142, -0.00375911, -0.00370486, -0.00365144, -0.00359884, -0.00354704, -0.00349602, -0.00344579, -0.00339632, -0.0033476, -0.00329962, -0.00325236, -0.00320583, -0.00315999, -0.00311485, -0.00307039, -0.0030266, -0.00298347, -0.00294099, -0.00289915, -0.00285794, -0.00281734, -0.00277736, -0.00273797, -0.00269917, -0.00266095, -0.00262331, -0.00258622, -0.00254969, -0.0025137, -0.00247824, -0.00244332, -0.00240891, -0.00237501, -0.00234161, -0.00230871, -0.0022763, -0.00224436, -0.0022129, -0.0021819, -0.00215135, -0.00212126, -0.00209161, -0.0020624, -0.00203361, -0.00200525, -0.0019773, -0.00194976, -0.00192263, -0.00189589, -0.00186954, -0.00184357, -0.00181799, -0.00179278, -0.00176793, -0.00174345, -0.00171932, -0.00169554, -0.00167211, -0.00164902, -0.00162626, -0.00160383, -0.00158172, -0.00155994, -0.00153846, -0.0015173, -0.00149645, -0.00147589, -0.00145563, -0.00143566, -0.00141598, -0.00139658, -0.00137746, -0.00135861, -0.00134003, -0.00132172, -0.00130367, -0.00128587, -0.00126834, -0.00125105, -0.00123401, -0.00121721, -0.00120065, -0.00118432, -0.00116823, -0.00115236, -0.00113672, -0.00112131, -0.00110611, -0.00109112, -0.00107635, -0.00106179];\r\n    private addGOfMass(vecG: Vec4, p: Vec4, s: Rigid) {\r\n        let r = vec4Pool.pop().subset(p, s.position);\r\n        let r2 = 1 / r.normsqr();\r\n        let qr4 = this.lawIndex === -3 || this.lawIndex === -2 ? -s.mass * r2 * r2 : 0;\r\n        if (this.lawIndex === -2) qr4 *= r.norm();\r\n        if (this.lawIndex === -3 && this.gravitonMass !== 0) {\r\n            const scaleFactor = 1.5;\r\n            const x = r.norm() * scaleFactor;\r\n            let res = 0;\r\n            if (x >= 0.2 && x <= 5) {\r\n                const idx = (x - 0.2) * 100;\r\n                const index = Math.floor(idx);\r\n                res = this.data[this.data.length - 1];\r\n                if (index >= 0 && index < this.data.length - 1) {\r\n                    res = this.data[index] * (idx - index) + this.data[index + 1] * (index + 1 - idx);\r\n                }\r\n            } else if (x > 5) {\r\n                const rx = 1 / x;\r\n                res = Math.exp(-x) * Math.sqrt(rx) * rx * (-1.25331 - rx * (2.34996 + rx * 1.02811));\r\n            } else {\r\n                const rx = 1 / x;\r\n                res = rx * (0.5 - 2 * rx * rx) + x * (-0.865932 + Math.log(x)) * 0.125;\r\n            };\r\n            qr4 += res / r.norm() * this.gravitonMass;\r\n        }\r\n        vecG.addmulfs(r, qr4 * this.gain);\r\n        r.pushPool();\r\n        return;\r\n    }\r\n}"],"names":[],"mappings":"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"}