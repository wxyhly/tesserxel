{"version":3,"file":"narrowphase.js","sources":["../../../src/physics/narrowphase.ts"],"sourcesContent":["import { Rotor } from \"../math/algebra/rotor.js\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4.js\";\r\nimport { _COS30, _TAN30 } from \"../math/const.js\";\r\nimport { BroadPhaseList } from \"./broadPhase.js\";\r\nimport { epaDiff, gjkDiffTest, gjkOutDistance } from \"./gjk.js\";\r\nimport { rigid, Rigid } from \"./rigid.js\";\r\n\r\nexport interface Collision {\r\n    point: Vec4;\r\n    depth: number;\r\n    /** normal is defined from a to b */\r\n    normal: Vec4;\r\n    a: Rigid;\r\n    b?: Rigid;\r\n}\r\n// cache\r\nlet _vec4 = new Vec4;\r\nlet _r = new Rotor;\r\nexport class NarrowPhase {\r\n    collisionList: Collision[] = [];\r\n    /** max iteration for sdf methods in detectCollision */\r\n    maxIteration = 5;\r\n    clearCollisionList() {\r\n        this.collisionList = [];\r\n    }\r\n    run(list: BroadPhaseList) {\r\n        this.clearCollisionList();\r\n        for (let [a, b] of list) {\r\n            this.detectCollision(a, b);\r\n        }\r\n    }\r\n    detectCollision(rigidA: Rigid, rigidB: Rigid) {\r\n        let a = rigidA.geometry, b = rigidB.geometry;\r\n        if (a instanceof rigid.GlomicCavity) {\r\n            if (b instanceof rigid.Glome) return this.detectGlomeGlomiccavity(b, a);\r\n        }\r\n        if (a instanceof rigid.Glome) {\r\n            if (b instanceof rigid.Glome) return this.detectGlomeGlome(a, b);\r\n            if (b instanceof rigid.Plane) return this.detectGlomePlane(a, b);\r\n            if (b instanceof rigid.Convex) return this.detectConvexGlome(b, a);\r\n            if (b instanceof rigid.Spheritorus) return this.detectSpheritorusGlome(b, a);\r\n            if (b instanceof rigid.Torisphere) return this.detectTorisphereGlome(b, a);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerGlome(b, a);\r\n            if (b instanceof rigid.Ditorus) return this.detectDitorusGlome(b, a);\r\n            if (b instanceof rigid.GlomicCavity) return this.detectGlomeGlomiccavity(a, b);\r\n        }\r\n        if (a instanceof rigid.Plane) {\r\n            if (b instanceof rigid.Glome) return this.detectGlomePlane(b, a);\r\n            if (b instanceof rigid.Convex) return this.detectConvexPlane(b, a);\r\n            if (b instanceof rigid.Spheritorus) return this.detectSpheritorusPlane(b, a);\r\n            if (b instanceof rigid.Torisphere) return this.detectTorispherePlane(b, a);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerPlane(b, a);\r\n            if (b instanceof rigid.Ditorus) return this.detectDitorusPlane(b, a);\r\n        }\r\n        if (a instanceof rigid.Convex) {\r\n            if (b instanceof rigid.Plane) return this.detectConvexPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectConvexGlome(a, b);\r\n            if (b instanceof rigid.Convex) {\r\n                // (arg1,arg2) convert arg2 to arg1's coord\r\n                if (b.points.length > a.points.length)\r\n                    return this.detectConvexConvex(b, a);\r\n                return this.detectConvexConvex(a, b);\r\n            }\r\n        }\r\n        if (a instanceof rigid.Spheritorus) {\r\n            if (b instanceof rigid.Spheritorus) return this.detectSpheritorusSpheritorus(a, b);\r\n            if (b instanceof rigid.Torisphere) return this.detectTorisphereSpheritorus(b, a);\r\n            if (b instanceof rigid.Plane) return this.detectSpheritorusPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectSpheritorusGlome(a, b);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerSpheritorus(b, a);\r\n            if (b instanceof rigid.Ditorus) return this.detectDitorusSpheritorus(b, a);\r\n        }\r\n        if (a instanceof rigid.Torisphere) {\r\n            if (b instanceof rigid.Torisphere) return this.detectTorisphereTorisphere(a, b);\r\n            if (b instanceof rigid.Spheritorus) return this.detectTorisphereSpheritorus(a, b);\r\n            if (b instanceof rigid.Plane) return this.detectTorispherePlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectTorisphereGlome(a, b);\r\n            if (b instanceof rigid.Tiger) return this.detectTigerTorisphere(b, a);\r\n            if (b instanceof rigid.Ditorus) return this.detectDitorusTorisphere(b, a);\r\n\r\n        }\r\n        if (a instanceof rigid.Tiger) {\r\n            if (b instanceof rigid.Tiger) return this.detectTigerTiger(a, b);\r\n            if (b instanceof rigid.Spheritorus) return this.detectTigerSpheritorus(a, b);\r\n            if (b instanceof rigid.Torisphere) return this.detectTigerTorisphere(a, b);\r\n            if (b instanceof rigid.Ditorus) return this.detectDitorusTiger(b, a);\r\n            if (b instanceof rigid.Plane) return this.detectTigerPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectTigerGlome(a, b);\r\n        }\r\n        if (a instanceof rigid.Ditorus) {\r\n            if (b instanceof rigid.Plane) return this.detectDitorusPlane(a, b);\r\n            if (b instanceof rigid.Glome) return this.detectDitorusGlome(a, b);\r\n            if (b instanceof rigid.Spheritorus) return this.detectDitorusSpheritorus(a, b);\r\n            if (b instanceof rigid.Torisphere) return this.detectDitorusTorisphere(a, b);\r\n            if (b instanceof rigid.Tiger) return this.detectDitorusTiger(a, b);\r\n            if (b instanceof rigid.Ditorus) return this.detectDitorusDitorus(a, b);\r\n        }\r\n    }\r\n    private detectGlomeGlome(a: rigid.Glome, b: rigid.Glome) {\r\n        _vec4.subset(b.rigid.position, a.rigid.position);\r\n        let d = _vec4.norm();\r\n        let depth = a.radius + b.radius - d;\r\n        if (depth < 0) return null;\r\n        // todo: check whether clone can be removed\r\n        let normal = _vec4.divfs(d).clone();\r\n        let point: Vec4;\r\n        if (a.radius === b.radius) {\r\n            point = a.rigid.position.clone().adds(b.rigid.position).mulfs(0.5);\r\n        } else {\r\n            const totalinv = 1 / (a.radius + b.radius);\r\n            point = a.rigid.position.mulf(totalinv * b.radius).addmulfs(b.rigid.position, totalinv * a.radius);\r\n        }\r\n        this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectGlomeGlomiccavity(a: rigid.Glome, b: rigid.GlomicCavity) {\r\n        _vec4.subset(b.rigid.position, a.rigid.position);\r\n        let d = _vec4.norm();\r\n        let depth = a.radius - b.radius + d;\r\n        if (depth < 0) return null;\r\n        // todo: check whether clone can be removed\r\n        let normal = _vec4.divf(-d);\r\n        let point = b.rigid.position.clone().addmulfs(normal, b.radius + depth / 2);\r\n\r\n        this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectGlomePlane(a: rigid.Glome, b: rigid.Plane) {\r\n        let depth = a.radius - (a.rigid.position.dot(b.normal) - b.offset);\r\n        if (depth < 0) return null;\r\n        let point = a.rigid.position.clone().addmulfs(b.normal, depth * 0.5 - a.radius);\r\n        this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectConvexPlane(a: rigid.Convex, b: rigid.Plane) {\r\n        // convert plane to convex's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        for (let v of a.points) {\r\n            let depth = -(v.dot(normal) + offset);\r\n            if (depth < 0) continue;\r\n            let point = v.clone().rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth / 2);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n    private detectConvexGlome(a: rigid.Convex, b: rigid.Glome) {\r\n        _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        if (a._cachePoints) {\r\n            for (let p = 0, l = a.points.length; p < l; p++) {\r\n                a._cachePoints[p].subset(a.points[p], _vec4);\r\n            }\r\n        } else {\r\n            a._cachePoints = a.points.map(p => vec4Pool.pop().subset(p, _vec4));\r\n        }\r\n        let result = gjkOutDistance(a._cachePoints);\r\n        if (result.normal && result.distance) {\r\n\r\n            let depth = b.radius - result.distance;\r\n            if (depth < 0) return;\r\n            result.normal.rotates(a.rigid.rotation);\r\n            let point = vec4Pool.pop().copy(b.rigid.position).addmulfs(result.normal, -(b.radius + result.distance) * 0.5)\r\n            this.collisionList.push({ point, normal: result.normal, depth, a: a.rigid, b: b.rigid });\r\n        }\r\n        // todo: EPA\r\n    }\r\n    private detectConvexConvex(a: rigid.Convex, b: rigid.Convex) {\r\n        // calculate in a's frame\r\n        _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        if (!isFinite(_vec4.norm1() + _r.l.norm() + _r.r.norm())) {\r\n            console.assert(isFinite(_vec4.norm1() + _r.l.norm() + _r.r.norm()), \"oxoor\");\r\n        }\r\n        if (b._cachePoints) {\r\n            for (let p = 0, l = b.points.length; p < l; p++) {\r\n                b._cachePoints[p].copy(b.points[p]).rotates(_r).adds(_vec4);\r\n            }\r\n        } else {\r\n            b._cachePoints = b.points.map(\r\n                p => vec4Pool.pop().copy(p).rotates(_r).adds(_vec4)\r\n            );\r\n        }\r\n        // gjk intersection test\r\n        let inter = gjkDiffTest(a.points, b._cachePoints);\r\n        if (!inter.normals) return;\r\n        // epa collision generation\r\n        let result = epaDiff(a.points, b._cachePoints, inter as {\r\n            simplex1: Vec4[];\r\n            simplex2: Vec4[];\r\n            reverseOrder: boolean;\r\n            normals: Vec4[];\r\n        });\r\n        if (result?.normal) {\r\n            let depth = - result.distance;\r\n            let [a1, b1, c1, d1] = result.simplex1;\r\n            let [a2, b2, c2, d2] = result.simplex2;\r\n            let point = vec4Pool.pop();\r\n            if (a1 === b1 && a1 === c1 && a1 === d1) {\r\n                // vertex - ?\r\n                point.copy(a1).addmulfs(result.normal, result.distance * 0.5);\r\n            } else if (a2 === b2 && a2 === c2 && a2 === d2) {\r\n                // ? - vertex\r\n                point.copy(a2).addmulfs(result.normal, -result.distance * 0.5);\r\n            } else {\r\n                let A: Vec4[] = [], B: Vec4[] = [];\r\n                for (let i of result.simplex1) if (A.indexOf(i) === -1) A.push(i);\r\n                for (let i of result.simplex2) if (B.indexOf(i) === -1) B.push(i);\r\n                if ((A.length === 2 && B.length === 3) || (B.length === 2 && A.length === 3)) {\r\n                    // edge - face || face - edge\r\n                    let deltaD = result.distance * 0.5;\r\n                    if (B.length === 2) {\r\n                        let temp = A; A = B; B = temp;\r\n                        deltaD = -deltaD;\r\n                    }\r\n                    let p1a = _vec4.subset(B[0], A[0]);\r\n                    let p1p2 = vec4Pool.pop().subset(A[1], A[0]);\r\n                    let ab = vec4Pool.pop().subset(B[1], B[0]);\r\n                    let ac = vec4Pool.pop().subset(B[2], B[0]);\r\n                    let _a1 = p1p2.dot(p1a), _b1 = p1p2.dot(ab), _c1 = p1p2.dot(ac), _d1 = p1p2.dot(p1p2);\r\n                    let _a2 = ab.dot(p1a), _b2 = ab.dot(ab), _c2 = ab.dot(ac), _d2 = _b1;\r\n                    let _a3 = ac.dot(p1a), _b3 = _c2, _c3 = ac.dot(ac), _d3 = _c1;\r\n\r\n                    let det = (_b3 * _c2 - _b2 * _c3) * _d1 + (- _b3 * _c1 + _b1 * _c3) * _d2 + (_b2 * _c1 - _b1 * _c2) * _d3;\r\n                    if (det === 0) return;\r\n                    let detInv = 1 / det;\r\n                    let s = ((_a3 * _b2 - _a2 * _b3) * _c1 + (- _a3 * _b1 + _a1 * _b3) * _c2 + (_a2 * _b1 - _a1 * _b2) * _c3) * detInv;\r\n\r\n                    point.copy(A[0]).addmulfs(p1p2, s).addmulfs(result.normal, deltaD);\r\n                }\r\n            }\r\n            // if (!isFinite(point.norm1() + result.normal.norm1() + depth)) { console.warn(\"wrong convex collision numeric result\"); return; }\r\n            this.collisionList.push({\r\n                point: point.rotates(a.rigid.rotation).adds(a.rigid.position),\r\n                normal: result.normal.rotates(a.rigid.rotation),\r\n                depth, a: a.rigid, b: b.rigid\r\n            });\r\n        }\r\n    }\r\n    private detectSpheritorusPlane(a: rigid.Spheritorus, b: rigid.Plane) {\r\n        // convert plane to st's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len = Math.hypot(normal.x, normal.w);\r\n        let depth = a.minorRadius - offset + len * a.majorRadius;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (normal.x === 0 && normal.w === 0) {\r\n            // deal perpendicular case: reduce contact to bottom center point\r\n            let point = a.rigid.position.clone().addmulfs(b.normal, (a.minorRadius + offset) * 0.5);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            // point on circle\r\n            let point = new Vec4(normal.x, 0, 0, normal.w).mulfs(-a.majorRadius / len);\r\n            // then to world coord and add normal\r\n            point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n    private detectSpheritorusGlome(a: rigid.Spheritorus, b: rigid.Glome) {\r\n        // convert glome to st's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let xw = p.x * p.x + p.w * p.w;\r\n        let yz = p.y * p.y + p.z * p.z;\r\n        let sqrtxw = Math.sqrt(xw);\r\n        let distance = Math.sqrt(a.majorRadius * a.majorRadius + xw + yz - 2 * sqrtxw * a.majorRadius);\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (xw === 0) {\r\n            // deal perpendicular case: reduce contact to center point\r\n            let k = 1.0 - (b.radius - depth * 0.5) / distance;\r\n            let point = new Vec4(0, k * p.y, k * p.z).rotates(a.rigid.rotation);\r\n            let normal = point.clone().norms();\r\n            point.adds(a.rigid.position);\r\n            this.collisionList.push({ point, normal, depth: depth / Math.sqrt(yz) * distance, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            let k = a.majorRadius / sqrtxw;\r\n            let point = new Vec4(p.x * k, 0, 0, p.w * k).rotates(a.rigid.rotation);\r\n            let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n            point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n            this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n\r\n    private detectSpheritorusSpheritorus(a: rigid.Spheritorus, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            let needContinue = false;\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k = a.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) { needContinue = true; break; }\r\n                // project to a\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) { needContinue = true; break; }\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) { break; }\r\n            }\r\n            if (needContinue) continue;\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            // console.log(converge);\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n        vec4Pool.push(...initialPB);\r\n    }\r\n\r\n    private detectTorispherePlane(a: rigid.Torisphere, b: rigid.Plane) {\r\n        // convert plane to ts's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len = Math.hypot(normal.x, normal.z, normal.w);\r\n        let depth = a.minorRadius - offset + len * a.majorRadius;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (normal.x === 0 && normal.w === 0 && normal.z === 0) {\r\n            // deal perpendicular case: reduce contact to bottom center point\r\n            let point = a.rigid.position.clone().addmulfs(b.normal, (a.minorRadius + offset) * 0.5);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            // point on sphere\r\n            let point = new Vec4(normal.x, 0, normal.z, normal.w).mulfs(-a.majorRadius / len);\r\n            // then to world coord and add normal\r\n            point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n            this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n    private detectTorisphereGlome(a: rigid.Torisphere, b: rigid.Glome) {\r\n        // convert glome to st's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let xzw = p.x * p.x + p.z * p.z + p.w * p.w;\r\n        let y = p.y * p.y;\r\n        let sqrtxzw = Math.sqrt(xzw);\r\n        let distance = Math.sqrt(a.majorRadius * a.majorRadius + xzw + y - 2 * sqrtxzw * a.majorRadius);\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        if (xzw === 0) {\r\n            // deal perpendicular case: reduce contact to center point\r\n            let k = 1.0 - (b.radius - depth * 0.5) / distance;\r\n            let point = new Vec4(0, k * p.y).rotates(a.rigid.rotation);\r\n            let normal = point.clone().norms();\r\n            point.adds(a.rigid.position);\r\n            this.collisionList.push({ point, normal, depth: depth / Math.abs(p.y) * distance, a: a.rigid, b: b.rigid });\r\n        } else {\r\n            let k = a.majorRadius / sqrtxzw;\r\n            let point = new Vec4(p.x * k, 0, p.z * k, p.w * k).rotates(a.rigid.rotation);\r\n            let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n            point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n            this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n        }\r\n    }\r\n\r\n    private detectTorisphereTorisphere(a: rigid.Torisphere, b: rigid.Torisphere) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp = b.majorRadius * _TAN30;\r\n        // choose 4 initial points (regular tetrahedron) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp, 0, temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, -temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, temp, -temp),\r\n            vec4Pool.pop().set(temp, 0, -temp, -temp),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k = a.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to a\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k = b.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n\r\n    private detectTorisphereSpheritorus(a: rigid.Torisphere, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k = a.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to a\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) break;\r\n            }\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectTigerPlane(a: rigid.Tiger, b: rigid.Plane) {\r\n        // convert plane to ts's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len1 = Math.hypot(normal.x, normal.y);\r\n        let len2 = Math.hypot(normal.z, normal.w);\r\n        let depth = a.minorRadius - offset + len1 * a.majorRadius1 + len2 * a.majorRadius2;\r\n        if (depth < 0) return;\r\n        // point on flat torus\r\n        let s1 = len1 ? -a.majorRadius1 / len1 : 0;\r\n        let s2 = len2 ? -a.majorRadius2 / len2 : 0;\r\n        let point = new Vec4(normal.x * s1, normal.y * s1, normal.z * s2, normal.w * s2);\r\n        // then to world coord and add normal\r\n        point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n        this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectTigerGlome(a: rigid.Tiger, b: rigid.Glome) {\r\n        // convert glome to st's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let xy = p.x * p.x + p.y * p.y;\r\n        let zw = p.z * p.z + p.w * p.w;\r\n        let sqrtxy = Math.sqrt(xy);\r\n        let sqrtzw = Math.sqrt(zw);\r\n        let distance = Math.sqrt(\r\n            a.majorRadius1 * a.majorRadius1 + a.majorRadius2 * a.majorRadius2\r\n            + xy + zw - 2 * (sqrtxy * a.majorRadius1 + sqrtzw * a.majorRadius2)\r\n        );\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        if (depth < 0) return;\r\n        // find support of circle along normal\r\n        let k1 = sqrtxy ? a.majorRadius1 / sqrtxy : 0;\r\n        let k2 = sqrtzw ? a.majorRadius2 / sqrtzw : 0;\r\n        let point = new Vec4(p.x * k1, p.y * k1, p.z * k2, p.w * k2).rotates(a.rigid.rotation);\r\n        let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n        point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n        this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectTigerTiger(a: rigid.Tiger, b: rigid.Tiger) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp1 = b.majorRadius1;\r\n        let temp2 = b.majorRadius2;\r\n        // choose 8 initial points (w1=0.5,w2=1/4+1/4i) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp1, 0, temp2, 0),\r\n            vec4Pool.pop().set(temp1, 0, -temp2, 0),\r\n            vec4Pool.pop().set(-temp1, 0, temp2, 0),\r\n            vec4Pool.pop().set(-temp1, 0, -temp2, 0),\r\n            vec4Pool.pop().set(0, temp1, 0, temp2),\r\n            vec4Pool.pop().set(0, temp1, 0, -temp2),\r\n            vec4Pool.pop().set(0, -temp1, 0, temp2),\r\n            vec4Pool.pop().set(0, -temp1, 0, -temp2),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k1 = a.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = a.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to a\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                k1 = b.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                k2 = b.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to b\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dy = Math.abs(newP.y - p.y);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dy + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectTigerTorisphere(a: rigid.Tiger, b: rigid.Torisphere) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp = b.majorRadius * _TAN30;\r\n        // choose 4 initial points (regular tetrahedron) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp, 0, temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, -temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, temp, -temp),\r\n            vec4Pool.pop().set(temp, 0, -temp, -temp),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k1 = a.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = a.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to a\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k = b.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectTigerSpheritorus(a: rigid.Tiger, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let k1 = a.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = a.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to a\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectDitorusPlane(a: rigid.Ditorus, b: rigid.Plane) {\r\n        // convert plane to ts's coord\r\n        let normal = _vec4.copy(b.normal).rotatesconj(a.rigid.rotation);\r\n        let offset = a.rigid.position.dot(b.normal) - b.offset;\r\n        let len1 = Math.hypot(normal.x, normal.y);\r\n        let len2 = Math.hypot(normal.z, len1);\r\n        let depth = a.minorRadius - offset + len1 * a.majorRadius + len2 * a.middleRadius;\r\n        if (depth < 0) return;\r\n        // point on torus\r\n        let s2 = len2 ? -a.middleRadius / len2 : 0;\r\n        let s1 = (len1 ? -a.majorRadius / len1 : 0) + s2;\r\n\r\n        let point = new Vec4(normal.x * s1, normal.y * s1, normal.z * s2, 0);\r\n        // then to world coord and add normal\r\n        point.rotates(a.rigid.rotation).adds(a.rigid.position).addmulfs(b.normal, depth * 0.5 - a.minorRadius);\r\n        this.collisionList.push({ point, normal: b.normal.neg(), depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectDitorusGlome(a: rigid.Ditorus, b: rigid.Glome) {\r\n        // convert glome to dt's coord\r\n        let p = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let sqrtxy = Math.hypot(p.x, p.y);\r\n        let d1 = sqrtxy - a.majorRadius; // distance to circle in xy plane\r\n        let d13 = Math.hypot(d1, p.z); // distance to circle in xyz cell\r\n        let d2 = d13 - a.middleRadius; // distance to torus in xyz cell\r\n        let distance = Math.sqrt(d2 * d2 + p.w * p.w); // distance to torus in R4\r\n        let depth = a.minorRadius + b.radius - distance;\r\n        let kz = a.middleRadius / d13;\r\n        let kxy = a.majorRadius / sqrtxy;\r\n        kxy += (1 - kxy) * kz;\r\n        if (depth < 0) return;\r\n        let point = new Vec4(p.x * kxy, p.y * kxy, p.z * kz, 0).rotates(a.rigid.rotation);\r\n        let normal = point.adds(a.rigid.position).sub(b.rigid.position).norms().negs();\r\n        point.addmulfs(normal, a.minorRadius - depth * 0.5);\r\n        this.collisionList.push({ point, normal, depth, a: a.rigid, b: b.rigid });\r\n    }\r\n    private detectDitorusSpheritorus(a: rigid.Ditorus, b: rigid.Spheritorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let tempa = b.majorRadius * 0.5;\r\n        let tempb = b.majorRadius * _COS30;\r\n        // choose 3 initial points (120 degree) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(tempa, 0, 0, tempb),\r\n            vec4Pool.pop().set(tempa, 0, 0, -tempb),\r\n            vec4Pool.pop().set(-b.majorRadius)\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let sqrtxy = Math.hypot(newP.x, newP.y);\r\n                let d1 = sqrtxy - a.majorRadius; // distance to circle in xy plane\r\n                let d13 = Math.hypot(d1, newP.z); // distance to circle in xyz cell\r\n                let kz = a.middleRadius / d13;\r\n                if (!isFinite(kz)) break;\r\n                let kxy = a.majorRadius / sqrtxy;\r\n                if (!isFinite(kxy)) break;\r\n                kxy += (1 - kxy) * kz;\r\n                // project to a\r\n                newP.set(newP.x * kxy, newP.y * kxy, newP.z * kz, 0);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k = b.majorRadius / Math.hypot(newP.x, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, 0, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n    private detectDitorusTorisphere(a: rigid.Ditorus, b: rigid.Torisphere) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp = b.majorRadius * _TAN30;\r\n        // choose 4 initial points (regular tetrahedron) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp, 0, temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, -temp, temp),\r\n            vec4Pool.pop().set(-temp, 0, temp, -temp),\r\n            vec4Pool.pop().set(temp, 0, -temp, -temp),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let sqrtxy = Math.hypot(newP.x, newP.y);\r\n                let d1 = sqrtxy - a.majorRadius; // distance to circle in xy plane\r\n                let d13 = Math.hypot(d1, newP.z); // distance to circle in xyz cell\r\n                let kz = a.middleRadius / d13;\r\n                if (!isFinite(kz)) break;\r\n                let kxy = a.majorRadius / sqrtxy;\r\n                if (!isFinite(kxy)) break;\r\n                kxy += (1 - kxy) * kz;\r\n                // project to a\r\n                newP.set(newP.x * kxy, newP.y * kxy, newP.z * kz, 0);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k = b.majorRadius / Math.hypot(newP.x, newP.z, newP.w);\r\n                if (!isFinite(k)) break;\r\n                // project to b\r\n                newP.set(newP.x * k, 0, newP.z * k, newP.w * k);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n\r\n    private detectDitorusTiger(a: rigid.Ditorus, b: rigid.Tiger) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp1 = b.majorRadius1;\r\n        let temp2 = b.majorRadius2;\r\n        // choose 8 initial points (w1=0.5,w2=1/4+1/4i) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp1, 0, temp2, 0),\r\n            vec4Pool.pop().set(temp1, 0, -temp2, 0),\r\n            vec4Pool.pop().set(-temp1, 0, temp2, 0),\r\n            vec4Pool.pop().set(-temp1, 0, -temp2, 0),\r\n            vec4Pool.pop().set(0, temp1, 0, temp2),\r\n            vec4Pool.pop().set(0, temp1, 0, -temp2),\r\n            vec4Pool.pop().set(0, -temp1, 0, temp2),\r\n            vec4Pool.pop().set(0, -temp1, 0, -temp2),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let sqrtxy = Math.hypot(newP.x, newP.y);\r\n                let d1 = sqrtxy - a.majorRadius; // distance to circle in xy plane\r\n                let d13 = Math.hypot(d1, newP.z); // distance to circle in xyz cell\r\n                let kz = a.middleRadius / d13;\r\n                if (!isFinite(kz)) break;\r\n                let kxy = a.majorRadius / sqrtxy;\r\n                if (!isFinite(kxy)) break;\r\n                kxy += (1 - kxy) * kz;\r\n                // project to a\r\n                newP.set(newP.x * kxy, newP.y * kxy, newP.z * kz, 0);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                let k1 = b.majorRadius1 / Math.hypot(newP.x, newP.y);\r\n                if (!isFinite(k1)) break;\r\n                let k2 = b.majorRadius2 / Math.hypot(newP.z, newP.w);\r\n                if (!isFinite(k2)) break;\r\n                // project to b\r\n                newP.set(newP.x * k1, newP.y * k1, newP.z * k2, newP.w * k2);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dy = Math.abs(newP.y - p.y);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                let dw = Math.abs(newP.w - p.w);\r\n                p.copy(newP);\r\n                if (dx + dy + dz + dw < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n\r\n    private detectDitorusDitorus(a: rigid.Ditorus, b: rigid.Ditorus) {\r\n        // position and rotation are b in a's frame \r\n        let position = _vec4.subset(b.rigid.position, a.rigid.position).rotatesconj(a.rigid.rotation);\r\n        let rotation = _r.copy(b.rigid.rotation).mulslconj(a.rigid.rotation);\r\n        let temp1 = b.majorRadius;\r\n        let temp2 = b.middleRadius;\r\n        // choose 8 initial points (w1=0.5,w2=1/4+1/4i) on b for iteration\r\n        let initialPB = [\r\n            vec4Pool.pop().set(temp1 + temp2),\r\n            vec4Pool.pop().set(temp1 - temp2),\r\n            vec4Pool.pop().set(-temp1 + temp2),\r\n            vec4Pool.pop().set(-temp1 - temp2),\r\n            vec4Pool.pop().set(0, temp1, temp2),\r\n            vec4Pool.pop().set(0, temp1, -temp2),\r\n            vec4Pool.pop().set(0, -temp1, temp2),\r\n            vec4Pool.pop().set(0, -temp1, -temp2),\r\n        ];\r\n        let newP = vec4Pool.pop();\r\n        let prevPInA = vec4Pool.pop();\r\n        let epsilon = Math.min(a.minorRadius, b.minorRadius) * 0.01;\r\n        for (let p of initialPB) {\r\n            // newP and p are in b\r\n            newP.copy(p);\r\n            for (let iterationCount = 0; iterationCount < this.maxIteration; iterationCount++) {\r\n                // from b to a\r\n                newP.rotates(rotation).adds(position);\r\n                let sqrtxy = Math.hypot(newP.x, newP.y);\r\n                let d1 = sqrtxy - a.majorRadius; // distance to circle in xy plane\r\n                let d13 = Math.hypot(d1, newP.z); // distance to circle in xyz cell\r\n                let kz = a.middleRadius / d13;\r\n                if (!isFinite(kz)) break;\r\n                let kxy = a.majorRadius / sqrtxy;\r\n                if (!isFinite(kxy)) break;\r\n                kxy += (1 - kxy) * kz;\r\n                // project to a\r\n                newP.set(newP.x * kxy, newP.y * kxy, newP.z * kz, 0);\r\n                prevPInA.copy(newP);\r\n                // from a to b\r\n                newP.subs(position).rotatesconj(rotation);\r\n                sqrtxy = Math.hypot(newP.x, newP.y);\r\n                d1 = sqrtxy - a.majorRadius; // distance to circle in xy plane\r\n                d13 = Math.hypot(d1, newP.z); // distance to circle in xyz cell\r\n                kz = a.middleRadius / d13;\r\n                if (!isFinite(kz)) break;\r\n                kxy = a.majorRadius / sqrtxy;\r\n                if (!isFinite(kxy)) break;\r\n                kxy += (1 - kxy) * kz;\r\n                // project to b\r\n                newP.set(newP.x * kxy, newP.y * kxy, newP.z * kz, 0);\r\n                // test if iteration still moves\r\n                let dx = Math.abs(newP.x - p.x);\r\n                let dy = Math.abs(newP.y - p.y);\r\n                let dz = Math.abs(newP.z - p.z);\r\n                p.copy(newP);\r\n                if (dx + dy + dz < epsilon) break;\r\n            }\r\n            // console.log(converge);\r\n            // else there might be collision\r\n            // transform newP to a, then compare newP and prevPInA\r\n            newP.rotates(rotation).adds(position);\r\n            let normal = newP.sub(prevPInA);\r\n            let depth = a.minorRadius + b.minorRadius - normal.norm();\r\n            if (depth < 0) continue;\r\n            normal.rotates(a.rigid.rotation).norms();\r\n            let point = newP.rotate(a.rigid.rotation).adds(a.rigid.position);\r\n            point.addmulfs(normal, -b.minorRadius + depth * 0.5);\r\n            this.collisionList.push({\r\n                normal, point, depth, a: a.rigid, b: b.rigid\r\n            })\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}