{"version":3,"file":"rigid.js","sources":["../../../src/physics/rigid.ts"],"sourcesContent":["import { Obj4 } from \"../math/algebra/affine.js\";\r\nimport { Bivec, bivecPool } from \"../math/algebra/bivec.js\";\r\nimport { Matrix } from \"../math/algebra/matrix.js\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4.js\";\r\nimport { AABB } from \"../math/geometry/primitive.js\";\r\nimport { Quaternion, Rotor, Spline } from \"../math/math.js\";\r\nimport { Material, mulBivec } from \"./engine.js\";\r\n\r\nexport type RigidType = \"still\" | \"passive\" | \"active\";\r\ninterface SimpleRigidDescriptor {\r\n    /** mass set to 0 to specify non-active rigid */\r\n    mass: number | null;\r\n    /** RigidGeometry instance cannot be shared between Rigid instances */\r\n    geometry: RigidGeometry;\r\n    material: Material;\r\n    type?: RigidType;\r\n    /** for tracing debug */\r\n    label?: string;\r\n};\r\n/** Subrigids should not be added into scene repetively.\r\n * Subrigids's positions cannot be modified after union created\r\n */\r\ntype UnionRigidDescriptor = Rigid[];\r\n/** all properities hold by class Rigid should not be modified\r\n *  exceptions are position/rotation and (angular)velocity.\r\n *  pass RigidDescriptor into constructor instead.\r\n *  */\r\nexport class Rigid extends Obj4 {\r\n    // Rigid extends Obj4, it has position and rotation, but no scale\r\n    declare scale: undefined;\r\n    material: Material;\r\n    // Caution: Two Rigids cannot share the same RigidGeometry instance\r\n    geometry: RigidGeometry;\r\n    type: RigidType;\r\n    mass: number | undefined;\r\n    invMass: number;\r\n    // inertia is a 6x6 Matrix for angularVelocity -> angularMomentum\r\n    // this is diagonalbMatrix under principal axes coordinates\r\n    inertia: Bivec | undefined = new Bivec();\r\n    invInertia: Bivec | undefined = new Bivec();\r\n    inertiaIsotroy: boolean; // whether using scalar inertia\r\n    // only apply to active type object\r\n    sleep: boolean = false;\r\n    // for tracing debug\r\n    label?: string;\r\n\r\n    velocity: Vec4 = new Vec4();\r\n    angularVelocity: Bivec = new Bivec();\r\n    force: Vec4 = new Vec4();\r\n    torque: Bivec = new Bivec();\r\n    acceleration: Vec4 = new Vec4();\r\n    angularAcceleration: Bivec = new Bivec();\r\n    constructor(param: SimpleRigidDescriptor | UnionRigidDescriptor) {\r\n        super();\r\n        if ((param as UnionRigidDescriptor).length) {\r\n            this.geometry = new rigid.Union(param as UnionRigidDescriptor);\r\n        } else {\r\n            let option = param as SimpleRigidDescriptor;\r\n            this.geometry = option.geometry;\r\n            this.mass = isFinite(option.mass as number) ? option.mass! : 0;\r\n            this.type = option.type ?? \"active\";\r\n            this.invMass = this.mass > 0 && (this.type === \"active\") ? 1 / this.mass : 0;\r\n            this.material = option.material;\r\n            this.label = option.label;\r\n        }\r\n        this.geometry.initialize(this);\r\n    }\r\n\r\n    getlinearVelocity(out: Vec4, point: Vec4) {\r\n        if (this.type === \"still\") return out.set();\r\n        let relPosition = out.subset(point, this.position);\r\n        return out.dotbset(relPosition, this.angularVelocity).adds(this.velocity);\r\n    }\r\n    getMomentum(out: Vec4) {\r\n        if (this.type === \"still\") return out.set();\r\n        return out.copy(this.velocity).mulfs(this.mass);\r\n    }\r\n    /** type: \"J\" for total, type: \"S\" for Spin, type: \"L\" for Orbital, */\r\n    getAngularMomentum(out: Bivec, point = new Vec4, type: \"J\" | \"S\" | \"L\" = \"J\") {\r\n        const v = vec4Pool.pop();\r\n        const p = vec4Pool.pop().copy(this.position);\r\n        if (point) p.subs(point);\r\n        if (type === \"J\" || type === \"L\") {\r\n            out.wedgevvset(p, this.getMomentum(v));\r\n        } else {\r\n            out.set();\r\n        }\r\n        if (type === \"L\") return out;\r\n        p.pushPool();\r\n        const localW = bivecPool.pop();\r\n        const localIW = bivecPool.pop();\r\n        localW.rotateconjset(this.angularVelocity, this.rotation);\r\n        mulBivec(localIW, this.inertia, localW);\r\n        v.pushPool();\r\n        return out.adds(localIW.rotates(this.rotation));\r\n    }\r\n    getLinearKineticEnergy() {\r\n        return this.velocity.normsqr() * this.mass / 2;\r\n    }\r\n    getAngularKineticEnergy() {\r\n        const localW = bivecPool.pop();\r\n        const localIW = bivecPool.pop();\r\n        localW.rotateset(this.angularVelocity, this.rotation);\r\n        const k = localW.dot(mulBivec(localIW, this.inertia, localW)) / 2;\r\n        localIW.pushPool(); localIW.pushPool();\r\n        return k;\r\n    }\r\n    getKineticEnergy() {\r\n        return this.getLinearKineticEnergy() + this.getAngularKineticEnergy();\r\n    }\r\n}\r\n/** internal type for union rigid geometry */\r\nexport interface SubRigid extends Rigid {\r\n    localCoord?: Obj4;\r\n    parent?: Rigid;\r\n}\r\nexport abstract class RigidGeometry {\r\n    rigid: Rigid;\r\n    obb: AABB;\r\n    aabb: AABB;\r\n    boundingGlome: number;\r\n    initialize(rigid: Rigid) {\r\n        this.rigid = rigid;\r\n        this.initializeMassInertia(rigid);\r\n        if (!rigid.mass && rigid.type === \"active\") rigid.type = \"still\";\r\n        if (rigid.inertia) {\r\n            rigid.invInertia.xy = 1 / rigid.inertia.xy;\r\n            if (!rigid.inertiaIsotroy) {\r\n                rigid.invInertia.xz = 1 / rigid.inertia.xz;\r\n                rigid.invInertia.yz = 1 / rigid.inertia.yz;\r\n                rigid.invInertia.xw = 1 / rigid.inertia.xw;\r\n                rigid.invInertia.yw = 1 / rigid.inertia.yw;\r\n                rigid.invInertia.zw = 1 / rigid.inertia.zw;\r\n            } else {\r\n                rigid.invInertia.xz = rigid.invInertia.xy;\r\n                rigid.invInertia.yz = rigid.invInertia.xy;\r\n                rigid.invInertia.xw = rigid.invInertia.xy;\r\n                rigid.invInertia.yw = rigid.invInertia.xy;\r\n                rigid.invInertia.zw = rigid.invInertia.xy;\r\n                rigid.inertia.xz = rigid.inertia.xy;\r\n                rigid.inertia.yz = rigid.inertia.xy;\r\n                rigid.inertia.xw = rigid.inertia.xy;\r\n                rigid.inertia.yw = rigid.inertia.xy;\r\n                rigid.inertia.zw = rigid.inertia.xy;\r\n            }\r\n        }\r\n    };\r\n    abstract initializeMassInertia(rigid: Rigid): void;\r\n}\r\nexport namespace rigid {\r\n    export class Union extends RigidGeometry {\r\n        components: SubRigid[];\r\n        constructor(components: Rigid[]) { super(); this.components = components; }\r\n        // todo: union gen\r\n        initializeMassInertia(rigid: Rigid) {\r\n            // set union rigid's position at mass center of rigids\r\n            rigid.position.set();\r\n            rigid.mass = 0;\r\n            for (let r of this.components) {\r\n                if (r.mass === undefined) console.error(\"Union Rigid Geometry cannot contain a still rigid.\");\r\n                rigid.position.addmulfs(r.position, r.mass!);\r\n                rigid.mass += r.mass!;\r\n            }\r\n            rigid.invMass = 1 / rigid.mass;\r\n            rigid.position.mulfs(rigid.invMass);\r\n            // update rigids position to relative frame\r\n            for (let r of this.components) {\r\n                r.localCoord = new Obj4().copyObj4(r);\r\n                r.localCoord.position.subs(rigid.position);\r\n                r.parent = rigid;\r\n            }\r\n            // todo\r\n            // let inertia = new Matrix(6,6);\r\n            rigid.inertia.xy = 1;\r\n            rigid.inertiaIsotroy = true;\r\n            rigid.type = \"active\";\r\n        };\r\n        updateCoord() {\r\n            for (let r of this.components) {\r\n                r.position.copy(r.localCoord.position).rotates(this.rigid.rotation).adds(this.rigid.position);\r\n                r.rotation.copy(r.localCoord.rotation).mulsl(this.rigid.rotation);\r\n            }\r\n        }\r\n    }\r\n    export class Glome extends RigidGeometry {\r\n        radius: number = 1;\r\n        radiusSqr: number = 1;\r\n        inertiaCoefficient: number;\r\n        constructor(radius: number, inertiaCoefficient = 0.25) {\r\n            super();\r\n            this.radius = radius;\r\n            this.boundingGlome = radius;\r\n            this.radiusSqr = radius * radius;\r\n            this.inertiaCoefficient = inertiaCoefficient;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            rigid.inertiaIsotroy = true;\r\n            rigid.inertia.xy = rigid.mass * this.radiusSqr * this.inertiaCoefficient;\r\n        }\r\n    }\r\n    export class Convex extends RigidGeometry {\r\n        points: Vec4[];\r\n        _cachePoints: Vec4[];\r\n        constructor(points: Vec4[]) {\r\n            super();\r\n            this.points = points;\r\n            this.obb = AABB.fromPoints(points);\r\n            this.boundingGlome = 0;\r\n            for (let i of points) {\r\n                this.boundingGlome = Math.max(this.boundingGlome, i.normsqr());\r\n            }\r\n            this.boundingGlome = Math.sqrt(this.boundingGlome);\r\n        }\r\n        private getPointsInertia(points: Vec4[], mass: number) {\r\n            const inertiaMat = new Matrix(6);\r\n            const tempMat = new Matrix(6);\r\n            for (const p of points) {\r\n                const r11 = p.x * p.x;\r\n                const r12 = p.x * p.y;\r\n                const r13 = p.x * p.z;\r\n                const r14 = p.x * p.w;\r\n                const r22 = p.y * p.y;\r\n                const r23 = p.y * p.z;\r\n                const r24 = p.y * p.w;\r\n                const r33 = p.z * p.z;\r\n                const r34 = p.z * p.w;\r\n                const r44 = p.w * p.w;\r\n                tempMat.setElements(\r\n                    r11 + r22, r23, r24, -r13, -r14, 0,\r\n                    r23, r11 + r33, r34, r12, 0, -r14,\r\n                    r24, r34, r44 + r11, 0, r12, r13,\r\n                    -r13, r12, 0, r22 + r33, r34, -r24,\r\n                    -r14, 0, r12, r34, r44 + r22, r23,\r\n                    0, -r14, r13, -r24, r23, r33 + r44\r\n                ).ts();\r\n                inertiaMat.adds(tempMat);\r\n            }\r\n            return inertiaMat.mulfs(mass / points.length);\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            // todo inertia calc\r\n            const tempMat = new Matrix(6);\r\n            // const Rt = Rotor.rand();\r\n\r\n            const clinicMat = Matrix.fromArray([\r\n                [1, 0, 0, 0, 0, 1],\r\n                [0, 1, 0, 0, -1, 0],\r\n                [0, 0, 1, 1, 0, 0],\r\n                [1, 0, 0, 0, 0, -1],\r\n                [0, 1, 0, 0, 1, 0],\r\n                [0, 0, 1, -1, 0, 0],\r\n            ]).mulfs(Math.SQRT1_2);\r\n            const clinicMats = clinicMat.clone().ts();\r\n            function toBivecClinicMatrix(Rt: Rotor) {\r\n                const RtMat = new Matrix(6);\r\n                const bxy = Bivec.xy.rotate(Rt);\r\n                const bxz = Bivec.xz.rotate(Rt);\r\n                const bxw = Bivec.xw.rotate(Rt);\r\n                const byz = Bivec.yz.rotate(Rt);\r\n                const byw = Bivec.yw.rotate(Rt);\r\n                const bzw = Bivec.zw.rotate(Rt);\r\n                RtMat.setElements(\r\n                    bxy.xy, bxy.xz, bxy.xw, bxy.yz, bxy.yw, bxy.zw,\r\n                    bxz.xy, bxz.xz, bxz.xw, bxz.yz, bxz.yw, bxz.zw,\r\n                    bxw.xy, bxw.xz, bxw.xw, bxw.yz, bxw.yw, bxw.zw,\r\n                    byz.xy, byz.xz, byz.xw, byz.yz, byz.yw, byz.zw,\r\n                    byw.xy, byw.xz, byw.xw, byw.yz, byw.yw, byw.zw,\r\n                    bzw.xy, bzw.xz, bzw.xw, bzw.yz, bzw.yw, bzw.zw,\r\n                )\r\n                return clinicMat.mul(RtMat).mul(clinicMats);\r\n            }\r\n\r\n            // calculate inertia matrix before rotation\r\n            // const inertiaMat0 = this.getPointsInertia((rigid.geometry as Convex).points, rigid.mass);\r\n            // (rigid.geometry as Convex).points.forEach(v => v.rotates(Rt));\r\n            // calculate inertia matrix after rotation\r\n            const inertiaMat = this.getPointsInertia((rigid.geometry as Convex).points, rigid.mass);\r\n            // console.log(inertiaMat0,RtMat.mul(inertiaMat).mul(RtMat.ts())); // ok\r\n\r\n            // convert to isoclinic basis\r\n            // const iClinicMat0 = clinicMat.mul(inertiaMat0).mul(clinicMats);\r\n            const iClinicMat = clinicMat.mul(inertiaMat).mul(clinicMats);\r\n            // console.log(iClinicMat0, iClinicMat);\r\n            // extract part P:\r\n            // [aId  P; P'  aId]\r\n            const p = iClinicMat.subMatrix(0, 3, 3, 3);\r\n            if (p.norm1() < 1e-5) {\r\n                rigid.inertiaIsotroy = true;\r\n                rigid.inertia.set(...inertiaMat.diag()).mulfs(rigid.mass * 0.2); // factor for solid\r\n                return;\r\n            }\r\n            const { U, V } = p.SVdecompose(24);\r\n            if (V.det() < 0) {\r\n                V.elem[6] = -V.elem[6];\r\n                V.elem[7] = -V.elem[7];\r\n                V.elem[8] = -V.elem[8];\r\n            }\r\n            // const newR = new Matrix(6);\r\n            // const L = Matrix.fromArray([[0, 0, 1], [0, 1, 0], [1, 0, 0]]);\r\n            // newR.setFromSubMatrix(U.clone().ts(), 3, 3);\r\n            // newR.setFromSubMatrix((V.clone()), 3, 3, 0, 0, 3, 3);\r\n            // console.log(newR.mul(iClinicMat).mul(newR.clone().ts()));\r\n\r\n            const rL = new Quaternion().setFromMat3(U.toMat3());\r\n            const rR = new Quaternion().setFromMat3(V.toMat3());\r\n            const rotor = new Rotor(rL, rR);\r\n            // console.log(newR, toBivecClinicMatrix(rotor));\r\n\r\n            (rigid.geometry as Convex).points.forEach(v => v.rotatesconj(rotor));\r\n            // calculate inertia matrix\r\n            const inertiaMat2 = this.getPointsInertia((rigid.geometry as Convex).points, rigid.mass);\r\n            // console.log(inertiaMat2);\r\n            rigid.rotates(rotor);\r\n            rigid.inertia.set(...inertiaMat2.diag()).mulfs(rigid.mass * 0.2); // factor for solid\r\n        }\r\n    }\r\n    export class Tesseractoid extends Convex {\r\n        size: Vec4;\r\n        constructor(size: Vec4 | number) {\r\n            let s = typeof size === \"number\" ? new Vec4(size, size, size, size) : size;\r\n            super([\r\n                new Vec4(s.x, s.y, s.z, s.w),\r\n                new Vec4(-s.x, s.y, s.z, s.w),\r\n                new Vec4(s.x, -s.y, s.z, s.w),\r\n                new Vec4(-s.x, -s.y, s.z, s.w),\r\n                new Vec4(s.x, s.y, -s.z, s.w),\r\n                new Vec4(-s.x, s.y, -s.z, s.w),\r\n                new Vec4(s.x, -s.y, -s.z, s.w),\r\n                new Vec4(-s.x, -s.y, -s.z, s.w),\r\n                new Vec4(s.x, s.y, s.z, -s.w),\r\n                new Vec4(-s.x, s.y, s.z, -s.w),\r\n                new Vec4(s.x, -s.y, s.z, -s.w),\r\n                new Vec4(-s.x, -s.y, s.z, -s.w),\r\n                new Vec4(s.x, s.y, -s.z, -s.w),\r\n                new Vec4(-s.x, s.y, -s.z, -s.w),\r\n                new Vec4(s.x, -s.y, -s.z, -s.w),\r\n                new Vec4(-s.x, -s.y, -s.z, -s.w),\r\n            ]);\r\n            this.size = s;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            let mins = Math.min(this.size.x, this.size.y, this.size.z, this.size.w);\r\n            let maxs = Math.max(this.size.x, this.size.y, this.size.z, this.size.w);\r\n            let isoratio = mins / maxs;\r\n            rigid.inertiaIsotroy = isoratio > 0.95;\r\n            if (rigid.inertiaIsotroy) {\r\n                rigid.inertia.xy = rigid.mass * (mins + maxs) * (mins + maxs) * 0.2;\r\n            } else {\r\n                let x = this.size.x * this.size.x;\r\n                let y = this.size.y * this.size.y;\r\n                let z = this.size.z * this.size.z;\r\n                let w = this.size.w * this.size.w;\r\n                rigid.inertia.set(x + y, x + z, x + w, y + z, y + w, z + w).mulfs(rigid.mass * 0.2);\r\n            }\r\n        }\r\n    }\r\n    export class Duocylinder extends Convex {\r\n        radius1: number;\r\n        radius2: number;\r\n        segment1: number;\r\n        segment2: number;\r\n        constructor(radius1: number, radius2: number, segment1: number, segment2: number) {\r\n            const ps: Vec4[] = [];\r\n            const d1 = Math.PI * 2 / segment1;\r\n            const d2 = Math.PI * 2 / segment2;\r\n            for (let i = 0, ii = 0; i < segment1; i++, ii += d1) {\r\n                for (let j = 0, jj = 0; j < segment2; j++, jj += d2) {\r\n                    ps.push(new Vec4(Math.sin(ii) * radius1, Math.sin(jj) * radius2, Math.cos(jj) * radius2, Math.cos(ii) * radius1));\r\n                }\r\n            }\r\n            super(ps);\r\n            this.radius1 = radius1; this.radius2 = radius2;\r\n            this.segment1 = segment1; this.segment2 = segment2;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            let isoratio = this.radius1 / this.radius2;\r\n            rigid.inertiaIsotroy = isoratio > 0.95 && isoratio < 1.05;\r\n            if (rigid.inertiaIsotroy) {\r\n                rigid.inertia.xy = rigid.mass * (this.radius1 + this.radius2) * (this.radius1 + this.radius2) * 0.2;\r\n            } else {\r\n                let x = this.radius1 * this.radius1;\r\n                let y = this.radius2 * this.radius2;\r\n                let z = y;\r\n                let w = x;\r\n                rigid.inertia.set(x + y, x + z, x + w, y + z, y + w, z + w).mulfs(rigid.mass * 0.2);\r\n            }\r\n        }\r\n    }\r\n    /** equation: dot(normal,positon) == offset\r\n     *  => when offset > 0, plane is shifted to normal direction\r\n     *  from origin by distance = offset\r\n     */\r\n    export class Plane extends RigidGeometry {\r\n        normal: Vec4;\r\n        offset: number;\r\n        constructor(normal?: Vec4, offset?: number) {\r\n            super();\r\n            this.normal = normal ?? Vec4.y.clone();\r\n            this.offset = offset ?? 0;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            if (rigid.mass) console.warn(\"Infinitive Plane cannot have a finitive mass.\");\r\n            rigid.mass = undefined;\r\n            rigid.invMass = 0;\r\n            rigid.inertia = undefined;\r\n            rigid.invInertia = undefined;\r\n        }\r\n    }\r\n    export class GlomicCavity extends RigidGeometry {\r\n        radius: number;\r\n        constructor(radius: number) {\r\n            super();\r\n            this.radius = radius;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            if (rigid.mass) console.warn(\"GlomicCavity cannot have a finitive mass.\");\r\n            rigid.mass = undefined;\r\n            rigid.invMass = 0;\r\n            rigid.inertia = undefined;\r\n            rigid.invInertia = undefined;\r\n        }\r\n    }\r\n    /** default orientation: XW */\r\n    export class Spheritorus extends RigidGeometry {\r\n        majorRadius: number;\r\n        minorRadius: number;\r\n        /** majorRadius: cirle's radius, minorRadius: sphere's radius */\r\n        constructor(majorRadius: number, minorRadius: number) {\r\n            super();\r\n            this.majorRadius = majorRadius;\r\n            this.minorRadius = minorRadius;\r\n            this.obb = new AABB(\r\n                new Vec4(\r\n                    -majorRadius - minorRadius, -minorRadius, -minorRadius, -majorRadius - minorRadius\r\n                ),\r\n                new Vec4(\r\n                    majorRadius + minorRadius, minorRadius, minorRadius, majorRadius + minorRadius\r\n                ),\r\n            );\r\n            this.boundingGlome = majorRadius + minorRadius;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            rigid.inertiaIsotroy = false;\r\n            let maj = this.majorRadius * this.majorRadius;\r\n            let min = this.minorRadius * this.minorRadius;\r\n            let half = maj + 5 * min;\r\n            let parallel = 2 * maj + 6 * min;\r\n            let perp = 4 * min;\r\n            rigid.inertia.set(half, half, parallel, perp, half, half).mulfs(rigid.mass! * 0.1);\r\n        }\r\n    }\r\n    /** default orientation: XZW */\r\n    export class Torisphere extends RigidGeometry {\r\n        majorRadius: number;\r\n        minorRadius: number;\r\n        /** majorRadius: sphere's radius, minorRadius: cirle's radius */\r\n        constructor(majorRadius: number, minorRadius: number) {\r\n            super();\r\n            this.majorRadius = majorRadius;\r\n            this.minorRadius = minorRadius;\r\n            this.obb = new AABB(\r\n                new Vec4(\r\n                    -majorRadius - minorRadius, -minorRadius, -majorRadius - minorRadius, -majorRadius - minorRadius\r\n                ),\r\n                new Vec4(\r\n                    majorRadius + minorRadius, minorRadius, majorRadius + minorRadius, majorRadius + minorRadius\r\n                ),\r\n            );\r\n            this.boundingGlome = majorRadius + minorRadius;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            rigid.inertiaIsotroy = false;\r\n            let maj = this.majorRadius * this.majorRadius;\r\n            let min = this.minorRadius * this.minorRadius;\r\n            let half = 2 * maj + 5 * min;\r\n            let parallel = 3 * maj + 6 * min;\r\n            rigid.inertia.set(half, parallel, parallel, half, half, parallel).mulfs(rigid.mass! * 0.1);\r\n        }\r\n    }\r\n    /** default orientation: 1:XY, 2:ZW */\r\n    export class Tiger extends RigidGeometry {\r\n        majorRadius1: number;\r\n        majorRadius2: number;\r\n        minorRadius: number;\r\n        /** majorRadius: sphere's radius, minorRadius: cirle's radius */\r\n        constructor(majorRadius1: number, majorRadius2: number, minorRadius: number) {\r\n            super();\r\n            this.majorRadius1 = majorRadius1;\r\n            this.majorRadius2 = majorRadius2;\r\n            this.minorRadius = minorRadius;\r\n            this.obb = new AABB(\r\n                new Vec4(-majorRadius1 - minorRadius, -majorRadius1 - minorRadius, -majorRadius2 - minorRadius, -majorRadius2 - minorRadius),\r\n                new Vec4(majorRadius1 + minorRadius, majorRadius1 + minorRadius, majorRadius2 + minorRadius, majorRadius2 + minorRadius),\r\n            );\r\n\r\n            this.boundingGlome = Math.max(majorRadius1, majorRadius2) + minorRadius;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            rigid.inertiaIsotroy = false;\r\n            let maj1 = this.majorRadius1 * this.majorRadius1;\r\n            let maj2 = this.majorRadius2 * this.majorRadius2;\r\n            let min = this.minorRadius * this.minorRadius;\r\n            let half = maj1 + maj2 + min * 6;\r\n            rigid.inertia.set(2 * maj1 + min * 5, half, half, half, half, 2 * maj2 + min * 5).mulfs(rigid.mass! * 0.5);\r\n        }\r\n    }\r\n    /** default orientation: (xy-z)-w */\r\n    export class Ditorus extends RigidGeometry {\r\n        majorRadius: number;\r\n        middleRadius: number;\r\n        minorRadius: number;\r\n        /** majorRadius, minorRadius: torus's radius, minorRadius: cirle's radius */\r\n        constructor(majorRadius: number, middleRadius: number, minorRadius: number) {\r\n            super();\r\n            this.majorRadius = majorRadius;\r\n            this.minorRadius = minorRadius;\r\n            this.middleRadius = middleRadius;\r\n            let minorRadius12 = minorRadius + middleRadius;\r\n            this.obb = new AABB(\r\n                new Vec4(-majorRadius - minorRadius12, -majorRadius - minorRadius12, -minorRadius12, -minorRadius),\r\n                new Vec4(majorRadius + minorRadius12, majorRadius + minorRadius12, minorRadius12, minorRadius)\r\n            );\r\n\r\n            this.boundingGlome = majorRadius + minorRadius12;\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            rigid.inertiaIsotroy = false;\r\n            let maj1 = this.majorRadius * this.majorRadius;\r\n            let maj2 = this.majorRadius * this.middleRadius;\r\n            let min = this.middleRadius * this.middleRadius;\r\n            let min2 = this.minorRadius * this.middleRadius;\r\n            let half = maj1 + maj2 + min * 6;\r\n            rigid.inertia.set(2 * maj1 + min * 5, maj1 + min * 6 + min2, maj1 + min2, maj1 + min * 6 + min2, maj1 + min2, 2 * min + min2).mulfs(rigid.mass * 0.2);\r\n        }\r\n    }\r\n    // todo\r\n    export class ThickHexahedronGrid extends RigidGeometry {\r\n        grid1: Vec4[][][];\r\n        grid2: Vec4[][][];\r\n        convex: Convex[];\r\n        constructor(\r\n            grid1: Vec4[][][], grid2: Vec4[][][],\r\n        ) {\r\n            super();\r\n            this.grid1 = grid1;\r\n            this.grid2 = grid2;\r\n            this.convex = [];\r\n            for (let w = 0, lw = grid1.length - 1; w < lw; w++) {\r\n                let grd1w = grid1[w];\r\n                let grd2w = grid2[w];\r\n                let grd1w1 = grid1[w + 1];\r\n                let grd2w1 = grid2[w + 1];\r\n                for (let z = 0, lz = grid1[0].length - 1; z < lz; z++) {\r\n                    let grd1wz = grd1w[z];\r\n                    let grd2wz = grd2w[z];\r\n                    let grd1wz1 = grd1w[z + 1];\r\n                    let grd2wz1 = grd2w[z + 1];\r\n                    let grd1w1z = grd1w1[z];\r\n                    let grd2w1z = grd2w1[z];\r\n                    let grd1w1z1 = grd1w1[z + 1];\r\n                    let grd2w1z1 = grd2w1[z + 1];\r\n                    for (let x = 0, lx = grid1[0][0].length - 1; x < lx; x++) {\r\n                        let c = [\r\n                            grd1wz[x],\r\n                            grd1wz[x + 1],\r\n                            grd1wz1[x],\r\n                            grd1wz1[x + 1],\r\n                            grd1w1z[x],\r\n                            grd1w1z[x + 1],\r\n                            grd1w1z1[x],\r\n                            grd1w1z1[x + 1],\r\n                            grd2wz[x],\r\n                            grd2wz[x + 1],\r\n                            grd2wz1[x],\r\n                            grd2wz1[x + 1],\r\n                            grd2w1z[x],\r\n                            grd2w1z[x + 1],\r\n                            grd2w1z1[x],\r\n                            grd2w1z1[x + 1],\r\n                        ];\r\n                        let sum = new Vec4();\r\n                        c.reduceRight((a, b) => { return sum.addset(a, b) }).divfs(16);\r\n                        this.convex.push(new Convex(c.map(c => c.sub(sum))));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            if (rigid.mass) console.warn(\"HeightField doesnt support a finitive mass.\");\r\n            rigid.mass = undefined;\r\n            rigid.invMass = 0;\r\n            rigid.inertia = undefined;\r\n            rigid.invInertia = undefined;\r\n        }\r\n    }\r\n    /** todo */\r\n    export class LoftedConvex extends Union {\r\n        constructor(\r\n            sp: Spline, section: Vec4[], step: number\r\n        ) {\r\n            const { points, rotors } = sp.generate(step);\r\n            const components: Rigid[] = [];\r\n            for (let j = 1; j < rotors.length; j++) {\r\n                let r = rotors[j];\r\n                let p = points[j];\r\n                let r0 = rotors[j - 1];\r\n                let p0 = points[j - 1];\r\n                let ps = section.map(v => v.rotate(r).adds(p));\r\n                let ps0 = section.map(v => v.rotate(r0).adds(p0));\r\n                ps.push(...ps0);\r\n                components.push(new Rigid({ geometry: new Convex(ps), mass: 0, material: new Material(1, 0.6) }));\r\n\r\n            }\r\n            super(components);\r\n        }\r\n        initializeMassInertia(rigid: Rigid) {\r\n            if (rigid.mass) console.warn(\"LoftedConvex doesnt support a finitive mass.\");\r\n            rigid.mass = undefined;\r\n            rigid.invMass = 0;\r\n            rigid.inertia = undefined;\r\n            rigid.invInertia = undefined;\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;AAuBA;;;AAGM;AACA,MAAO,KAAM,SAAQ,IAAI,CAAA;AAG3B,IAAA,QAAQ,CAAW;;AAEnB,IAAA,QAAQ,CAAgB;AACxB,IAAA,IAAI,CAAY;AAChB,IAAA,IAAI,CAAqB;AACzB,IAAA,OAAO,CAAS;;;AAGhB,IAAA,OAAO,GAAsB,IAAI,KAAK,EAAE,CAAC;AACzC,IAAA,UAAU,GAAsB,IAAI,KAAK,EAAE,CAAC;IAC5C,cAAc,CAAU;;IAExB,KAAK,GAAY,KAAK,CAAC;;AAEvB,IAAA,KAAK,CAAU;AAEf,IAAA,QAAQ,GAAS,IAAI,IAAI,EAAE,CAAC;AAC5B,IAAA,eAAe,GAAU,IAAI,KAAK,EAAE,CAAC;AACrC,IAAA,KAAK,GAAS,IAAI,IAAI,EAAE,CAAC;AACzB,IAAA,MAAM,GAAU,IAAI,KAAK,EAAE,CAAC;AAC5B,IAAA,YAAY,GAAS,IAAI,IAAI,EAAE,CAAC;AAChC,IAAA,mBAAmB,GAAU,IAAI,KAAK,EAAE,CAAC;AACzC,IAAA,WAAA,CAAY,KAAmD,EAAA;AAC3D,QAAA,KAAK,EAAE,CAAC;QACR,IAAK,KAA8B,CAAC,MAAM,EAAE;YACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,KAA6B,CAAC,CAAC;AAClE,SAAA;AAAM,aAAA;YACH,IAAI,MAAM,GAAG,KAA8B,CAAC;AAC5C,YAAA,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAChC,YAAA,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAc,CAAC,GAAG,MAAM,CAAC,IAAK,GAAG,CAAC,CAAC;YAC/D,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC;AACpC,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AAC7E,YAAA,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAChC,YAAA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAC7B,SAAA;AACD,QAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAClC;IAED,iBAAiB,CAAC,GAAS,EAAE,KAAW,EAAA;AACpC,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;AAAE,YAAA,OAAO,GAAG,CAAC,GAAG,EAAE,CAAC;AAC5C,QAAA,IAAI,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnD,QAAA,OAAO,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC7E;AACD,IAAA,WAAW,CAAC,GAAS,EAAA;AACjB,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;AAAE,YAAA,OAAO,GAAG,CAAC,GAAG,EAAE,CAAC;AAC5C,QAAA,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnD;;IAED,kBAAkB,CAAC,GAAU,EAAE,KAAK,GAAG,IAAI,IAAI,EAAE,IAAA,GAAwB,GAAG,EAAA;AACxE,QAAA,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;AACzB,QAAA,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7C,QAAA,IAAI,KAAK;AAAE,YAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzB,QAAA,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,EAAE;AAC9B,YAAA,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,SAAA;AAAM,aAAA;YACH,GAAG,CAAC,GAAG,EAAE,CAAC;AACb,SAAA;QACD,IAAI,IAAI,KAAK,GAAG;AAAE,YAAA,OAAO,GAAG,CAAC;QAC7B,CAAC,CAAC,QAAQ,EAAE,CAAC;AACb,QAAA,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;AAC/B,QAAA,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,QAAQ,EAAE,CAAC;AACb,QAAA,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;KACnD;IACD,sBAAsB,GAAA;AAClB,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KAClD;IACD,uBAAuB,GAAA;AACnB,QAAA,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;AAC/B,QAAA,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtD,QAAA,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QAClE,OAAO,CAAC,QAAQ,EAAE,CAAC;QAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,OAAO,CAAC,CAAC;KACZ;IACD,gBAAgB,GAAA;QACZ,OAAO,IAAI,CAAC,sBAAsB,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;KACzE;AACJ,CAAA;MAMqB,aAAa,CAAA;AAC/B,IAAA,KAAK,CAAQ;AACb,IAAA,GAAG,CAAO;AACV,IAAA,IAAI,CAAO;AACX,IAAA,aAAa,CAAS;AACtB,IAAA,UAAU,CAAC,KAAY,EAAA;AACnB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,QAAA,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ;AAAE,YAAA,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;QACjE,IAAI,KAAK,CAAC,OAAO,EAAE;AACf,YAAA,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3C,YAAA,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;AACvB,gBAAA,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3C,gBAAA,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3C,gBAAA,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3C,gBAAA,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3C,gBAAA,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAC9C,aAAA;AAAM,iBAAA;gBACH,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC1C,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC1C,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC1C,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC1C,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC1C,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACpC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACpC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACpC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACpC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AACvC,aAAA;AACJ,SAAA;KACJ;;AAEJ,CAAA;AACK,IAAW,MA0dhB;AA1dD,CAAA,UAAiB,OAAK,EAAA;IAClB,MAAa,KAAM,SAAQ,aAAa,CAAA;AACpC,QAAA,UAAU,CAAa;AACvB,QAAA,WAAA,CAAY,UAAmB,EAAA,EAAI,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,EAAE;;AAE3E,QAAA,qBAAqB,CAAC,KAAY,EAAA;;AAE9B,YAAA,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AACrB,YAAA,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;AACf,YAAA,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;AAC3B,gBAAA,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS;AAAE,oBAAA,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;AAC9F,gBAAA,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAK,CAAC,CAAC;AAC7C,gBAAA,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,IAAK,CAAC;AACzB,aAAA;YACD,KAAK,CAAC,OAAO,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;YAC/B,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;;AAEpC,YAAA,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;gBAC3B,CAAC,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC3C,gBAAA,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,aAAA;;;AAGD,YAAA,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;AACrB,YAAA,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;AAC5B,YAAA,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC;SACzB;;QACD,WAAW,GAAA;AACP,YAAA,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;AAC3B,gBAAA,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC9F,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACrE,aAAA;SACJ;AACJ,KAAA;AAjCY,IAAA,OAAA,CAAA,KAAK,QAiCjB,CAAA;IACD,MAAa,KAAM,SAAQ,aAAa,CAAA;QACpC,MAAM,GAAW,CAAC,CAAC;QACnB,SAAS,GAAW,CAAC,CAAC;AACtB,QAAA,kBAAkB,CAAS;AAC3B,QAAA,WAAA,CAAY,MAAc,EAAE,kBAAkB,GAAG,IAAI,EAAA;AACjD,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;AAC5B,YAAA,IAAI,CAAC,SAAS,GAAG,MAAM,GAAG,MAAM,CAAC;AACjC,YAAA,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;SAChD;AACD,QAAA,qBAAqB,CAAC,KAAY,EAAA;AAC9B,YAAA,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;AAC5B,YAAA,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC;SAC5E;AACJ,KAAA;AAfY,IAAA,OAAA,CAAA,KAAK,QAejB,CAAA;IACD,MAAa,MAAO,SAAQ,aAAa,CAAA;AACrC,QAAA,MAAM,CAAS;AACf,QAAA,YAAY,CAAS;AACrB,QAAA,WAAA,CAAY,MAAc,EAAA;AACtB,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACnC,YAAA,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AACvB,YAAA,KAAK,IAAI,CAAC,IAAI,MAAM,EAAE;AAClB,gBAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;AAClE,aAAA;YACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACtD;QACO,gBAAgB,CAAC,MAAc,EAAE,IAAY,EAAA;AACjD,YAAA,MAAM,UAAU,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACjC,YAAA,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,YAAA,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACpB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,OAAO,CAAC,WAAW,CACf,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,EAClC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EACjC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAChC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAClC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EACjC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CACrC,CAAC,EAAE,EAAE,CAAC;AACP,gBAAA,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC5B,aAAA;YACD,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;SACjD;AACD,QAAA,qBAAqB,CAAC,KAAY,EAAA;;AAE9B,YAAgB,IAAI,MAAM,CAAC,CAAC,EAAE;;AAG9B,YAAA,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;gBAC/B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAClB,gBAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;gBACnB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAClB,gBAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAClB,gBAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACtB,aAAA,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvB,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;;;;;AAwB1C,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAE,KAAK,CAAC,QAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;;;;AAKxF,YAAA,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;;;;AAI7D,YAAA,MAAM,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,YAAA,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,IAAI,EAAE;AAClB,gBAAA,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC5B,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;gBAChE,OAAO;AACV,aAAA;AACD,YAAA,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;AACnC,YAAA,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;AACb,gBAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,gBAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,gBAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,aAAA;;;;;;AAOD,YAAA,MAAM,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;AACpD,YAAA,MAAM,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACpD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;;AAG/B,YAAA,KAAK,CAAC,QAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;;AAErE,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAE,KAAK,CAAC,QAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;;AAEzF,YAAA,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;SACpE;AACJ,KAAA;AAnHY,IAAA,OAAA,CAAA,MAAM,SAmHlB,CAAA;IACD,MAAa,YAAa,SAAQ,MAAM,CAAA;AACpC,QAAA,IAAI,CAAO;AACX,QAAA,WAAA,CAAY,IAAmB,EAAA;YAC3B,IAAI,CAAC,GAAG,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;AAC3E,YAAA,KAAK,CAAC;AACF,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,gBAAA,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,C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"}