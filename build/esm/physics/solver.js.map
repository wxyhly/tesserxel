{"version":3,"file":"solver.js","sources":["../../../src/physics/solver.ts"],"sourcesContent":["import { Bivec, bivecPool } from \"../math/algebra/bivec.js\";\r\nimport { Mat4, mat4Pool } from \"../math/algebra/mat4.js\";\r\nimport { rotorPool } from \"../math/algebra/rotor.js\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4.js\";\r\nimport { _DEG2RAD } from \"../math/const.js\";\r\nimport { Constrain, Material, mulBivec, PointConstrain } from \"./engine.js\";\r\nimport { Collision } from \"./narrowphase.js\";\r\nimport { Rigid, SubRigid } from \"./rigid.js\";\r\n\r\nexport interface SolverConstructor {\r\n    new(): Solver;\r\n};\r\nexport abstract class Solver {\r\n    abstract run(collisionList: Collision[], constrainList: Constrain[]): void;\r\n}\r\nexport interface PreparedCollision extends Collision {\r\n    separateSpeed: number;\r\n    relativeVelocity: Vec4;\r\n    materialA: Material;\r\n    materialB?: Material;\r\n    dvA?: Vec4;\r\n    dvB?: Vec4;\r\n    dwA?: Bivec;\r\n    dwB?: Bivec;\r\n    pointConstrain?: PointConstrain;\r\n}\r\nexport class IterativeImpulseSolver extends Solver {\r\n    maxPositionIterations: number = 32;\r\n    maxVelocityIterations: number = 32;\r\n    maxResolveRotationAngle = 45 * _DEG2RAD;\r\n    separateSpeedEpsilon = 0.01;\r\n    PositionRelaxationFactor = 0.5;\r\n    collisionList: PreparedCollision[];\r\n    private _vec41 = new Vec4;\r\n    private _vec42 = new Vec4;\r\n    private pointConstrainMaterial = new Material(Infinity, 0);\r\n    run(collisionList: Collision[], constrainList: Constrain[]) {\r\n        if (!collisionList.length && !constrainList.length) return;\r\n        this.prepare(collisionList, constrainList);\r\n        this.resolveVelocity();\r\n        this.resolvePosition();\r\n    }\r\n    prepare(collisionList: Collision[], constrainList: Constrain[]) {\r\n        this.collisionList = collisionList.map(e => {\r\n            let { point, a, b, normal } = e;\r\n            let collision = e as PreparedCollision;\r\n            collision.materialA = a.material;\r\n            collision.materialB = b?.material;\r\n            // after got material, we solve union regardless of it's collision parts\r\n            if ((a as SubRigid).parent) collision.a = (a as SubRigid).parent!;\r\n            if ((b as SubRigid).parent) collision.b = (b as SubRigid).parent!;\r\n            collision.relativeVelocity = collision.b.getlinearVelocity(vec4Pool.pop(), point).subs(\r\n                collision.a.getlinearVelocity(this._vec41, point)\r\n            );\r\n            collision.separateSpeed = collision.relativeVelocity.dot(normal);\r\n            return collision;\r\n        });\r\n        for (let c of constrainList) {\r\n            if (c instanceof PointConstrain) {\r\n                let { a, b, pointA, pointB } = c;\r\n                this._vec41.copy(pointA).rotates(a.rotation);\r\n                let relativeVelocity = vec4Pool.pop().dotbset(\r\n                    this._vec41, a.angularVelocity\r\n                ).adds(a.velocity);\r\n                let normal: Vec4;\r\n                let point: Vec4;\r\n                if (b) {\r\n                    this._vec42.copy(pointB).rotates(b.rotation);\r\n                    relativeVelocity.subs(this._vec42.dotbset(\r\n                        this._vec42, b.angularVelocity\r\n                    ).adds(b.velocity));\r\n                    normal = this._vec41.adds(a.position).sub(this._vec42.adds(b.position));\r\n                    point = this._vec41.add(this._vec42).mulfs(0.5);\r\n                } else {\r\n                    normal = this._vec41.adds(a.position).sub(pointB);\r\n                    point = this._vec41.adds(pointB).mulfs(0.5);\r\n                }\r\n                let depth = normal.norm(); if (depth === 0) continue; normal.divfs(depth);\r\n                relativeVelocity.negs();\r\n                this.collisionList.push({\r\n                    a, b, normal, depth,\r\n                    materialA: this.pointConstrainMaterial,\r\n                    materialB: this.pointConstrainMaterial,\r\n                    relativeVelocity,\r\n                    separateSpeed: -relativeVelocity.norm(),\r\n                    point,\r\n                    pointConstrain: c\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    resolveVelocity() {\r\n        // iteratively solve lowest separateSpeed\r\n        for (let i = 0; i < this.maxVelocityIterations; i++) {\r\n            let collision = this.collisionList.sort((a, b) => (\r\n                (a.pointConstrain ? (-Math.abs(a.separateSpeed)) : a.separateSpeed)\r\n                - (b.pointConstrain ? (-Math.abs(b.separateSpeed)) : b.separateSpeed)\r\n            ))[0];\r\n            if(!collision) return;\r\n            let { point, a, b, separateSpeed, normal, relativeVelocity, materialA, materialB } = collision;\r\n            if (!collision.pointConstrain) {\r\n                if (separateSpeed >= 0) return;\r\n            } else if (Math.abs(separateSpeed) < this.separateSpeedEpsilon) { return; }\r\n            let { restitution, friction } = Material.getContactMaterial(materialA, materialB!);\r\n            if (separateSpeed > -this.separateSpeedEpsilon) restitution = 0;\r\n            let normalVelocity = vec4Pool.pop().copy(normal).mulfs(separateSpeed);\r\n            let tangentVelocity = vec4Pool.pop().subset(relativeVelocity, normalVelocity);\r\n            let tangentSpeed = tangentVelocity.norm();\r\n            // newVn = Vn * -restitution;\r\n            // newVt = Vt * tangentFactor;\r\n            // when slide: deltaVt === friction * deltaVn => solve tangentFactor\r\n            // convert f = mu * N to delta(tangentSpeed) = mu * delta(normalVelocity)\r\n            // then calculate friction reduce how many tangentSpeed, result is presented by a tangentFactor\r\n            // tangentFactor must > 0, otherwise it's still friction\r\n            let tangentFactor = tangentSpeed > 0 ? Math.max(\r\n                1 + friction * (1 + restitution) * separateSpeed / tangentSpeed, 0\r\n            ) : 0;\r\n            let targetDeltaVelocityByImpulse = tangentVelocity.mulfs(tangentFactor - 1).addmulfs(normalVelocity, -restitution - 1);\r\n            let pointInA: Vec4, pointInB: Vec4;\r\n            let matA = mat4Pool.pop(), matB = mat4Pool.pop()\r\n            if (a.mass > 0) {\r\n                pointInA = vec4Pool.pop().subset(point, a.position).rotatesconj(a.rotation);\r\n                calcImpulseResponseMat(matA, a, pointInA, pointInA);\r\n            } else { matA.set(); }\r\n            if (b?.mass > 0) {\r\n                pointInB = vec4Pool.pop().subset(point, b.position).rotatesconj(b.rotation);\r\n                calcImpulseResponseMat(matB, b, pointInB, pointInB);\r\n            } else { matB.set(); }\r\n            // dv = dvb(Ib) - dva(Ia) == dvb(I) + dva(I) since I = -Ia = Ib\r\n            let impulse = targetDeltaVelocityByImpulse.mulmatls(matA.adds(matB).invs());\r\n            if (impulse.norm() > 1.0) {\r\n                console.log(\"hq\");\r\n            }\r\n            // if (impulse.norm1() === 0) continue;\r\n            // console.assert(isFinite(impulse.norm1()));\r\n            // console.assert(isFinite(normal.norm1()));\r\n            mat4Pool.push(matA, matB);\r\n            // resolve velocity by applying final impulse\r\n            if (b?.mass > 0) {\r\n                collision.dvB = vec4Pool.pop();\r\n                collision.dwB = bivecPool.pop();\r\n                applyImpulseAndGetDeltaVW(collision.dvB, collision.dwB, b, pointInB, impulse);\r\n            }\r\n            if (a.mass > 0) {\r\n                collision.dvA = vec4Pool.pop();\r\n                collision.dwA = bivecPool.pop();\r\n                applyImpulseAndGetDeltaVW(collision.dvA, collision.dwA, a, pointInA, impulse.negs());\r\n            }\r\n            this.updateSeparateSpeeds(collision);\r\n        }\r\n    }\r\n    updateSeparateSpeeds(collision: PreparedCollision) {\r\n        for (let c of this.collisionList) {\r\n            if (collision.a.mass > 0) {\r\n                if (c.a === collision.a) {\r\n                    this.updateSeparateSpeed(c, true, c.a, collision.dvA, collision.dwA);\r\n                } else if (c.b === collision.a) {\r\n                    this.updateSeparateSpeed(c, false, c.b, collision.dvA, collision.dwA);\r\n                }\r\n            }\r\n            if (collision.b?.mass > 0) {\r\n                if (c.a === collision.b) {\r\n                    this.updateSeparateSpeed(c, true, c.a, collision.dvB, collision.dwB);\r\n                } else if (c.b === collision.b) {\r\n                    this.updateSeparateSpeed(c, false, c.b, collision.dvB, collision.dwB);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateSeparateSpeed(collision: PreparedCollision, rigidIsA: boolean, rigid: Rigid, dv: Vec4, dw: Bivec) {\r\n        let delta = vec4Pool.pop().subset(collision.point, rigid.position).dotbsr(dw).adds(dv);\r\n        if (rigidIsA) delta.negs();\r\n\r\n        console.assert(isFinite(delta.norm1()), \"Numeric error in Collision solver updateDepth\");\r\n        collision.relativeVelocity.adds(delta);\r\n        if (collision.pointConstrain) {\r\n            collision.separateSpeed = -collision.relativeVelocity.norm();\r\n        }\r\n        else {\r\n            let dss = delta.dot(collision.normal); delta.pushPool();\r\n            collision.separateSpeed += dss;\r\n        }\r\n    }\r\n\r\n    resolvePosition() {\r\n        // iteratively solve the deepest\r\n        for (let i = 0; i < this.maxPositionIterations; i++) {\r\n            let collision = this.collisionList.sort((a, b) => b.depth - a.depth)[0];\r\n            if(!collision) return;\r\n            let { point, a, b, depth, normal } = collision;\r\n            if (depth <= 0) return;\r\n            if (depth > 10) {\r\n                console.error(\"Depth direction error in resolvePosition\");\r\n            }\r\n            let invInertiaA = 0, invInertiaB = 0;\r\n            if (a.mass > 0) {\r\n                let pA = vec4Pool.pop().subset(point, a.position);\r\n                let torqueA = bivecPool.pop().wedgevvset(normal, pA);\r\n                if (a.inertiaIsotroy) {\r\n                    collision.dwA = torqueA.mulfs(a.invInertia.xy);\r\n                } else {\r\n                    torqueA.rotatesconj(a.rotation);\r\n                    collision.dwA = mulBivec(torqueA, a.invInertia, torqueA).rotates(a.rotation);\r\n                }\r\n                invInertiaA = -pA.dotbset(pA, collision.dwA).dot(normal);\r\n                pA.pushPool();\r\n            }\r\n            if (b?.mass > 0) {\r\n                let pB = vec4Pool.pop().subset(point, b.position);\r\n                let torqueB = bivecPool.pop().wedgevvset(pB, normal);\r\n                if (b.inertiaIsotroy) {\r\n                    collision.dwB = torqueB.mulfs(b.invInertia.xy);\r\n                } else {\r\n                    torqueB.rotatesconj(b.rotation);\r\n                    collision.dwB = mulBivec(torqueB, b.invInertia, torqueB).rotates(b.rotation);\r\n                }\r\n                invInertiaB = pB.dotbset(pB, collision.dwB).dot(normal);\r\n                pB.pushPool();\r\n            }\r\n            // console.assert(invInertiaA >= 0);\r\n            // console.assert(invInertiaB >= 0);\r\n            let depthDivTotalInvs = depth * this.PositionRelaxationFactor / (a.invMass + (b?.invMass ?? 0) + invInertiaA + invInertiaB);\r\n            if (!isFinite(depthDivTotalInvs)) {\r\n                console.error(\"A numeric error occured in Rigid collision solver: depthDivTotalInvs in resolvePosition\");\r\n            }\r\n            if (a.mass > 0) {\r\n                // here can't mul invInertiaA since dwA is by unit impulse, and linear part is already invInertiaA\r\n                collision.dwA.mulfs(depthDivTotalInvs);\r\n                // clamp rotation\r\n                let angle = collision.dwA.norm();\r\n                if (angle > this.maxResolveRotationAngle) {\r\n                    collision.dwA.mulfs(this.maxResolveRotationAngle / angle);\r\n                }\r\n                collision.dvA = vec4Pool.pop().copy(normal).mulfs(-depthDivTotalInvs * a.invMass);\r\n                if (!isFinite(angle + collision.dvA.norm1() + collision.dwA.norm1() + a.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvA,dwA in resolvePosition\");\r\n                }\r\n                a.position.adds(collision.dvA);\r\n                let r = rotorPool.pop().expset(collision.dwA);\r\n                a.rotation.mulsl(r); r.pushPool();\r\n                if (!isFinite(a.rotation.l.norm() + a.rotation.r.norm() + a.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvA,dwA in resolvePosition\");\r\n                }\r\n            }\r\n            if (b?.mass > 0) {\r\n                collision.dwB.mulfs(depthDivTotalInvs);\r\n                // clamp rotation\r\n                let angle = collision.dwB.norm();\r\n                if (angle > this.maxResolveRotationAngle) {\r\n                    collision.dwB.mulfs(this.maxResolveRotationAngle / angle);\r\n                }\r\n                collision.dvB = vec4Pool.pop().copy(normal).mulfs(depthDivTotalInvs * b.invMass);\r\n                if (!isFinite(angle + collision.dvB.norm1() + collision.dwB.norm1() + b.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvB,dwB in resolvePosition\");\r\n                }\r\n                b.position.adds(collision.dvB);\r\n                let r = rotorPool.pop().expset(collision.dwB!);\r\n                b.rotation.mulsl(r); r.pushPool();\r\n                if (!isFinite(b.rotation.l.norm() + b.rotation.r.norm() + b.position.norm1())) {\r\n                    console.error(\"A numeric error occured in Rigid collision solver: dvB,dwB in resolvePosition\");\r\n                }\r\n            }\r\n            // collision.depth = 0;\r\n            this.updateDepths(collision);\r\n        }\r\n    }\r\n    updateDepths(collision: PreparedCollision) {\r\n        for (let c of this.collisionList) {\r\n            if (collision.a.mass > 0) {\r\n                if (c.a === collision.a) {\r\n                    this.updateDepth(c, true, c.a, collision.dvA, collision.dwA!);\r\n                } else if (c.b === collision.a) {\r\n                    this.updateDepth(c, false, c.b, collision.dvA, collision.dwA!);\r\n                }\r\n            }\r\n            if (collision.b?.mass > 0) {\r\n                if (c.a === collision.b) {\r\n                    this.updateDepth(c, true, c.a, collision.dvB, collision.dwB!);\r\n                } else if (c.b === collision.b) {\r\n                    this.updateDepth(c, false, c.b, collision.dvB, collision.dwB!);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateDepth(collision: PreparedCollision, rigidIsA: boolean, rigid: Rigid, dv: Vec4, dw: Bivec) {\r\n        if (collision.pointConstrain) {\r\n            let a = collision.normal.copy(collision.pointConstrain.pointA).rotates(collision.a.rotation).adds(collision.a.position);\r\n            if (collision.b) {\r\n                let b = vec4Pool.pop().copy(collision.pointConstrain.pointB).rotates(collision.b.rotation).adds(collision.b.position);\r\n                a.subs(b); b.pushPool();\r\n            } else {\r\n                a.subs(collision.pointConstrain.pointB);\r\n            }\r\n            collision.depth = a.norm();\r\n            collision.normal.norms();\r\n        } else {\r\n            let a = vec4Pool.pop().subset(collision.point, rigid.position);\r\n            let dd = a.dotbsr(dw).adds(dv).dot(collision.normal);\r\n            console.assert(isFinite(a.norm1()), \"Numeric error in Collision solver updateDepth\");\r\n            collision.depth += rigidIsA ? dd : -dd;\r\n            a.pushPool();\r\n        }\r\n    }\r\n}\r\nlet _vec4x = new Vec4;\r\nlet _vec4y = new Vec4;\r\nlet _vec4z = new Vec4;\r\nlet _vec4w = new Vec4;\r\nlet _biv = new Bivec;\r\nlet _mat4r = new Mat4;\r\n\r\nfunction calcDeltaVWByImpulse(outV: Vec4, outW: Bivec, rigid: Rigid, localPoint: Vec4, impulse: Vec4) {\r\n    outV.copy(impulse).mulfs(rigid.invMass);\r\n    _vec4x.copy(impulse).rotatesconj(rigid.rotation);\r\n    mulBivec(outW, outW.wedgevvset(localPoint, _vec4x), rigid.invInertia!).rotates(rigid.rotation);\r\n};\r\nfunction applyImpulseAndGetDeltaVW(outV: Vec4, outW: Bivec, rigid: Rigid, localPoint: Vec4, impulse: Vec4) {\r\n    calcDeltaVWByImpulse(outV, outW, rigid, localPoint, impulse);\r\n    { console.assert(isFinite(outV.norm1() + outW.norm1()), \"A numeric error occured in Rigid collision solver: outV, outW in applyImpulseAndGetDeltaVW\"); }\r\n    rigid.velocity.adds(outV);\r\n    rigid.angularVelocity.adds(outW);\r\n    if (!isFinite(rigid.velocity.norm1() + rigid.angularVelocity.norm1())) { console.error(\"A numeric error occured in Rigid collision solver: rigid velocity in applyImpulseAndGetDeltaVW\"); }\r\n}\r\n/** calculate transfer matrix between impulse applying at src position and response delta velocity at dst position\r\n *  src and dst are in rigid's local frame\r\n */\r\nfunction calcImpulseResponseMat(out: Mat4, rigid: Rigid, src: Vec4, dst: Vec4) {\r\n    let ii = rigid.invInertia!;\r\n    // calculate relativePos cross base vectors and get angular part\r\n    _vec4x.dotbset(dst, _biv.set(-src.y * ii.xy, -src.z * ii.xz, -src.w * ii.xw));\r\n    _vec4y.dotbset(dst, _biv.set(src.x * ii.xy, 0, 0, -src.z * ii.yz, -src.w * ii.yw));\r\n    _vec4z.dotbset(dst, _biv.set(0, src.x * ii.xz, 0, src.y * ii.yz, 0, -src.w * ii.zw));\r\n    _vec4w.dotbset(dst, _biv.set(0, 0, src.x * ii.xw, 0, src.y * ii.yw, src.z * ii.zw));\r\n    out.augVec4set(_vec4x, _vec4y, _vec4z, _vec4w);\r\n    // add linear part (add a diagonal matrix inline)\r\n    out.elem[0] += rigid.invMass;\r\n    out.elem[5] += rigid.invMass;\r\n    out.elem[10] += rigid.invMass;\r\n    out.elem[15] += rigid.invMass;\r\n    _mat4r.setFromRotor(rigid.rotation);\r\n    // convert matrix to world frame by Mworld <= R Mlocal R'\r\n    return out.mulsl(_mat4r).mulsr(_mat4r.ts());\r\n}"],"names":[],"mappings":"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"}