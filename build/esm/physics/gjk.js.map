{"version":3,"file":"gjk.js","sources":["../../../src/physics/gjk.ts"],"sourcesContent":["import { bivecPool } from \"../math/algebra/bivec.js\";\r\nimport { Vec4, vec4Pool } from \"../math/algebra/vec4.js\";\r\n\r\n// Convex Collision Detection algorithms (GJK Distance + EPA)\r\n        const maxEpaStep = 16;\r\n        const maxGjkStep = 32;\r\n        type Convex = Vec4[];\r\n        function support(c: Convex, dir: Vec4) {\r\n            let support = -Infinity;\r\n            let point: Vec4;\r\n            for (let p of c) {\r\n                let value = p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point = p;\r\n                }\r\n            }\r\n            return point!;\r\n        }\r\n        function supportNeg(c: Convex, dir: Vec4) {\r\n            let support = -Infinity;\r\n            let point: Vec4;\r\n            for (let p of c) {\r\n                let value = -p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point = p;\r\n                }\r\n            }\r\n            return point!;\r\n        }\r\n        function supportDiff(c1: Convex, c2: Convex, dir: Vec4) {\r\n            if (!dir) {\r\n                console.error(\"Convex Collision Detector: Undefined support direction\");\r\n            }\r\n            let support = -Infinity;\r\n            let point1: Vec4;\r\n            let point2: Vec4;\r\n            for (let p of c1) {\r\n                let value = p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point1 = p;\r\n                }\r\n            }\r\n            support = -Infinity;\r\n            for (let p of c2) {\r\n                let value = -p.dot(dir);\r\n                if (value > support) {\r\n                    support = value;\r\n                    point2 = p;\r\n                }\r\n            }\r\n            return [point1!, point2!];\r\n        }\r\n        function supportDiffTest(c1: Convex, c2: Convex, dir: Vec4) {\r\n            let support1 = -Infinity;\r\n            let point1: Vec4;\r\n            let point2: Vec4;\r\n            for (let p of c1) {\r\n                let value = p.dot(dir);\r\n                if (value > support1) {\r\n                    support1 = value;\r\n                    point1 = p;\r\n                }\r\n            }\r\n            let support2 = -Infinity;\r\n            for (let p of c2) {\r\n                let value = -p.dot(dir);\r\n                if (value > support2) {\r\n                    support2 = value;\r\n                    point2 = p;\r\n                }\r\n            }\r\n            if (support1 + support2 < 0) return [];\r\n            return [point1!, point2!];\r\n        }\r\n        // /** get closest point on line segment ab */\r\n        // function closestToOrigin2(a: Vec4, b: Vec4) {\r\n        //     let adb = a.dot(b);\r\n        //     let la = b.normsqr() - adb; if (la < 0) return b;\r\n        //     let lb = a.normsqr() - adb; if (lb < 0) return a;\r\n        //     return vec4Pool.pop().set().addmulfs(a, la).addmulfs(b, lb).divfs(la + lb);\r\n        // }\r\n        // /** get line ab's normal pointing to origin, 20 muls */\r\n        // function normalToOrigin2(out: Vec4, a: Vec4, b: Vec4) {\r\n        //     let adb = a.dot(b);\r\n        //     let la = b.normsqr() - adb;\r\n        //     let lb = a.normsqr() - adb;\r\n        //     return out.set().addmulfs(a, -la).addmulfs(b, -lb);\r\n        // }\r\n        // /** get plane abc's normal point to origin, 36 muls */\r\n        // function normalToOrigin3(out: Vec4, a: Vec4, b: Vec4, c: Vec4) {\r\n        //     let vec = vec4Pool.pop();\r\n        //     let biv = bivecPool.pop().wedgevvset(\r\n        //         out.subset(b, a), vec.subset(c, a)\r\n        //     );\r\n        //     vec.pushPool();\r\n        //     out.wedgevbset(a, biv).wedgevbset(out, biv);\r\n        //     biv.pushPool();\r\n        //     return out;\r\n        // }\r\n        function getClosestPointOrNormal2(a: Vec4, b: Vec4) {\r\n            let adb = a.dot(b);\r\n            let la = b.normsqr() - adb; if (la < 0) return b;\r\n            let lb = a.normsqr() - adb; if (lb < 0) return a;\r\n            return vec4Pool.pop().set().addmulfs(a, -la).addmulfs(b, -lb);\r\n        }\r\n        function getClosestPointOrNormal3(a: Vec4, b: Vec4, c: Vec4) {\r\n            let ca = vec4Pool.pop().subset(a, c);\r\n            let cb = vec4Pool.pop().subset(b, c);\r\n            if (c.dot(ca) > 0 && c.dot(cb) > 0) {\r\n                vec4Pool.push(ca, cb);\r\n                return [c];\r\n            }\r\n            let biv = bivecPool.pop().wedgevvset(ca, cb);\r\n            if (ca.dotbset(ca, biv).dot(c) > 0) {\r\n                vec4Pool.push(ca, cb);\r\n                return [a, c];\r\n            }\r\n            // cb's sign is not consisted with ca's because of biv = ca x cb\r\n            if (cb.dotbset(cb, biv).dot(c) < 0) {\r\n                vec4Pool.push(ca, cb);\r\n                return [b, c];\r\n            }\r\n            let out = ca;\r\n            out.wedgevbset(a, biv).wedgevbset(out, biv);\r\n            biv.pushPool();\r\n            vec4Pool.push(cb);\r\n            return out;\r\n        }\r\n        function getClosestPointOrNormal4(a: Vec4, b: Vec4, c: Vec4, d: Vec4) {\r\n            let da = vec4Pool.pop().subset(a, d);\r\n            let db = vec4Pool.pop().subset(b, d);\r\n            let dc = vec4Pool.pop().subset(c, d);\r\n            // vertex\r\n            if (d.dot(da) > 0 && d.dot(db) > 0 && d.dot(dc) > 0) {\r\n                vec4Pool.push(da, db, dc);\r\n                return [d];\r\n            }\r\n            // edge\r\n            let dab = bivecPool.pop().wedgevvset(da, db);\r\n            let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n            let dca = bivecPool.pop().wedgevvset(dc, da);\r\n            let temp = vec4Pool.pop();\r\n            if (temp.dotbset(da, dab).dot(d) > 0 && temp.dotbset(da, dca).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [a, d];\r\n            }\r\n            if (temp.dotbset(db, dbc).dot(d) > 0 && temp.dotbset(db, dab).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [b, d];\r\n            }\r\n            if (temp.dotbset(dc, dca).dot(d) > 0 && temp.dotbset(dc, dbc).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [c, d];\r\n            }\r\n            // face\r\n            // dabc is normal vector\r\n            let dabc = vec4Pool.pop().wedgevbset(da, dbc);\r\n            if (temp.wedgevbset(dabc, dab).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, dabc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [a, b, d];\r\n            }\r\n            if (temp.wedgevbset(dabc, dbc).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, dabc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [b, c, d];\r\n            }\r\n            if (temp.wedgevbset(dabc, dca).dot(d) < 0) {\r\n                vec4Pool.push(da, db, dc, dabc, temp);\r\n                bivecPool.push(dab, dbc, dca);\r\n                return [a, c, d];\r\n            }\r\n            // new direction is already normal dabc\r\n            // but need to point to origin:\r\n            // dabc.mulfs(-a.dot(dabc));\r\n            // we do it outside of this fn\r\n            // because we need this important orientation information\r\n            // to construct corrected ordered 5-simplex\r\n            vec4Pool.push(da, db, dc, temp);\r\n            bivecPool.push(dab, dbc, dca);\r\n            return dabc;\r\n        }\r\n        function getClosestPoint5(a: Vec4, b: Vec4, c: Vec4, d: Vec4, e: Vec4, reverseOrder: boolean) {\r\n            // about reverseOrder:\r\n            // if reverseOrder == false\r\n            // da^db^dc (dabc) is pointing to outside\r\n            // else dabc is pointing to e (inside)\r\n\r\n            let ea = vec4Pool.pop().subset(a, e);\r\n            let eb = vec4Pool.pop().subset(b, e);\r\n            let ec = vec4Pool.pop().subset(c, e);\r\n            let ed = vec4Pool.pop().subset(d, e);\r\n            // vertex\r\n            if (e.dot(ea) > 0 && e.dot(eb) > 0 && e.dot(ec) > 0 && e.dot(ed) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed);\r\n                return [e];\r\n            }\r\n            // edge\r\n            let eab = bivecPool.pop().wedgevvset(ea, eb);\r\n            let ebc = bivecPool.pop().wedgevvset(eb, ec);\r\n            let eac = bivecPool.pop().wedgevvset(ea, ec);\r\n            let ead = bivecPool.pop().wedgevvset(ea, ed);\r\n            let ebd = bivecPool.pop().wedgevvset(eb, ed);\r\n            let ecd = bivecPool.pop().wedgevvset(ec, ed);\r\n            let temp = vec4Pool.pop();\r\n            if (temp.dotbset(ea, eab).dot(e) > 0 && temp.dotbset(ea, eac).dot(e) > 0 && temp.dotbset(ea, ead).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, e];\r\n            }\r\n            if (temp.dotbset(eb, eab).dot(e) < 0 && temp.dotbset(eb, ebc).dot(e) > 0 && temp.dotbset(eb, ebd).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [b, e];\r\n            }\r\n            if (temp.dotbset(ec, eac).dot(e) < 0 && temp.dotbset(ec, ebc).dot(e) < 0 && temp.dotbset(ec, ecd).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [c, e];\r\n            }\r\n            if (temp.dotbset(ed, ead).dot(e) < 0 && temp.dotbset(ed, ebd).dot(e) < 0 && temp.dotbset(ed, ecd).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [d, e];\r\n            }\r\n            // face\r\n            // normal vectors for 4 cells, be careful with directions\r\n            //  dabc\r\n            let eabc = vec4Pool.pop().wedgevbset(ea, ebc); // -\r\n            let eabd = vec4Pool.pop().wedgevbset(ea, ebd); // +\r\n            let eacd = vec4Pool.pop().wedgevbset(ea, ecd); // -\r\n            let ebcd = vec4Pool.pop().wedgevbset(eb, ecd); // +\r\n            if (temp.wedgevbset(eabc, eab).dot(e) < 0 && temp.wedgevbset(eabd, eab).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, b, e];\r\n            }\r\n            if (temp.wedgevbset(eabc, eac).dot(e) > 0 && temp.wedgevbset(eacd, eac).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, c, e];\r\n            }\r\n            if (temp.wedgevbset(eabd, ead).dot(e) > 0 && temp.wedgevbset(eacd, ead).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [a, d, e];\r\n            }\r\n            if (temp.wedgevbset(eabc, ebc).dot(e) < 0 && temp.wedgevbset(ebcd, ebc).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [b, c, e];\r\n            }\r\n            if (temp.wedgevbset(eabd, ebd).dot(e) < 0 && temp.wedgevbset(ebcd, ebd).dot(e) > 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [b, d, e];\r\n            }\r\n            if (temp.wedgevbset(eacd, ecd).dot(e) < 0 && temp.wedgevbset(ebcd, ecd).dot(e) < 0) {\r\n                vec4Pool.push(ea, eb, ec, ed, eabc, eabd, eacd, ebcd, temp);\r\n                bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n                return [c, d, e];\r\n            }\r\n            vec4Pool.push(ea, eb, ec, ed, temp);\r\n            bivecPool.push(eab, ebc, eac, ead, ebd, ecd);\r\n            // cell\r\n            // turn all face normals outside\r\n            if (reverseOrder) {\r\n                eabd.negs(); ebcd.negs();\r\n            } else {\r\n                eabc.negs(); eacd.negs();\r\n            }\r\n            if (eabc.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [a, b, c, e];\r\n            }\r\n            if (eabd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [a, b, d, e];\r\n            }\r\n            if (eacd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [a, c, d, e];\r\n            }\r\n            if (ebcd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return [b, c, d, e];\r\n            }\r\n            // otherwise origin is inside, return data for epa algorithm\r\n            return { reverseOrder, normals: [ebcd, eacd, eabd, eabc] };\r\n        }\r\n        export function gjkOutDistance(convex: Convex, initSimplex?: Vec4[]): {\r\n            simplex?: Vec4[];\r\n            reverseOrder?: boolean;\r\n            normals?: Vec4[];\r\n            normal?: Vec4;\r\n            distance?: number;\r\n        } {\r\n            if (!initSimplex) {\r\n                initSimplex = [convex[0]];\r\n            }\r\n            // datas for states\r\n            let steps = 0;\r\n            let s = initSimplex;\r\n            let reverseOrder5: boolean; // only used when s.length == 5 (store 5-simplex orientation)\r\n            // temp vars:\r\n            let p: Vec4;\r\n            let pn: Vec4 | Vec4[] | { normals: Vec4[], reverseOrder: boolean };\r\n            // let steps = [];\r\n            while (steps++ < maxGjkStep) {\r\n                // steps.push(s.length);\r\n                switch (s.length) {\r\n                    case 1:\r\n                        // steps.push(s[0].norm());//dbg\r\n                        p = supportNeg(convex, s[0]);\r\n                        if (p === s[0]) {\r\n                            return {\r\n                                simplex: s,\r\n                                normal: vec4Pool.pop().copy(s[0]).negs(),\r\n                                distance: s[0].norm()\r\n                            };\r\n                        }\r\n                        s.push(p); //keep s[0] older\r\n                        break;\r\n                    case 2:\r\n                        pn = getClosestPointOrNormal2(s[0], s[1]);\r\n                        // ignore far point and go on with single point\r\n                        if (pn === s[1]) { s[0] = s[1]; s.pop(); continue; }\r\n                        // degenerated case: exact contact simplex\r\n                        if (pn.norm1() === 0) { return {}; }\r\n                        // steps.push(-pn.clone().norms().dot(s[0]));//dbg\r\n                        p = support(convex, pn);\r\n                        // simplex can't move on, terminate\r\n                        if (p === s[0] || p === s[1]) { return { simplex: s, normal: pn.norms(), distance: -s[0].dot(pn) }; }\r\n                        pn.pushPool();\r\n                        s.push(p);\r\n                        break;\r\n                    case 3:\r\n                        pn = getClosestPointOrNormal3(s[0], s[1], s[2]);\r\n                        if ((pn as Vec4[]).length) {\r\n                            // ignore far points and go on with fewer points\r\n                            s = pn as Vec4[]; continue;\r\n                        }\r\n                        // degenerated case: exact contact simplex\r\n                        if ((pn as Vec4).norm1() === 0) { return {}; }\r\n\r\n                        // steps.push(-(pn as Vec4).clone().norms().dot(s[0]));//dbg\r\n                        p = support(convex, pn as Vec4);\r\n                        // simplex can't move on, terminate\r\n                        if (p === s[0] || p === s[1] || p === s[2]) {\r\n                            return { simplex: s, normal: (pn as Vec4).norms(), distance: -s[0].dot((pn as Vec4)) };\r\n                        }\r\n                        (pn as Vec4).pushPool();\r\n                        s.push(p);\r\n                        break;\r\n                    case 4:\r\n                        pn = getClosestPointOrNormal4(s[0], s[1], s[2], s[3]);\r\n                        if ((pn as Vec4[]).length) {\r\n                            // ignore far points and go on with fewer points\r\n                            s = pn as Vec4[]; continue;\r\n                        }\r\n                        let normal = pn as Vec4;\r\n                        let dotFactor = -normal.dot(s[0]);\r\n                        reverseOrder5 = dotFactor > 0; // if true, normal obtained by da^db^dc towards origin\r\n                        normal.mulfs(dotFactor); // use mul to detect nomal or dotFactor is zero\r\n                        // degenerated case: exact contact simplex\r\n                        if (normal.norm1() === 0) { return {} }\r\n\r\n                        // steps.push(-(pn as Vec4).clone().norms().dot(s[0]));//dbg\r\n                        p = support(convex, normal);\r\n                        // simplex can't move on, terminate\r\n                        if (p === s[0] || p === s[1] || p === s[2] || p === s[3]) { return { simplex: s, normal: normal.norms(), distance: -normal.dot(s[0]) }; }\r\n                        normal.pushPool();\r\n                        s.push(p);\r\n                        break;\r\n                    case 5:\r\n                        // we won't go to 5th dimension, so no normal to find anymore\r\n                        pn = getClosestPoint5(s[0], s[1], s[2], s[3], s[4], reverseOrder5!);\r\n                        if ((pn as Vec4[]).length) {\r\n                            // ignore far points and go on with fewer points\r\n                            s = pn as Vec4[]; continue;\r\n                        } else {\r\n                            // interior of simplex, stop\r\n                            let info = pn as {\r\n                                reverseOrder: boolean;\r\n                                normals: Vec4[];\r\n                            };\r\n                            let out = { simplex: s, reverseOrder: info.reverseOrder, normals: info.normals };\r\n                            return out;\r\n                        }\r\n\r\n                    default: console.assert(false, \"simplex points error\");\r\n                }\r\n            }\r\n            console.warn(\"Physics engin's GJK algorithm has been interupped by too many steps.\"); return {};\r\n        }\r\n        /** test convex1 - convex2 to origin */\r\n        export function gjkDiffTest(convex1: Convex, convex2: Convex, initSimplex1?: Vec4[], initSimplex2?: Vec4[]): {\r\n            simplex1?: Vec4[];\r\n            simplex2?: Vec4[];\r\n            normals?: Vec4[];\r\n            reverseOrder?: boolean;\r\n        } {\r\n            if (!initSimplex1) {\r\n                initSimplex1 = [convex1[0]];\r\n            }\r\n            if (!initSimplex2) {\r\n                initSimplex2 = [convex2[0]];\r\n            }\r\n            // datas for states\r\n            let s1 = initSimplex1;\r\n            let s2 = initSimplex2;\r\n            let reverseOrder5: boolean;\r\n            // temp vars:\r\n            let p1: Vec4;\r\n            let p2: Vec4;\r\n            let normal: Vec4;\r\n            let _vec4 = vec4Pool.pop();\r\n            // while (true) {\r\n            // switch (s1.length) {\r\n            // case 1:\r\n            [p1, p2] = supportDiffTest(convex1, convex2, _vec4.subset(s2[0], s1[0]));\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0])) {\r\n                return {};\r\n            }\r\n            s1.push(p1); s2.push(p2);\r\n            //     break;\r\n            // case 2:\r\n            normal = getDiffNormal2(s1[0], s1[1], s2[0], s2[1]);\r\n            if (normal.norm1() === 0) { return {}; }\r\n            [p1, p2] = supportDiffTest(convex1, convex2, normal);\r\n            // simplex can't move on, terminate\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1])) { return {}; }\r\n            normal.pushPool();\r\n            s1.push(p1); s2.push(p2);\r\n            //     break;\r\n            // case 3:\r\n            normal = getDiffNormal3(s1[0], s1[1], s1[2], s2[0], s2[1], s2[2]);\r\n            if (normal.norm1() === 0) { return {}; }\r\n            [p1, p2] = supportDiffTest(convex1, convex2, normal);\r\n            // simplex can't move on, terminate\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1]) || (p1 === s1[2] && p2 === s2[2])) {\r\n                return {};\r\n            }\r\n            normal.pushPool();\r\n            s1.push(p1); s2.push(p2);\r\n            //     break;\r\n            // case 4:\r\n            normal = getDiffNormal4(s1[0], s1[1], s1[2], s1[3], s2[0], s2[1], s2[2], s2[3]);\r\n            let originDir = vec4Pool.pop().subset(s1[0], s2[0]);\r\n            let dotFactor = -normal.dot(originDir); originDir.pushPool();\r\n            normal.mulfs(dotFactor); // use mul to detect nomal or dotFactor is zero\r\n            if (normal.norm1() === 0) { return {}; }\r\n            reverseOrder5 = dotFactor > 0;\r\n            [p1, p2] = supportDiffTest(convex1, convex2, normal);\r\n            // simplex can't move on, terminate\r\n            if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1]) || (p1 === s1[2] && p2 === s2[2]) || (p1 === s1[3] && p2 === s2[3])) {\r\n                return {};\r\n            }\r\n            normal.pushPool();\r\n            s1.push(p1); s2.push(p2);\r\n            while (true) {\r\n                let res = getDiffNormal5(\r\n                    s1[0], s1[1], s1[2], s1[3], s1[4],\r\n                    s2[0], s2[1], s2[2], s2[3], s2[4], reverseOrder5\r\n                );\r\n                if (!res.normal) {\r\n                    // interior, pass data to epadiff\r\n                    return { simplex1: s1, simplex2: s2, normals: res.normals, reverseOrder: res.reverseOrder };\r\n                }\r\n                reverseOrder5 = res.reverseOrder;\r\n                [p1, p2] = supportDiffTest(convex1, convex2, res.normal);\r\n                // simplex can't move on, terminate\r\n                if (!p1 || (p1 === s1[0] && p2 === s2[0]) || (p1 === s1[1] && p2 === s2[1]) || (p1 === s1[2] && p2 === s2[2]) || (p1 === s1[3] && p2 === s2[3]) || (p1 === s1[4] && p2 === s2[4])) {\r\n                    return {};\r\n                }\r\n                s1 = res.simplex1; s1.push(p1);\r\n                s2 = res.simplex2; s2.push(p2);\r\n            }\r\n        }\r\n        function getDiffNormal2(a1: Vec4, b1: Vec4, a2: Vec4, b2: Vec4) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let adb = a.dot(b);\r\n            let la = b.normsqr() - adb;\r\n            let lb = a.normsqr() - adb;\r\n            let out = vec4Pool.pop().set().addmulfs(a, -la).addmulfs(b, -lb);\r\n            vec4Pool.push(a, b);\r\n            return out;\r\n        }\r\n        function getDiffNormal3(\r\n            a1: Vec4, b1: Vec4, c1: Vec4,\r\n            a2: Vec4, b2: Vec4, c2: Vec4\r\n        ) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let c = vec4Pool.pop().subset(c1, c2);\r\n            let ca = vec4Pool.pop().subset(a, c);\r\n            let cb = vec4Pool.pop().subset(b, c);\r\n\r\n            let biv = bivecPool.pop().wedgevvset(ca, cb);\r\n            let out = ca;\r\n            out.wedgevbset(a, biv).wedgevbset(out, biv);\r\n            vec4Pool.push(a, b, c, cb); biv.pushPool();\r\n            return out;\r\n        }\r\n        function getDiffNormal4(\r\n            a1: Vec4, b1: Vec4, c1: Vec4, d1: Vec4,\r\n            a2: Vec4, b2: Vec4, c2: Vec4, d2: Vec4\r\n        ) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let c = vec4Pool.pop().subset(c1, c2);\r\n            let d = vec4Pool.pop().subset(d1, d2);\r\n            let da = vec4Pool.pop().subset(a, d);\r\n            let db = vec4Pool.pop().subset(b, d);\r\n            let dc = vec4Pool.pop().subset(c, d);\r\n\r\n            let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n            let dabc = vec4Pool.pop().wedgevbset(da, dbc);\r\n            dbc.pushPool();\r\n            vec4Pool.push(a, b, c, d, da, db, dc);\r\n            return dabc;\r\n        }\r\n        function getDiffNormal5(\r\n            a1: Vec4, b1: Vec4, c1: Vec4, d1: Vec4, e1: Vec4,\r\n            a2: Vec4, b2: Vec4, c2: Vec4, d2: Vec4, e2: Vec4,\r\n            reverseOrder: boolean\r\n        ) {\r\n            let a = vec4Pool.pop().subset(a1, a2);\r\n            let b = vec4Pool.pop().subset(b1, b2);\r\n            let c = vec4Pool.pop().subset(c1, c2);\r\n            let d = vec4Pool.pop().subset(d1, d2);\r\n            let e = vec4Pool.pop().subset(e1, e2);\r\n            let ea = vec4Pool.pop().subset(a, e);\r\n            let eb = vec4Pool.pop().subset(b, e);\r\n            let ec = vec4Pool.pop().subset(c, e);\r\n            let ed = vec4Pool.pop().subset(d, e);\r\n\r\n            let ebc = bivecPool.pop().wedgevvset(eb, ec);\r\n            let ebd = bivecPool.pop().wedgevvset(eb, ed);\r\n            let ecd = bivecPool.pop().wedgevvset(ec, ed);\r\n\r\n            let eabc = vec4Pool.pop().wedgevbset(ea, ebc); // -\r\n            let eabd = vec4Pool.pop().wedgevbset(ea, ebd); // +\r\n            let eacd = vec4Pool.pop().wedgevbset(ea, ecd); // -\r\n            let ebcd = vec4Pool.pop().wedgevbset(eb, ecd); // +\r\n            if (reverseOrder) {\r\n                eabd.negs(); ebcd.negs();\r\n            } else {\r\n                eabc.negs(); eacd.negs();\r\n            }\r\n            if (eabc.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [a1, b1, c1, e1], simplex2: [a2, b2, c2, e2], normal: eabc, reverseOrder: reverseOrder };\r\n            }\r\n            if (eabd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [a1, b1, d1, e1], simplex2: [a2, b2, d2, e2], normal: eabd, reverseOrder: !reverseOrder };\r\n            }\r\n            if (eacd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [a1, c1, d1, e1], simplex2: [a2, c2, d2, e2], normal: eacd, reverseOrder: reverseOrder };\r\n            }\r\n            if (ebcd.dot(e) < 0) {\r\n                vec4Pool.push(eabc, eabd, eacd, ebcd);\r\n                return { simplex1: [b1, c1, d1, e1], simplex2: [b2, c2, d2, e2], normal: ebcd, reverseOrder: !reverseOrder };\r\n            }\r\n            bivecPool.push(ebc, ebd, ecd);\r\n            vec4Pool.push(a, b, c, d, e, ea, eb, ec, ed);\r\n            // otherwise origin is inside, return data for epa algorithm\r\n            return { reverseOrder, normals: [ebcd, eacd, eabd, eabc] };\r\n        }\r\n        /** expanding polytope algorithm */\r\n        export function epa(convex: Convex, initCondition: {\r\n            simplex: Vec4[],\r\n            reverseOrder: boolean,\r\n            normals: Vec4[] // normal must towards outside (away from origin)\r\n        }) {\r\n            let simplex = initCondition.simplex;\r\n            let normals = initCondition.normals;\r\n            if (initCondition.reverseOrder) {\r\n                let temp = simplex[0]; simplex[0] = simplex[1]; simplex[1] = temp;\r\n                let temp2 = normals[0]; normals[0] = normals[1]; normals[1] = temp2;\r\n            }\r\n            if (normals.length === 4) {\r\n                let da = vec4Pool.pop().subset(simplex[0], simplex[3]);\r\n                let db = vec4Pool.pop().subset(simplex[1], simplex[3]);\r\n                let dc = vec4Pool.pop().subset(simplex[2], simplex[3]);\r\n\r\n                let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n                normals.push(vec4Pool.pop().wedgevbset(da, dbc));\r\n                dbc.pushPool();\r\n                vec4Pool.push(da, db, dc);\r\n            }\r\n            // tetrahedral cell list\r\n            let cs = [\r\n                [simplex[1], simplex[2], simplex[4], simplex[3]],\r\n                [simplex[2], simplex[0], simplex[4], simplex[3]],\r\n                [simplex[0], simplex[1], simplex[4], simplex[3]],\r\n                [simplex[0], simplex[2], simplex[4], simplex[1]],\r\n                [simplex[0], simplex[1], simplex[3], simplex[2]],\r\n            ]\r\n            // normal list\r\n            let ns = normals;\r\n            // distance list\r\n            let ds:number[] = [];\r\n            let mind = Infinity;\r\n            let minid: number;\r\n            for (let i = 0; i < 5; i++) {\r\n                ns[i].norms();\r\n                let val = ns[i].dot(cs[i][0]);\r\n                ds.push(val);\r\n                console.assert(val > 0, \"wrong init orientation\");\r\n                if (val < mind) {\r\n                    minid = i;\r\n                    mind = val;\r\n                }\r\n            }\r\n            let pa = vec4Pool.pop();\r\n            let pb = vec4Pool.pop();\r\n            let pc = vec4Pool.pop();\r\n            let pab = bivecPool.pop();\r\n\r\n            let steps = 0;\r\n            while (steps++ < maxEpaStep) {\r\n                let cell = cs[minid!];\r\n                let p = support(convex, ns[minid!]);\r\n                console.log(`Step: ${steps} Distance:${mind}`);\r\n                if (p === cell[0] || p === cell[1] || p === cell[2] || p === cell[3]) {\r\n                    // can't move on, found\r\n                    // vec4Pool.push(pa, pb, pc, pd);\r\n                    // bivecPool.push(pab, pac, pbc);\r\n                    for (let n of ns) {\r\n                        if (n !== ns[minid!]) n.pushPool();\r\n                    }\r\n                    vec4Pool.push(pa, pb, pc);\r\n                    bivecPool.push(pab);\r\n                    return { simplex: cell, distance: -mind, normal: ns[minid!] }\r\n                }\r\n\r\n                mind = Infinity;\r\n                // construct new convexhull after adding point p\r\n\r\n                let newcs: Vec4[][] = [];\r\n                let newns: Vec4[] = [];\r\n                let newds: number[] = [];\r\n                // borderformat [v1,v2,v3], v1,v2,v3's order is for orientation\r\n                // mark v1 null if duplicate need to remove, \r\n                let border: [Vec4|undefined, Vec4|undefined, Vec4|undefined][] = [];\r\n                function checkBorder(a: Vec4, b: Vec4, c: Vec4) {\r\n                    for (let i of border) {\r\n                        // if (i[0] === a) {\r\n                        //     if (i[1] === b) {\r\n                        //         if (i[2] === c) {\r\n                        //             // console.assert(false);\r\n                        //         }\r\n                        //     } else if (i[1] === c) {\r\n                        //         if (i[2] === b) {\r\n                        //             i[0] = null; return;\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n                        if (\r\n                            (i[0] === a && i[1] === c && i[2] === b) ||\r\n                            (i[0] === b && i[1] === a && i[2] === c) ||\r\n                            (i[0] === c && i[1] === b && i[2] === a)\r\n                        ) {\r\n                            i[0] = undefined; return;\r\n                        }\r\n                    }\r\n                    border.push([a, b, c]);\r\n                }\r\n                for (let idx = 0, csl = cs.length; idx < csl; idx++) {\r\n                    let cell = cs[idx];\r\n                    let a = cell[0];\r\n                    let b = cell[1];\r\n                    let c = cell[2];\r\n                    let d = cell[3];\r\n                    let determinant = ns[idx].dot(pa.subset(p, a));\r\n                    if (determinant > 0) {\r\n                        checkBorder(d, b, c); // +\r\n                        checkBorder(d, c, a); // -\r\n                        checkBorder(d, a, b); // +\r\n                        checkBorder(c, b, a); // -\r\n                    } else {\r\n                        newcs.push(cell);\r\n                        newns.push(ns[idx]);\r\n                        newds.push(ds[idx]);\r\n                        if (ds[idx] < mind) {\r\n                            mind = ds[idx]; minid = newns.length - 1;\r\n                        }\r\n                    }\r\n                }\r\n                for (let b of border) {\r\n                    if (!b[0]) continue;\r\n                    pa.subset(p, b[0]);\r\n                    pb.subset(p, b[1]!);\r\n                    pc.subset(p, b[2]!);\r\n                    pab.wedgevvset(pa, pb);\r\n                    newcs.push([p, b[0], b[1]!, b[2]!]);\r\n                    let n = vec4Pool.pop().wedgevbset(pc, pab).negs().norms();\r\n                    let d = n.dot(p);\r\n                    console.assert(d >= 0, \"new normal needs negs\");\r\n                    if (d < mind) {\r\n                        mind = d; minid = newds.length;\r\n                    }\r\n                    newns.push(n);\r\n                    newds.push(d);\r\n                }\r\n                ns = newns;\r\n                cs = newcs;\r\n                ds = newds;\r\n            }\r\n            console.warn(\"Physics engin's GJK-EPA algorithm has been interupped by too many steps.\"); return {};\r\n        }\r\n\r\n        /** expanding polytope algorithm for minkovsky difference */\r\n        export function epaDiff(convex1: Convex, convex2: Convex, initCondition: {\r\n            simplex1: Vec4[],\r\n            simplex2: Vec4[],\r\n            reverseOrder: boolean,\r\n            normals: Vec4[] // normal must towards outside (away from origin)\r\n        }) {\r\n            let s1 = initCondition.simplex1;\r\n            let s2 = initCondition.simplex2;\r\n            let normals = initCondition.normals;\r\n            if (initCondition.reverseOrder) {\r\n                let temp = s1[0]; s1[0] = s1[1]; s1[1] = temp;\r\n                temp = s2[0]; s2[0] = s2[1]; s2[1] = temp;\r\n                let temp2 = normals[0]; normals[0] = normals[1]; normals[1] = temp2;\r\n            }\r\n            if (normals.length === 4) {\r\n                let da = vec4Pool.pop().subset(s1[0], s1[3]).subs(s2[0]).adds(s2[3]);\r\n                let db = vec4Pool.pop().subset(s1[1], s1[3]).subs(s2[1]).adds(s2[3]);\r\n                let dc = vec4Pool.pop().subset(s1[2], s1[3]).subs(s2[2]).adds(s2[3]);\r\n\r\n                let dbc = bivecPool.pop().wedgevvset(db, dc);\r\n                normals.push(vec4Pool.pop().wedgevbset(da, dbc));\r\n                dbc.pushPool();\r\n                vec4Pool.push(da, db, dc);\r\n            }\r\n            // tetrahedral cell list\r\n            let cs1 = [\r\n                [s1[1], s1[2], s1[4], s1[3]],\r\n                [s1[2], s1[0], s1[4], s1[3]],\r\n                [s1[0], s1[1], s1[4], s1[3]],\r\n                [s1[0], s1[2], s1[4], s1[1]],\r\n                [s1[0], s1[1], s1[3], s1[2]],\r\n            ]\r\n            let cs2 = [\r\n                [s2[1], s2[2], s2[4], s2[3]],\r\n                [s2[2], s2[0], s2[4], s2[3]],\r\n                [s2[0], s2[1], s2[4], s2[3]],\r\n                [s2[0], s2[2], s2[4], s2[1]],\r\n                [s2[0], s2[1], s2[3], s2[2]],\r\n            ]\r\n            // normal list\r\n            let ns = normals;\r\n            // distance list\r\n            let ds:number[] = [];\r\n            let mind = Infinity;\r\n            let minid: number;\r\n\r\n            let pa = vec4Pool.pop();\r\n            let pb = vec4Pool.pop();\r\n            let pc = vec4Pool.pop();\r\n            let p12 = vec4Pool.pop();\r\n            let pab = bivecPool.pop();\r\n            for (let i = 0; i < 5; i++) {\r\n                ns[i].norms();\r\n                let val = ns[i].dot(pa.subset(cs1[i][0], cs2[i][0]));\r\n                ds.push(val);\r\n                console.assert(val > 0, \"wrong init orientation\");\r\n                if (val < mind) {\r\n                    minid = i;\r\n                    mind = val;\r\n                }\r\n            }\r\n\r\n            let steps = 0;\r\n            while (steps++ < maxEpaStep) {\r\n                let cell1 = cs1[minid!];\r\n                let cell2 = cs2[minid!];\r\n                let [p1, p2] = supportDiff(convex1, convex2, ns[minid!]);\r\n                p12.subset(p1, p2);\r\n                if (ns[minid!].dot(p12) <= mind ||\r\n                    (p1 === cell1[0] && p2 === cell2[0]) ||\r\n                    (p1 === cell1[1] && p2 === cell2[1]) ||\r\n                    (p1 === cell1[2] && p2 === cell2[2]) ||\r\n                    (p1 === cell1[3] && p2 === cell2[3])\r\n                ) {\r\n                    // can't move on, found\r\n                    for (let n of ns) {\r\n                        if (n !== ns[minid!]) n.pushPool();\r\n                    }\r\n                    vec4Pool.push(pa, pb, pc);\r\n                    bivecPool.push(pab);\r\n\r\n                    // console.log(`Step: ${steps}`);\r\n                    return { simplex1: cell1, simplex2: cell2, distance: -mind, normal: ns[minid!] }\r\n                }\r\n\r\n                mind = Infinity;\r\n                // construct new convexhull after adding point p\r\n\r\n                let newcs1: Vec4[][] = [];\r\n                let newcs2: Vec4[][] = [];\r\n                let newns: Vec4[] = [];\r\n                let newds: number[] = [];\r\n                // borderformat [a1,a2,a3, b1,b2,b3], order is for orientation\r\n                // a, b are convex A's points a - convex B's points b\r\n                // mark a1 null if duplicate need to remove, \r\n                let border: [Vec4|undefined, Vec4|undefined, Vec4|undefined, Vec4|undefined, Vec4|undefined, Vec4|undefined][] = [];\r\n                function checkBorder(\r\n                    a1: Vec4, b1: Vec4, c1: Vec4,\r\n                    a2: Vec4, b2: Vec4, c2: Vec4\r\n                ) {\r\n                    for (let i of border) {\r\n                        if (\r\n                            (i[0] === a1 && i[3] === a2 && i[1] === c1 && i[4] === c2 && i[5] === b2 && i[2] === b1) ||\r\n                            (i[0] === b1 && i[3] === b2 && i[1] === a1 && i[4] === a2 && i[5] === c2 && i[2] === c1) ||\r\n                            (i[0] === c1 && i[3] === c2 && i[1] === b1 && i[4] === b2 && i[5] === a2 && i[2] === a1)\r\n                        ) {\r\n                            i[0] = undefined; return;\r\n                        }\r\n                    }\r\n                    border.push([a1, b1, c1, a2, b2, c2]);\r\n                }\r\n                for (let idx = 0, csl = cs1.length; idx < csl; idx++) {\r\n                    let cell1 = cs1[idx];\r\n                    let cell2 = cs2[idx];\r\n                    let a1 = cell1[0]; let a2 = cell2[0];\r\n                    let b1 = cell1[1]; let b2 = cell2[1];\r\n                    let c1 = cell1[2]; let c2 = cell2[2];\r\n                    let d1 = cell1[3]; let d2 = cell2[3];\r\n                    let determinant = ns[idx].dot(pa.subset(p12, a1).adds(a2));\r\n                    if (determinant > 0) {\r\n                        checkBorder(d1, b1, c1, d2, b2, c2); // +\r\n                        checkBorder(d1, c1, a1, d2, c2, a2); // -\r\n                        checkBorder(d1, a1, b1, d2, a2, b2); // +\r\n                        checkBorder(c1, b1, a1, c2, b2, a2); // -\r\n                    } else {\r\n                        newcs1.push(cell1);\r\n                        newcs2.push(cell2);\r\n                        newns.push(ns[idx]);\r\n                        newds.push(ds[idx]);\r\n                        if (ds[idx] < mind) {\r\n                            mind = ds[idx]; minid = newns.length - 1;\r\n                        }\r\n                    }\r\n                }\r\n                for (let b of border) {\r\n                    if (!b[0]) continue;\r\n                    pa.subset(p12, b[0]).adds(b[3]!);\r\n                    pb.subset(p12, b[1]!).adds(b[4]!);\r\n                    pc.subset(p12, b[2]!).adds(b[5]!);\r\n                    pab.wedgevvset(pa, pb);\r\n                    newcs1.push([p1, b[0], b[1]!, b[2]!]);\r\n                    newcs2.push([p2, b[3]!, b[4]!, b[5]!]);\r\n                    let n = vec4Pool.pop().wedgevbset(pc, pab).negs().norms();\r\n                    let d = n.dot(p12);\r\n                    if (d < 0) return;\r\n                    // console.assert(d >= 0, \"new normal needs negs\");\r\n                    if (d < mind) {\r\n                        mind = d; minid = newds.length;\r\n                    }\r\n                    newns.push(n);\r\n                    newds.push(d);\r\n                }\r\n                ns = newns;\r\n                cs1 = newcs1;\r\n                cs2 = newcs2;\r\n                ds = newds;\r\n            }\r\n            // console.warn(\"Physics engin's GJK-EPA algorithm has been interupped by too many steps.\"); return {};\r\n        }"],"names":[],"mappings":"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"}